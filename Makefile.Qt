
# Users and packagers: Edit build_*.sh instead.
#

RADIUM_VERSION = 7.5.71


SHELL := /usr/bin/env bash


#----------------USER SETTINGS-------------------------------

# 1. Where to install
#
PREFIX ?= /usr/local
bindir ?= $(PREFIX)/bin
libdir ?= $(PREFIX)/lib


# 2. Where moc and uic for QT5 is installed.
#
MOC ?= moc
UIC ?= uic
#RCC ?= rcc

# 4. Release buid or Debug build
#
BUILDTYPE ?= DEBUG
#BUILDTYPE=RELEASE

IS_LINUX_BINARY ?= 


# 5. Full path to a python2 executable.  (Think it needs to be at least V2.4)
#
PYTHONEXE ?= `which python2`

export CPLUS_INCLUDE_PATH := $(VSTSDK)/VST2_SDK:$(VSTSDK)/VST3_SDK

#----------------END USER SETTINGS---------------------------



UNAME := $(shell uname)



#----------------DEFININTIONS----------------------

# Packagers: Don't change anything below here unless things don't work.


GCDIR ?= bin/packages/gc-8.2.8

QHTTPSERVER_PATH ?= $(shell pwd)/bin/packages/qhttpserver-master

LIBGIG_PATH ?= $(shell pwd)/bin/packages/libgig/src

LV2_INCLUDE_PATH ?= $(shell pwd)/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/LV2_SDK/lv2
LILV_INCLUDE_PATH ?= $(shell pwd)/pluginhost/JuceLibraryCode/modules/juce_audio_processors/format_types/LV2_SDK/lilv/

#MIDIINC=-Imidi/rtmidi
#MIDIINC=-Imidi/alsaseq

RADIUM_BIN ?= bin/radium

P=Qt/
API=api/

MAKEFILE=Makefile.Qt

MAX_NUM_UNDOS=800

CD=common/
T ?= /tmp/radium_objects/

STD_C=gnu99
STD_CPP ?= -std=gnu++20
USE_STD_COUNTING_SEMAPHORE ?= 0 # Too much problems. Will be enabled when things become more stable.

PKG ?= pkg-config
PKGqt ?= $(PKG)

O0 ?= -O0

CCC ?= g++
CC ?= gcc
CC_STATIC ?= $(CC)
GCC ?= gcc
CLANG ?= clang
CLANGPLUSPLUS ?= clang++
GPLUSPLUS ?= $(CCC)
LINKER ?= g++
STRIPPER ?= strip

GGDB_OPT ?= -ggdb3

CC2=./compile_to_tmp.sh $(CC)
CCC2=./compile_to_tmp.sh $(CCC)
GCC2=./compile_to_tmp.sh $(GCC)
GPLUSPLUS2=./compile_to_tmp.sh $(GPLUSPLUS)
CLANGPLUSPLUS2=./compile_to_tmp.sh $(CLANGPLUSPLUS)
CC_STATIC2=./compile_to_tmp.sh $(CC_STATIC)


TARGET_OS ?= any

S7OPTS ?=

FAUSTDIR = $(shell pwd)/bin/packages/faust
FAUST_LD_LIB_PATH ?=
WHICHFAUST = $(FAUST_LD_LIB_PATH) $(FAUSTDIR)/build/bin/faust
FAUST = $(WHICHFAUST) -I $(FAUSTDIR)/libraries/old # -I /home/kjetil/faust/architecture  

# Get lots of warnings
#ifneq (,$(findstring clang,$(CC)))
#	FAUST += -clang
#endif

LLVM_OPTS ?=

PLUGINHOSTSCANNERLIB ?= pluginhost/Builds/Linux/build/libMyPluginHost_for_scanner.a

JACKOPT ?=
LRDFOPT ?= `$(PKG) --cflags lrdf`
SNDFILEOPT ?= `$(PKG) --cflags sndfile`
SAMPLERATEOPT ?= `$(PKG) --cflags samplerate`
LIBLOOPT ?= `$(PKG) --cflags liblo`
# (G_BYTE_ORDER == G_LITTLE_ENDIAN)

PYOPTS ?=
QT_SYSTEM_CFLAGS ?=

QSCINTILLA_PATH ?= $(shell pwd)/bin/packages/QScintilla_src-2.14.0/src
#QScintilla_gpl-2.10.8

ifneq '' '$(findstring clang,$(CC))'
	CLANG_VERSION:= $(shell $(CC) --version|grep version |& sed "s/.*version \([0-9]*\.[0-9]*\.[0-9]*\\).*/\1/")
	CLANG_MAJOR:=$(shell echo $(CLANG_VERSION) | cut -d'.' -f1)
	CLANG_MINOR:=$(shell echo $(CLANG_VERSION) | cut -d'.' -f2)
	CLANG_SUB:=$(shell echo $(CLANG_VERSION) | cut -d'.' -f3)

	GCC_VERSION:=-1
	GCC_MAJOR:=-1
	GCC_MINOR:=-1
	GCC_SUB:=-1

else

	CLANG_VERSION:=-1
	CLANG_MAJOR:=-1
	CLANG_MINOR:=-1
	CLANG_SUB:=-1

	GCC_VERSION:=$(shell $(GCC) -dumpversion)
	GCC_MAJOR:=$(shell echo $(GCC_VERSION) | cut -d'.' -f1)
	GCC_MINOR:=$(shell echo $(GCC_VERSION) | cut -d'.' -f2)
	GCC_SUB:=$(shell echo $(GCC_VERSION) | cut -d'.' -f3)

endif


QT_GUI_CFLAGS ?=`$(PKGqt) --cflags Qt5Gui --cflags Qt5Widgets` $(FPIC)
QT_GUI_LDFLAGS ?= `$(PKGqt) --libs Qt5Gui --libs Qt5Widgets` $(FPIC)
QT_NETWORK_CFLAGS ?=`$(PKGqt) --cflags Qt5Network` $(FPIC)
QT_NETWORK_LDFLAGS ?= `$(PKGqt) --libs Qt5Network` $(FPIC)
QT_UI_CFLAGS ?= `$(PKGqt) --cflags Qt5UiTools` $(FPIC)
QT_UI_LDFLAGS ?= `$(PKGqt) --libs Qt5UiTools` $(FPIC)
QT_SVG_CFLAGS ?= `$(PKGqt) --cflags Qt5Svg` $(FPIC)
QT_SVG_LDFLAGS ?= `$(PKGqt) --libs Qt5Svg` $(FPIC)

#	If using QtWebEngine: (Not recommended, dragging doesn't work using it)
#	QT_CFLAGS ?= `$(PKGqt) --cflags Qt5Gui --cflags Qt5Network --cflags Qt5OpenGL --cflags Qt5Widgets --cflags Qt5WebEngineWidgets` -Ibin/packages/qhttpserver-master/src -Ibin/packages/QScintilla_gpl-2.10.8 -DQHTTPSERVER_EXPORT $(QT_SYSTEM_CFLAGS) -DUSE_QT5
#	QT_LDFLAGS ?= `$(PKGqt) --libs Qt5Gui --libs Qt5OpenGL --libs Qt5Network --libs Qt5Widgets --libs Qt5WebEngineWidgets`

#	If using QtWebKit:
QT_CFLAGS ?= `$(PKGqt) --cflags Qt5Gui --cflags Qt5Network --cflags Qt5OpenGL --cflags Qt5Widgets --cflags Qt5Concurrent` -I$(QHTTPSERVER_PATH)/src -I$(QSCINTILLA_PATH) -DQHTTPSERVER_EXPORT $(QT_SYSTEM_CFLAGS) $(FPIC)
QT_LDFLAGS ?=  $(QT_UI_LDFLAGS) $(QT_SVG_LDFLAGS) `$(PKGqt) --libs Qt5Gui --libs Qt5OpenGL --libs Qt5Widgets --libs Qt5Network ` $(FPIC)

ifeq ($(USE_QWEBENGINE),1)
	USE_QWEBENGINE_CFLAGS = -D USE_QWEBENGINE=1
	QT_CFLAGS += `$(PKGqt) --cflags Qt5WebEngine --cflags Qt5WebEngineCore  --cflags Qt5WebEngineWidgets` 
	QT_LDFLAGS += `$(PKGqt) --libs Qt5WebEngine --libs Qt5WebEngineCore  --libs Qt5WebEngineWidgets`
else
	USE_QWEBENGINE_CFLAGS = -D USE_QWEBENGINE=0
	QT_CFLAGS += `$(PKGqt) --cflags Qt5WebKitWidgets --cflags Qt5WebKit`
	QT_LDFLAGS += `$(PKGqt) --libs Qt5WebKitWidgets --libs Qt5WebKit`
endif

QT_CFLAGS += $(USE_QWEBENGINE_CFLAGS)


WNO_DEPRECATED_COPY=
ifeq ($(GCC_MAJOR),9)
	WNO_DEPRECATED_COPY=-Wno-deprecated-copy
#	QT_CFLAGS += $(WNO_DEPRECATED_COPY) # probably only necessary for qt 5.12 or older
endif

WNO_GNU_FOLDING_CONSTANT=

ifneq '' '$(findstring clang,$(CC))'
	WNO_DEPRECATED_BUILTINS=-Wno-deprecated-builtins
    WNO_GNU_FOLDING_CONSTANT=-Wno-gnu-folding-constant
endif

ifeq ($(CLANG_MAJOR),18)
	WNO_DEPRECATED_ENUM_ENUM_CONVERSION=-Wno-deprecated-enum-enum-conversion
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
	WNO_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY=-Wno-deprecated-copy-with-user-provided-copy
	WNO_EXTERN_C_COMPAT=-Wno-extern-c-compat
	WNO_VLA_CXX_EXTENSION=-Wno-vla-cxx-extension
	WNO_NAN_INFINITY_DISABLED=-Wno-nan-infinity-disabled
else ifeq ($(CLANG_MAJOR),17)
	WNO_DEPRECATED_ENUM_ENUM_CONVERSION=-Wno-deprecated-enum-enum-conversion
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
	WNO_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY=-Wno-deprecated-copy-with-user-provided-copy
else ifeq ($(CLANG_MAJOR),16)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
	WNO_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY=-Wno-deprecated-copy-with-user-provided-copy
else ifeq ($(CLANG_MAJOR),15)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
	WNO_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY=-Wno-deprecated-copy-with-user-provided-copy
else ifeq ($(CLANG_MAJOR),14)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else ifeq ($(CLANG_MAJOR),13)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else ifeq ($(CLANG_MAJOR),12)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else ifeq ($(CLANG_MAJOR),11)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else ifeq ($(CLANG_MAJOR),10)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else ifeq ($(CLANG_MAJOR),9)
	WNO_DEPRECATED_COPY_CLANG=-Wno-deprecated-copy
	WNO_MISLEADING_INDENTATION_CLANG=-Wno-misleading-indentation
else
	WNO_DEPRECATED_COPY_CLANG=
	WNO_MISLEADING_INDENTATION_CLANG=
	WNO_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY=
	WNO_EXTERN_C_COMPAT=
	WNO_VLA_CXX_EXTENSION=
	WNO_NAN_INFINITY_DISABLED=
endif

WNO_CLASS_MEMACCESS=
ifeq (,$(findstring clang,$(CC)))
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
endif


GTK_CFLAGS ?= `$(PKG) --cflags gtk+-2.0`
GTK_LDFLAGS ?= `$(PKG) --libs gtk+-2.0`

FREETYPE_CFLAGS ?=
# `$(PKG) --cflags freetype2`

VST_OPTS ?=

BOOST_INCLUDE=-I${HOME}/boost_1_85_0 -I${HOME}/boost_1_83_0 -I${HOME}/boost_1_77_0 -I${HOME}/boost_1_76_0 -I${HOME}/boost_1_75_0 -I${HOME}/boost_1_70_0 -I${HOME}/boost_1_67_0 -I${HOME}/boost_1_63_0 $(WNO_DEPRECATED_BUILTINS)
BOOST_FLAGS=$(WNO_CLASS_MEMACCESS) $(BOOST_INCLUDE)

CRASHREPORTER_OPTS ?= 
CRASHREPORTER_POSIX_OPTS ?= 

DEFINES=-DNOPAUSEPLAY -DCOMPILING_RADIUM -DUSE_WEAK_JACK
#-DDISABLE_BDWGC <---- It makes a lot of sense to enable this option in DEBUG mode if using -fsanitize=address
#-DMEMORY_DEBUG
# define SYSBASEDEBUG
# define TRACKER_DEBUG
# define MEMORY_DEBUG
# define TRACKER_GB

# If you want QT visual:
VISUAL ?= -DUSE_QT_VISUAL=1 -DUSE_GTK_VISUAL=0

# Or, if you want GTK visual: (Less maintained, and doesn't work very well on OSX. Possibly faster though.)
#VISUAL ?= -DUSE_QT_VISUAL=0 -DUSE_GTK_VISUAL=1

FULL_VERSION ?= 1



BUILD_DEBUG=NO
BUILD_OPTIMIZED=YES
OPTIMIZE ?= -O2 -flto

ifeq ($(BUILDTYPE), DEBUG)
	BUILD_DEBUG=YES
	BUILD_OPTIMIZED=NO
        OPTIMIZE=
endif
ifeq ($(BUILDTYPE), DEBUG_FAST)
	BUILD_DEBUG=YES
endif


WARNINGS_AS_ERRORS ?= 1

WERROR=""

ifeq ($(WARNINGS_AS_ERRORS), 1)
	WERROR = -Werror
endif




WNO_DEPRECATED_DECLARATIONS=

NO_ANALYZER=
NO_ANALYZER_MALLOC_LEAK=
WNO_CLASS_MEMACCESS=
WNO_PARENTHESIS=
WNO_TEMPLATE_ID_CDTOR=

ifeq ($(GCC_MAJOR),15)
	WNO_DEPRECATED_ENUM_ENUM_CONVERSION=-Wno-deprecated-enum-enum-conversion
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
	WNO_TEMPLATE_ID_CDTOR=-Wno-template-id-cdtor
	QT_CFLAGS += $(WNO_TEMPLATE_ID_CDTOR)
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),14)
	WNO_DEPRECATED_ENUM_ENUM_CONVERSION=-Wno-deprecated-enum-enum-conversion
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
	WNO_TEMPLATE_ID_CDTOR=-Wno-template-id-cdtor
	QT_CFLAGS += $(WNO_TEMPLATE_ID_CDTOR)
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),13)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),12)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),11)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),10)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined # -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
#	UNDEFINED_SANITIZE_OPTS=
else ifeq ($(GCC_MAJOR),9)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
#	UNDEFINED_SANITIZE_OPTS=
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
else ifeq ($(GCC_MAJOR),8)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
#	UNDEFINED_SANITIZE_OPTS=
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
else ifeq ($(GCC_MAJOR),7)
	UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined -fno-sanitize-recover
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
#	UNDEFINED_SANITIZE_OPTS=
	WNO_CLASS_MEMACCESS=-Wno-class-memaccess
	WNO_PARENTHESIS=-Wno-parentheses
else ifneq (,$(findstring clang,$(CC)))
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=-fno-sanitize=signed-integer-overflow
	WNO_DEPRECATED_DECLARATIONS=-Wno-deprecated-declarations
else
	UNDEFINED_SANITIZE_OPTS=
	NO_SANITIZE_SIGNED_INTEGER_OVERFLOW=
endif

FNO_OPTIMIZE_SIBLING_CALLS ?= -fno-optimize-sibling-calls


UNDEFINED_SANITIZE_OPTS= -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize-recover=undefined -DRADIUM_USES_UBSAN  # ,integer ,integer
#UNDEFINED_SANITIZE_OPTS=

ifneq (,$(findstring clang,$(CC)))
	UNDEFINED_SANITIZE_OPTS += -fno-sanitize=function -fno-sanitize=vptr 
endif

# -fsanitize-thread sometimes require: "export __GL_THREADED_OPTIMIZATIONS=0"
# "-Og" very often destroys debugging (although it's not supposed to), but without it things are too slow (well, it's already too slow, but -Og helps a lot).
#THREAD_SANITIZE_OPTS=-Og -fsanitize=thread -DRADIUM_USES_TSAN #-DDISABLE_BDWGC
THREAD_SANITIZE_OPTS=

ADDRESS_SANITIZE_OPTS ?= -fsanitize=address -fno-common -DRADIUM_USES_ASAN
#-DDISABLE_BDWGC
#ADDRESS_SANITIZE_OPTS=

# msan requires all 3rd party libraries to be compiled with msan.
#MEMORY_SANITIZE_OPTS=-fsanitize=memory -fsanitize-blacklist=SanitizerSupprMem.txt -DRADIUM_USES_MSAN
MEMORY_SANITIZE_OPTS=

# Note that "./build_clean.sh" must be run if changing DEBUG_BUILD_OPTS or changing from RELEASE to DEBUG build.
OS_DEBUG_BUILD_OPTS ?= 
#-mbranch-protection=standard -fno-sanitize-trap=all
#-flto -fvisibility=hidden -fsanitize=cfi -fno-sanitize-trap=all # -fanalyzer 
DEBUG_BUILD_OPTS = $(WERROR) -Wfloat-equal -Wall $(GGDB_OPT) $(FNO_OPTIMIZE_SIBLING_CALLS) $(UNDEFINED_SANITIZE_OPTS) $(THREAD_SANITIZE_OPTS) $(ADDRESS_SANITIZE_OPTS) $(MEMORY_SANITIZE_OPTS) $(WNO_NAN_INFINITY_DISABLED) $(OS_DEBUG_BUILD_OPTS)


NOSHORTEN64TO32FLAG=
ifneq (,$(findstring clang,$(CC)))
	NOSHORTEN64TO32FLAG += -Wno-shorten-64-to-32
endif


DEBUG_BUILD_OPTS += $(NOSHORTEN64TO32FLAG)
S7OPTS += $(NOSHORTEN64TO32FLAG)

ifneq (,$(findstring clang,$(CC)))
else
#	ifeq ($(GCC_MAJOR),5)
#		DEBUG_BUILD_OPTS += -Wshadow # gcc 4 has too many unnecessary positives
#	endif	
#	ifeq ($(GCC_MAJOR),6)
#		DEBUG_BUILD_OPTS += -Wshadow # gcc 4 has too many unnecessary positives
#	endif	

#	CPUOPT += -Og	 # BEWARE: -Og DOES indeed very much destroy debug capabilites. (<optimized out>)
endif

ifneq (,$(findstring FOR_LINUX,$(OS_OPTS)))
#	DEBUG_BUILD_OPTS += -ftree-vrp -Warray-bounds=2
endif

RELEASE_BUILD_OPTS_WITHOUT_NDEBUG = -DRELEASE -Wall -g

RELEASE_BUILD_OPTS = $(RELEASE_BUILD_OPTS_WITHOUT_NDEBUG) -DNDEBUG



OS_OPTS ?= 
OS_JUCE_LDFLAGS ?=
OS_LDFLAGS ?=
OS_LDFLAGS2 ?=
OS_DEPS ?=
OS_OBJS ?=

RADIUM_BFD_CFLAGS ?=
RADIUM_BFD_LDFLAGS ?=

RADIUM_THREADED_OPENGL ?= 1

REQTYPE_TYPE = -DUSE_QT_REQTYPE=1 -DUSE_GTK_REQTYPE=0
MENU_TYPE = -DUSE_QT_MENU=1 -DUSE_GTK_MENU=0

FLAGOPTS = $(DEFINES) -DGUIISQT -DFULL_VERSION=$(FULL_VERSION) -DIS_LITTLE_ENDIAN=1 -DUSE_OPENGL=1 $(VISUAL) $(REQTYPE_TYPE) $(MENU_TYPE)

RADIUM_VST2SDK_PATH ?= ${HOME}/SDKs/vstsdk2.4

COMMONOPT = -D__STDC_FORMAT_MACROS=1 -c `cat buildtype.opt` -I$(GCDIR)/include -I$(P) $(PYOPTS) `cat flagopts.opt` $(MIDIINC) $(OS_OPTS) $(VST_OPTS) -Wextra -Wno-unused-parameter -Wno-missing-field-initializers -Wno-unknown-pragmas -fno-strict-aliasing -Wmissing-field-initializers -Wnull-dereference -Wwrite-strings $(WNO_VLA_CXX_EXTENSION) -DTHREADED_OPENGL=$(RADIUM_THREADED_OPENGL)  $(IS_LINUX_BINARY) $(IS_MACOS_BINARY) -I $(RADIUM_VST2SDK_PATH)
#-fdelete-null-pointer-checks 
# $(WERROR)

#-Wstrict-overflow=4 -Wsuggest-attribute=format -Wstringop-overflow=4
#-Wsuggest-final-types -Wsuggest-final-methods

ifneq '' '$(findstring clang,$(CC))'
        COMMONOPT += -Wno-deprecated-register -Wlogical-op-parentheses # -Wunused-member-function (isn't there a warning to warn about unused variables only, not methods?)
else
	COMMONOPT += -Wduplicated-cond -Wduplicated-branches -Wlogical-op -Wrestrict -fmax-errors=5 
endif

#ifeq ($(GCC_MAJOR),7)
#	COMMONOPT += -fstrong-eval-order # Remove this one until all recent compilers support -fstrong-eval-order
#endif	

COMMONOPT += -DUSE_QT5


#$(CFLAGS)
# -Wunused-parameter

# OPT is C flags

OPT=$(COMMONOPT) -Wstrict-prototypes -Wmissing-prototypes -std=$(STD_C)  # Note: "-Wmissing-prototypes" is only valid for C files. The equivilant C++ option is "-Wmissing-declarations". However, "-Wmissing-declarations" doesn't always seem to work, don't know why.

OBJC_OPT=$(COMMONOPT) # -nostdinc++

OBJCPP_OPT ?=

# -D_FORTIFY_SOURCE=2 -O2

ifneq '' '$(findstring clang,$(CC))'
	OPT += -Wno-missing-field-initializers # TODO: Check if there's a better way ("{0}" again).
endif

CPUOPT ?=


ifeq ($(BUILD_OPTIMIZED), YES)
	CPUOPT += -O3
endif

ifeq ($(BUILD_OPTIMIZED), RELEASE)
	OPTIMIZE_O3=-O3 # SmoothDelay.hpp / Fade.hpp / Granulator.hpp runs faster with -O3.
else
	OPTIMIZE_O3=
endif



# -pg

# CPPOPT is CPP flags
CPPOPT = $(COMMONOPT) -Wmissing-declarations -DNDEBUG # NDEBUG must be defined to avoid runtime checks in Visualization Library. assert() is not used in radium, so it shouldnt be a problem.
# -Wno-class-memaccess added because of Qt.
# -Wno-parentheses added because of boost.
# -Wno-deprecated-declarations added because of Qt
# -Wno-deprecated-copy added because of Qt


QT_VERSION:=$(shell $(MOC) --version)
QT_MAJOR:=$(shell echo $(QT_VERSION) | cut -d'.' -f1)
QT_MINOR:=$(shell echo $(QT_VERSION) | cut -d'.' -f2)
QT_SUB:=$(shell echo $(QT_VERSION) | cut -d'.' -f3)

WNO_SUGGEST_OVERRIDE=

CPPOPT += $(STD_CPP) -DUSE_STD_COUNTING_SEMAPHORE=$(USE_STD_COUNTING_SEMAPHORE)

ifeq ($(BUILDTYPE), DEBUG)
	CPPOPT += -Woverloaded-virtual
endif

CPPOPT += -Wno-register

WNO_DUPLICATED_BRANCHES=
ifeq (,$(findstring clang,$(CC)))
#gcc
	WNO_DUPLICATED_BRANCHES=-Wno-duplicated-branches
endif


WNO_NULL_POINTER_ARITHMETIC=
ifneq (,$(findstring clang,$(CC)))
#clang
  ifeq ($(shell test $(CLANG_MAJOR) -gt 5; echo $$?),0)
     WNO_NULL_POINTER_ARITHMETIC += -Wno-null-pointer-arithmetic
  endif

endif


# Can't be enabled because of 3rd party header files:
#-Wsuggest-override

# Common QT opts (both 3 and 4)
COMMON_QTOPTS =

# QT4 opts
QTOPT = $(CPPOPT) -DUSE_QT4 -DUSE_QIMAGE_BUFFER=1 $(QT_CFLAGS) $(COMMON_QTOPTS) # -DQT_NO_OPENGL 
QTLINKFLAGS = $(QT_LDFLAGS)
#$(GTK_LDFLAGS)

#QTOPT = $(CPPOPT) -DUSE_QT4 -DQT_SHARED -DQT3_SUPPORT -I/home/kjetil/site/include/Qt3Support -I/home/kjetil/site/include/QtCore -I/home/kjetil/site/include/QtGui -I/home/kjetil/site/QtNetwork -I/home/kjetil/site/QtSql $(COMMON_QTOPTS)



#
# or:
#

# QT3 opts
# 
#QTOPT = $(CPPOPT) -DUSE_QT3 `pkg-config --cflags qt-mt` $(COMMON_QTOPTS)
#QTLINKFLAGS = `pkg-config --libs qt-mt` `pkg-config --libs gtk+-2.0`

#QTLINKFLAGS = $(QT_LDFLAGS) -static `pkg-config --static --libs gtk+-2.0`
#QTLINKFLAGS = $(QT_LDFLAGS) /tmp/radium/lib/libgtk-x11-2.0.a /tmp/radium/lib/libgdk-x11-2.0.a -L/tmp/radium/lib -latk-1.0 -lpangocairo-1.0 -lXext -lXrender -lXinerama -lXrandr -lXcursor -lXcomposite -lXdamage -lgdk_pixbuf-2.0 -lpangoft2-1.0 -lgio-2.0 -lXfixes -lcairo -lX11 -lpango-1.0  -lfreetype -lfontconfig -lgobject-2.0 -lglib-2.0

#/home/kjetil/site/src/qt-x11-free-3.3.8b/lib/libqt.a 

#`pkg-config --libs gtk+-2.0`
#/tmp/radium/lib/ -static -lX11 -lXext -lXft -lXcursor -lXinerama -lXrandr -lSM



# vl flags
VL_CFLAGS ?=
VL_LIBS ?=

VL_LDFLAGS=$(VL_LIBS)

ifeq ($(GCC_MAJOR),9)
	VL_CFLAGS += -Wno-class-memaccess -Wno-deprecated-copy
endif
ifeq ($(GCC_MAJOR),10)
	VL_CFLAGS += -Wno-class-memaccess -Wno-deprecated-copy
endif
ifeq ($(GCC_MAJOR),11)
	VL_CFLAGS += -Wno-class-memaccess -Wno-deprecated-copy
endif

ifneq (,$(findstring clang,$(CC)))
	ifeq ($(shell test $(CLANG_MAJOR) -gt 12; echo $$?),0)
		VL_CFLAGS+=-Wno-null-pointer-subtraction
	endif
endif

#ifeq ($(BUILD_DEBUG), YES)
#	VL_CFLAGS+=-U _GLIBCXX_SANITIZE_VECTOR -U _GLIBCXX_DEBUG
#endif

#-------------------OBJECT DEFINITIONS-------------------------------

OBJ1= $(T)windows.o $(T)window_config.o $(T)list.o $(T)vector.o $(T)hashmap.o $(T)Dynvec.o $(T)TimeData.o $(T)song.o $(T)blocks.o $(T)block_insert.o $(T)block_split.o $(T)block_delete.o $(T)block_properties.o $(T)tracks.o $(T)localzooms.o $(T)control.o $(T)lines.o $(T)font.o $(T)track_insert.o $(T)track_onoff.o $(T)settings.o $(T)mmd2load.o $(T)RT_memory_allocator.o

OBJ2= $(T)notes.o $(T)notes_legalize.o $(T)pitches.o $(T)wblocks.o $(T)wtracks.o $(T)sliders.o $(T)common.o

OBJ3= $(T)eventreciever.o $(T)scancodes.o $(T)reallines.o $(T)notestext.o $(T)trackreallines2.o $(T)signaturetext.o $(T)lpbtext.o $(T)bpmtext.o $(T)swingtext.o $(T)centtext.o $(T)chancetext.o $(T)veltext.o $(T)fxtext.o $(T)data_as_text.o $(T)clipboard_range.o $(T)clipboard_range_calc.o $(T)clipboard_range_copy.o $(T)clipboard_range_paste.o $(T)clipboard_range_cut.o $(T)transpose.o $(T)invert.o $(T)glissando.o $(T)pitchexpand.o $(T)expand.o $(T)clipboard_track_copy.o $(T)clipboard_track_paste.o $(T)clipboard_track_cut.o $(T)clipboard_tempos_copy.o $(T)clipboard_localzooms.o $(T)clipboard_block_copy.o $(T)clipboard_block_paste.o $(T)quantitize.o

OBJ4 = $(T)tbox.o $(T)area.o $(T)range.o $(T)nodelines.o

OBJ5= $(T)debug.o $(T)memory.o $(T)validatemem.o $(T)placement.o $(T)t_gc.o $(T)cursor.o $(T)cursor_updown.o $(T)velocities.o $(T)pixmap.o $(T)scroll.o

OBJ6= $(T)realline_calc.o $(T)gfx_subtrack.o $(T)LPB.o $(T)Signature.o $(T)Beats.o $(T)reallines_insert.o $(T)gfx_request.o

OBJ7= $(T)instruments.o $(T)patch.o $(T)undo_audio_patch_addremove.o $(T)fxlines.o $(T)fxlines_legalize.o $(T)sequencer.o $(T)seqtrack_automation.o $(T)song_tempo_automation.o $(T)sequencer_timing.o $(T)seqblock_automation.o $(T)seqblock_stretchspeed.o $(T)scroll_play.o $(T)crashreporter.o $(T)crashreporter_posix.o $(T)crashreporter_windows.o $(T)error.o $(T)threading.o $(T)Semaphores.o $(T)stacktoucher.o

#Tempos and time
OBJ8= $(T)reltempo.o $(T)temponodes.o $(T)tempos.o $(T)time.o $(T)temponodes_legalize.o $(T)swing.o

#Playing
OBJ9= $(T)Ptask2Mtask.o $(T)player.o $(T)scheduler.o $(T)scheduler_seqtracks.o $(T)scheduler_notes.o $(T)scheduler_reallines.o $(T)scheduler_LPB.o $(T)scheduler_Beats.o $(T)scheduler_Signature.o $(T)playerclass.o $(T)player_startstop.o $(T)player_pause.o
# $(T)scheduler_fxs.o $(T)scheduler_velocities.o $(T)scheduler_pitches.o 

#Disk
OBJ10= $(T)disk.o $(T)disk_fxs.o $(T)disk_wblock.o $(T)disk_localzooms.o $(T)disk_track.o $(T)disk_fx.o $(T)disk_fxnodelines.o $(T)disk_wtrack.o $(T)disk_temponodes.o $(T)disk_tempos.o $(T)disk_song.o $(T)disk_velocities.o $(T)disk_block.o $(T)disk_placement.o $(T)disk_stops.o $(T)disk_playlist.o $(T)disk_root.o $(T)disk_notes.o $(T)disk_lpbs.o $(T)disk_signatures.o $(T)disk_swing.o $(T)disk_windows.o $(T)disk_warea.o $(T)disk_save.o $(T)disk_load.o $(T)disk_saveload_blocktrack.o $(T)disk_instrument.o $(T)disk_patches.o $(T)disk_slider.o

#Undo
OBJ11= $(T)undo.o $(T)undo_notes.o $(T)undo_fxs.o $(T)undo_temponodes.o $(T)undo_tempos.o $(T)undo_swings.o $(T)undo_lpbs.o $(T)undo_signatures.o $(T)undo_notesandfxs.o $(T)undo_reallines.o $(T)undo_tracks.o $(T)undo_range.o $(T)undo_blocks.o $(T)undo_trackheader.o $(T)undo_reltempomax.o $(T)undo_maintempos.o $(T)undo_block_insertdelete.o $(T)undo_block_mergesplit.o $(T)undo_reltemposlider.o $(T)undo_sequencer.o $(T)undo_song_tempo_automation.o $(T)undo_patchvoice.o $(T)undo_patchname.o $(T)undo_instrument_color.o $(T)undo_chip_position.o

#X11 Spesific
#OBJ12= $(T)X11_visual.o $(T)X11_error.o $(T)X11_Ptask2Mtask.o $(T)X11_Bs_edit.o $(T)X11_Main.o $(T)X11_endprogram.o $(T)X11_disk.o $(T)X11_Player.o $(T)X11_memory.o $(T)X11_ReqType.o $(T)X11_keyboard.o $(T)X11_MidiProperties.o

#Qt Spesific
OBJ12= $(T)Qt_instruments.o $(T)Qt_visual.o $(T)GTK_visual.o $(T)Qt_Main.o $(T)KeyboardFocus.o $(T)Qt_endprogram.o $(T)Qt_EventReceiver.o $(T)Qt_colors.o $(T)Qt_Menues.o $(T)Qt_Fonts.o $(T)Qt_ReqType.o $(T)Qt_PopupMenu.o $(T)Qt_Bs_edit.o $(T)Qt_PluginWidget.o $(T)Qt_SliderPainter.o $(T)Qt_memory.o $(T)Qt_path_resolver.o $(T)Qt_settings.o $(T)Qt_disk.o $(T)Qt_MainWindow.o $(T)Qt_Time.o $(T)Qt_sequencer.o $(T)GTK_ReqType.o $(T)GTK_PopupMenu.o $(T)Qt_soundfilesaver_widget_callbacks.o $(T)Qt_comment_dialog.o $(T)Qt_song_properties.o $(T)Qt_preferences_callbacks.o $(T)Qt_tools_callbacks.o $(T)Qt_Error.o $(T)Qt_progresswindow.o $(T)Qt_check_for_updates.o $(T)Rational.o $(T)Qt_AutoBackups.o $(T)flowlayout.o $(T)Qt_PresetBrowser.o $(T)Qt_SaveRestoreWindows.o

#X11_MidiProperties.o $(T)X11_ClientMessages.o $(T)
#Qt_Bs_edit.o $(T)

#Posix (used by linux/win/mac)
OBJ_POSIX=$(T)posix_settings.o $(T)posix_Player.o

# Two of the following three must be set empty by the build script.
OBJ_X11 ?= $(T)X11_keyboard.o $(T)X11_disk.o
OBJ_WIN ?= $(T)X11_disk.o $(T)W_Keyboard.o
OBJ_MACOSX ?= $(T)X11_disk.o $(T)cocoa_Keyboard.o do.o $(T)machthreads.o

#Python
OBJ13=$(T)radium_wrap.o $(T)api_common.o $(T)api_keyplay.o $(T)api_keyplayedit.o $(T)api_navigate.o $(T)api_disk.o $(T)api_noteedit.o $(T)api_velocities.o $(T)api_pitches.o $(T)api_timing.o $(T)api_support.o $(T)wrapfunclist.o $(T)api_trackonoff.o $(T)api_zoom.o $(T)api_notemanipulate.o $(T)api_play.o $(T)api_clipboard.o $(T)api_undo.o $(T)api_various.o $(T)api_instruments.o $(T)api_soundpluginregistry.o $(T)api_requesters.o $(T)api_mouse.o $(T)api_sequencer.o $(T)api_gui.o $(T)api_osc.o $(T)api_midi.o

#Midi
OBJ14=$(T)disk_midi_fx.o $(T)disk_midi_instrument.o $(T)midi_fx.o $(T)midi_instrument.o $(T)midi_playfromstart.o $(T)midi_i_input.o $(T)midi_ports.o
#$(T)midi_menues.o
# alsaseq_midi.o

#Faust plugins
OBJ_FAUST=$(T)zita_rev.o $(T)stk_flute.o $(T)stk_bowed.o $(T)stk_blow_bottle.o $(T)stk_bass.o $(T)stk_blow_hole.o $(T)stk_brass.o $(T)stk_clarinet.o $(T)stk_flute_stk.o $(T)stk_glass_harmonica.o $(T)stk_harpsi.o $(T)stk_modal_bar.o $(T)stk_NLF_eks.o $(T)stk_NLF_fm.o $(T)stk_piano.o $(T)stk_saxophony.o $(T)stk_sitar.o $(T)stk_tibetan_bowl.o $(T)stk_tuned_bar.o $(T)stk_uni_bar.o $(T)stk_voice_form.o $(T)faust_tapiir.o $(T)faust_system_eq.o $(T)faust_system_tremolo.o $(T)faust_system_lowpass.o $(T)faust_system_highpass.o $(T)faust_system_lowshelf.o $(T)faust_system_highshelf.o $(T)faust_multibandcomp.o

#AUDIO
OBJ_AUDIO=$(T)audio_instrument.o $(T)SoundProducer.o $(T)AudioBuffer.o $(T)Jack_plugin.o $(T)find_jack_library.o $(T)Faust_plugins.o $(T)Bus_plugins.o $(T)Timeskew_plugin.o $(T)Patchbay_plugin.o $(T)MidiMessages_plugin.o $(T)VST_plugins.o $(T)Ladspa_plugins.o $(T)Sampler_plugin.o $(T)SampleRecorder.o $(T)SampleReader.o $(T)Seqtrack_plugin.o $(T)FluidSynth_plugin.o $(T)Pd_plugin.o $(T)Modulator_plugin.o $(T)SendReceive_plugins.o $(T)SoundPluginRegistry.o $(T)SoundPlugin.o $(T)AudioMeterPeaks.o $(T)Peaks.o $(T)Fade.o $(T)Mixer.o $(T)get_windows_commandlines.o $(T)Envelope.o $(T)Resampler.o $(T)SoundFonts.o $(T)Presets.o $(T)undo_audio_effect.o $(T)undo_connection_enabled.o $(T)undo_audio_connection_gain.o $(T)undo_pd_controllers.o $(T)undo_plugin_state.o $(T)SoundfileSaver.o $(T)system_compressor_wrapper.o $(T)KillJackd.o $(T)SF.o $(T)RIFF.o
 
#MultiCore.o $(T)Smooth.o

#Mixer
QM=mixergui/
OBJ_MIXER=$(T)QM_view.o $(T)QM_chip.o $(T)QM_MixerWidget.o $(T)undo_mixer.o $(T)undo_mixer_connections.o
#undo_chip_addremove.o

#OpenGL
OBJ_VL=$(T)GfxElements.o $(T)T2.o $(T)Render.o $(T)Widget.o $(T)CheckOpenGL.o


#Embedded scheme
OBJ_ES=$(T)scheme.o bin/packages/s7/s7_$(TARGET_OS)_$(BUILDTYPE).o $(SNDLIBFILES) $(T)s7webserver.o $(T)radium_s7_wrap.o $(T)qhttpconnection.o $(T)moc_qhttpconnection.o $(T)qhttprequest.o $(T)moc_qhttprequest.o $(T)qhttpresponse.o $(T)moc_qhttpresponse.o $(T)qhttpserver.o $(T)moc_qhttpserver.o $(T)http_parser.o

OBJ = $(OBJ12) $(OBJ_ES) $(OBJ1) $(OBJ2) $(OBJ3) $(OBJ4) $(OBJ5) $(OBJ6) $(OBJ7) $(OBJ8) $(OBJ9) $(OBJ10) $(OBJ11) $(OBJ13) $(OBJ_POSIX) $(OBJ_X11) $(OBJ_WIN) $(OBJ_MACOSX) $(OBJ14) $(OBJ_FAUST) $(OBJ_AUDIO) $(OBJ_MIXER) $(OBJ_VL)




#-------------------KARSJK-------------------------------

BUILD_DEPENDENCIES = flagopts.opt $(CD)keyboard_sub_ids.h dependencies_ok
#buildtype.opt 

PROGRAM_MODULES = $(RADIUM_BIN) bin/radium_crashreporter bin/protoconfparser.py bin/protos.conf bin/radium_error_message bin/radium_progress_window bin/radium_check_jack_status bin/radium_check_opengl bin/radium_plugin_scanner bin/scheme/api_protos.scm
OBJECT_DEPENDENCIES = $(BUILD_DEPENDENCIES)

#bin/styles/libqcleanlooksstyle.so bin/styles/libqplastiquestyle.so

all:
	@echo
	@echo "Use one of the ./build_* scripts to build Radium."
	@echo


radium: CCC_OK.touch $(BUILD_DEPENDENCIES) $(PROGRAM_MODULES) Makefile.Qt
	@echo
	@echo "Compilation OK."
	@echo
	@echo "Run 'bin/radium' to start radium"

very_clean: clean
	rm -f bin/packages/s7/*.o
	cd pluginhost/Builds/Linux && $(MAKE) clean && cd ../../../
	cd bin/packages && ./buildclean.sh

clean:
	@echo -e "\033[0;31mRun ./build_clean.sh instead\033[0m"
	@false

clean_pluginhost:
	echo "Cleaning pluginhost..."
	cd pluginhost/Builds/Linux && $(MAKE) clean && rm -fr build
	echo "Cleaning pluginhost finished..."

CCC_OK.touch: $(ALL_SHELL_SCRIPTS) Makefile.Qt
	bash check_CCC_OK.sh

dependencies_ok: check_dependencies.sh #Makefile
	bash check_dependencies.sh `./find_python_path.sh` $(MOC) $(UIC) test_build
#	sh check_dependencies.sh $(PYTHONEXE) $(MOC) $(UIC)
	touch dependencies_ok

install:
	@echo
	@echo "make install is not supported anymore. Use install.sh instead. See bin/packages/README"
	@echo
	exit -1
	bash check_install_dependencies.sh
	install -d $(DESTDIR)$(bindir)
	install -d $(DESTDIR)$(libdir)/radium

	cp -a bin/* $(DESTDIR)$(libdir)/radium/
	rm -fr $(DESTDIR)$(libdir)/radium/packages/*
	mkdir $(DESTDIR)$(libdir)/radium/packages/xmessage-1.0.3/
	cp bin/packages/xmessage-1.0.3/xmessage $(DESTDIR)$(libdir)/radium/packages/xmessage-1.0.3/

	rm -fr $(DESTDIR)$(libdir)/radium/python2.7

	chmod -R a+rx $(DESTDIR)$(libdir)/radium/*

	echo "#!/bin/sh" >$(DESTDIR)$(bindir)/radium
	echo "cd " $(libdir)/radium >>$(DESTDIR)$(bindir)/radium
	echo "./radium" >>$(DESTDIR)$(bindir)/radium

	chmod a+rx $(DESTDIR)$(bindir)/radium

uninstall:
	rm -fr $(DESTDIR)$(libdir)/radium
	rm -f $(DESTDIR)$(bindir)/radium

run-gdb:
#	./build_linux.sh -j7 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb ./radium
	./build_linux.sh -j7 && cd bin && gdb ./radium # [1]
#	./build_linux.sh -j7 && cd bin && G_DEBUG=fatal-criticals gdb QT_DEBUG_PLUGINS=1 QT_FATAL_WARNINGS=1 ./radium

# [1]
# G_DEBUG=fatal-criticals
# QT_FATAL_WARNINGS=1 doesn't work so well with qt5/linux right now. Getting
# "QXcbConnection: XCB error: 3 (BadWindow), sequence: 14219, resource id: 8795562, major code: 40 (TranslateCoords), minor code: 0"
# when closing dialogs. (In qt4 it can crash when we open dialogs, now it's when closing dialogs. However, in qt4 it was known why this happened (opengl race condition in qt).)

#./build_linux.sh -j7 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb -e ./radium -x ../gakk
#	make -j3 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb --args $(PYTHONEXE) start.py keybindings.conf && cd ..          

run-valgrind:
	echo "Execute first: jackd -s -r -ddummy -r 11000 -p 2048 -w 5000000"
	$(CC) -DMEMORY_DEBUG $(CD)memory.c $(OPT)
	rm -f Mixer.o SoundProducer.o linux_objs/Mixer.o linux_objs/SoundProducer.o
#	make -j3 && cd bin && valgrind --tool=helgrind $(PYTHONEXE) start.py keybindings.conf
	BUILDTYPE=DEBUG CFLAGS="-DMEMORY_DEBUG" ./build_linux.sh -j7 && rm -f memory.o Mixer.o SoundProducer.o && cd bin && valgrind --suppressions=../valgrind-python.supp --suppressions=../Qt47supp.txt --suppressions=../libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./radium
# --dont-load-new-song
#	make -j3 && cd bin && valgrind gdb --args $(PYTHONEXE) start.py keybindings.conf
	rm -f Mixer.o SoundProducer.o memory.o

# --tool=memcheck --read-var-info=yes --track-origins=yes

profile:
	@echo
	@echo
	@echo "=== NOTE: If 'make profile' fails, two radium instances might be running. ==="
	@echo
	perf top --sort comm,dso -p `pidof radium_linux.bin` -K
#--sort comm,dso
#	operf $(RADIUM_BIN) && opreport -ca |more

check: test
test: test_vector test_placement test_notes test_path_resolver test_seqautomation test_audiobuffer test_smoothdelay test_threading test_samplereader test_ratio test_refcounttimedata test_rt_memory_allocator test_radium_vector test_timedata
	@echo
	@echo " == All tests succeeded, apparently =="



TEST_ARCH_DEF=-DFOR_LINUX
ifeq ($(UNAME), Darwin)
	TEST_ARCH_DEF=-DFOR_MACOSX
endif

TEST_DEFS=-DRADIUM_IS_TESTING=1 $(TEST_ARCH_DEF)

TEST_TIMEDATA_OPTS=-DTEST_TIMEDATA_MAIN -Wall $(WERROR) -g -lpthread  $(filter-out -c, $(CPPOPT)) $(TEST_DEFS) -I. -I../Qt -Wno-error=parentheses

TEST_TIMEDATA_RUNNER=gdb -ex "set print thread-events off" -ex run -ex=quit ./a.out
#TEST_TIMEDATA_RUNNER=lldb -o run -f ./a.out

test_refcounttimedata:
	$(CCC) common/TimeData.cpp $(TEST_TIMEDATA_OPTS) `$(PKGqt) --cflags Qt5Core --libs Qt5Core` -fPIC -O3 -DTEST_SHARED_PTR -DTEST_REFCOUNTTIMEDATA -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
# --rtlib=compiler-rt

test_timedata:
	$(CCC) common/TimeData.cpp $(TEST_TIMEDATA_OPTS) -o a.out &&	$(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -Ofast -o a.out &&	$(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -Os -o a.out &&	$(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -O3 -o a.out &&	$(TEST_TIMEDATA_RUNNER)

	cd common && $(CCC) TimeData.cpp -DRELEASE $(TEST_TIMEDATA_OPTS) -O2 -o a.out &&	$(TEST_TIMEDATA_RUNNER)

	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -O3 -fsanitize=thread -o a.out && TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -O2 -fsanitize=undefined -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -O3 $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp $(TEST_TIMEDATA_OPTS) -O2 $(UNDEFINED_SANITIZE_OPTS) $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)

	cd common && $(CCC) TimeData.cpp -DRELEASE $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -O2 -fsanitize=thread -o a.out && TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp -DRELEASE $(TEST_TIMEDATA_OPTS) -O3 -fsanitize=undefined -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp -DRELEASE $(TEST_TIMEDATA_OPTS) -DTEST_SHARED_PTR=1 -O2 $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) TimeData.cpp -DRELEASE $(TEST_TIMEDATA_OPTS) -O3 -fsanitize=undefined $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)

test_timedata_gdb:
#	cd common && g++ TimeData.cpp $(TEST_TIMEDATA_OPTS) -o a.out &&	gdb -ex "set print thread-events off" $(TEST_TIMEDATA_RUNNER)
#	cd common && g++ TimeData.cpp $(TEST_TIMEDATA_OPTS) -O3 -o a.out &&	gdb -ex "set print thread-events off" $(TEST_TIMEDATA_RUNNER)
#	cd common && g++ TimeData.cpp $(TEST_TIMEDATA_OPTS) -O3 -fsanitize=thread -o a.out &&	gdb -ex "set print thread-events off" TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && g++ TimeData.cpp $(TEST_TIMEDATA_OPTS) -O3 -fsanitize=undefined $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" gdb -ex "set print thread-events off" -ex=quit ./a.out
	cd common && g++ TimeData.cpp $(TEST_TIMEDATA_OPTS) -O3 -fsanitize=undefined $(ADDRESS_SANITIZE_OPTS) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" ./a.out


TEST_RT_MEMORY_ALLOCATOR_OPTS=$(BOOST_FLAGS) $(TEST_TIMEDATA_OPTS)

test_rt_memory_allocator:
	echo
	printf "\033[0;36mTo use clang: CC=clang CCC=clang++ make test_rt_memory_allocator\033[0m\n"
	echo
	cd common && touch buildtype.opt flagopts.opt
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -DRADIUM_USES_UBSAN -O3 -fsanitize=undefined $(ADDRESS_SANITIZE_OPTS)  $(O0) -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -DRADIUM_USES_UBSAN -O3 -fsanitize=undefined $(ADDRESS_SANITIZE_OPTS)  -o a.out && UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -DRADIUM_USES_TSAN $(O0) -fsanitize=thread -o a.out && TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1,suppressions=../SanitizerSuppr.txt" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -DRADIUM_USES_TSAN -O1 -fsanitize=thread -o a.out && TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1,suppressions=../SanitizerSuppr.txt" $(TEST_TIMEDATA_RUNNER)
	#FIX! it fails!
	#cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -DRADIUM_USES_TSAN -O3 -fsanitize=thread -o a.out && TSAN_OPTIONS="history_size=7,second_deadlock_stack=1,abort_on_error=1,suppressions=../SanitizerSuppr.txt" $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN $(O0) -o a.out && $(TEST_TIMEDATA_RUNNER)
	cd common && $(CCC) RT_memory_allocator.cpp $(TEST_RT_MEMORY_ALLOCATOR_OPTS) -DTEST_MAIN -O3 -o a.out && $(TEST_TIMEDATA_RUNNER)

#mingw32:
#i686-w64-mingw32.static-g++ -Wall -Wno-parentheses RT_memory_allocator.cpp -I/home/kjetil/boost_1_63_0 -DTEST_MAIN -DFOR_WINDOWS -D__STDC_FORMAT_MACROS=1 -O3 -msse2 -mfpmath=sse -I../Qt -std=$(STD_CPP) -o a.out


test_ratio:
	cd common && ln -sf ratio_funcs.h test_ratio.cpp && g++ test_ratio.cpp -D__STDC_FORMAT_MACROS=1 -DTEST_MAIN -Wall $(WERROR) -Wno-unused-function -g -o a.out &&	./a.out
#	cd common && ln -sf ratio_funcs.h test_ratio.cpp && g++ test_ratio.cpp -D__STDC_FORMAT_MACROS=1 -DTEST_MAIN -Wall $(WERROR) -g -o a.out && gdb ./a.out

test_radium_vector:
	cd test && $(CCC) -Wall $(WERROR) test_radium_vector.cpp -DTEST_RADIUM_VECTOR_MAIN -Wall $(STD_CPP) -g -D__STDC_FORMAT_MACROS=1 $(ADDRESS_SANITIZE_OPTS) $(UNDEFINED_SANITIZE_OPTS) $(TEST_DEFS) -I../Qt -Wno-unused-function -O3 -o test_radium_vector
	ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" gdb -ex='set confirm on' -ex=run -ex=quit test/test_radium_vector
	ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" UBSAN_OPTIONS="print_stacktrace=1:abort_on_error=1" test/test_radium_vector

test_samplereader:
	cd audio && $(CCC) SampleReader.cpp -DTEST_MAIN -Wall $(STD_CPP) -g && ./a.out

test_threading:
	$(CCC) common/threading.cpp -DTEST_THREADING -Wall $(QTOPT) $(BOOST_FLAGS) -fPIC $(TEST_DEFS) $(JACKOPT) -Wno-deprecated-declarations
	mv threading.o test_threading.o
	$(CCC) test_threading.o $(QT_LDFLAGS) $(BOOST_FLAGS) -lpthread $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined $(STD_CPP)
	./a.out
#	rm -f test_threading.o
#	echo "GGGGGGGGGGG"
#	clang++ common/threading.cpp -DTEST_THREADING -Wall $(QTOPT) -fPIC $(TEST_DEFS)
#       mv threading.o test_threading.o
#	echo "HHHHHHHHH"
#	clang++ threading.o $(QT_LDFLAGS) -lpthread $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined  -std=$(STD_CPP)
#	./a.out


test_vector:
	$(CC) -g -Wall $(WERROR) -D__STDC_FORMAT_MACROS=1 -DTEST_VECTOR -DUSE_QT_REQTYPE=1 common/vector.c common/memory.c -IQt -I$(GCDIR)/include $(GCDIR)/.libs/libgc.a -lpthread $(ADDRESS_SANITIZE_OPTS) -fPIC $(TEST_DEFS) -std=$(STD_C)
#	valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out
#	ASAN_OPTIONS="detect_leaks=0,allocator_may_return_null=1,suppressions=SanitizerSuppr.txt,abort_on_error=1,new_delete_type_mismatch=0"
	ASAN_OPTIONS="detect_leaks=0,abort_on_error=1" ./a.out

test_placement:
	$(CC) -g -Wall $(WERROR) -DTEST_PLACEMENT -D__STDC_FORMAT_MACROS=1  -DUSE_QT_REQTYPE=1 common/placement.c common/memory.c -IQt -I$(GCDIR)/include $(GCDIR)/.libs/libgc.a -lpthread -fPIC $(TEST_DEFS) -std=$(STD_C) 
#	gdb ./a.out
	valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

test_notes:
	$(CCC) -g -Wall $(WERROR) -DTEST_NOTES -D__STDC_FORMAT_MACROS=1  -DUSE_OPENGL -DUSE_QT_REQTYPE=1 common/notes.cpp common/memory.c -IQt -I$(GCDIR)/include $(GCDIR)/.libs/libgc.a -lpthread -fPIC $(TEST_DEFS) $(STD_CPP) -Wno-deprecated
#	gdb ./a.out
	valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

# Commented out. Too many link errors.
test_path_resolver:
#	$(CCC) -g -Wall $(WERROR) -DTEST_PATH_RESOLVER  -DUSE_OPENGL -DUSE_QT_REQTYPE=1 -DUSE_QT4 Qt/Qt_path_resolver.cpp -IQt $(QT_CFLAGS) $(QT_LDFLAGS) $(GCDIR)/.libs/libgc.a -lpthread -fPIC  $(TEST_DEFS) -std=$(STD_CPP) -Wno-error=unknown-pragmas -DUSE_QT5 $(SNDFILEOPT) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\" -lsndfile
#	./a.out
#	valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

test_seqautomation:
	$(CCC) -g -Wall -Wextra $(WERROR) test/test_seqautomation.cpp  $(QTOPT) -UNDEBUG $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined  -DUSE_QT4 -DUSE_QT5 -fPIC $(TEST_DEFS) -DTEST_SEQAUTOMATION_MAIN
	$(CCC) test_seqautomation.o $(QT_LDFLAGS) $(QTLINKFLAGS) $(OS_LDFLAGS2) $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined -o test_seqautomation.bin
	./test_seqautomation.bin
	@echo "=== success: test_seqautomation ==="
	@rm test_seqautomation.bin

test_audiobuffer:
	$(CCC) -g -Wall $(WERROR) test/test_audiobuffer.cpp $(QTOPT) -UNDEBUG $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined -fPIC $(TEST_DEFS)  -DUSE_QT4 -DUSE_QT5
	$(CCC) test_audiobuffer.o $(QT_LDFLAGS) $(QTLINKFLAGS) $(OS_LDFLAGS2) $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined -o test_audiobuffer.bin
	LSAN_OPTIONS=detect_leaks=0 gdb -ex='set confirm on' -ex=run -ex=quit ./test_audiobuffer.bin
	LSAN_OPTIONS=detect_leaks=0 ./test_audiobuffer.bin
	@echo "=== success: test_audiobuffer ==="
	@rm test_audiobuffer.bin

test_smoothdelay:
	$(CCC) -g -Wall $(WERROR) test/test_smoothdelay.cpp $(CPPOPT) -UNDEBUG $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined -fPIC $(TEST_DEFS)
	$(CCC) -g -Wall $(WERROR) audio/Fade.cpp $(CPPOPT) -UNDEBUG -fPIC $(TEST_DEFS) -DTEST_SMOOTHDELAY -O3  -ffast-math -DMARCH_NATIVE_ALLOWED=1 # -march=native  # -ffast-math -fopt-info-vec-optimized -fopt-info-vec-all (maybe use QTOPT instead of CPPOPT...)
	$(CCC) test_smoothdelay.o Fade.o $(OS_LDFLAGS2)  $(ADDRESS_SANITIZE_OPTS) -fsanitize=undefined -o test_smoothdelay
	LSAN_OPTIONS=detect_leaks=0 gdb -ex='set confirm on' -ex=run -ex=quit ./test_smoothdelay
	LSAN_OPTIONS=detect_leaks=0 ./test_smoothdelay
	@echo "=== success: test_smoothdelay ==="
	@rm test_smoothdelay

#SMOOTHDELAY_OPTS=-Rpass-analysis=loop-vectorize -Rpass=loop-vectorize -Rpass-missed=loop-vectorize
benchmark_smoothdelay:
	@echo
	@printf "\033[0;36m!!!! First: ./build_clean.sh && BUILDTYPE=RELEASE ./build_linux.sh + ctrl-c.\n"
	@printf "!!!! To benchmark using clang: CC=clang CCC=clang++ make benchmark_smoothdelay.\033[0m\n"
	@echo
	$(CCC) -g -Wall $(WERROR) test/test_smoothdelay.cpp $(CPPOPT) -UNDEBUG -fPIC $(TEST_DEFS) -DBENCHMARK_SMOOTHDELAY -O3 $(SMOOTHDELAY_OPTS) -ffast-math -ffast-math #-fopt-info-vec-optimized -fopt-info-vec-all
	$(CCC) -g -Wall $(WERROR) audio/Fade.cpp $(CPPOPT) -UNDEBUG -fPIC $(TEST_DEFS) -DBENCHMARK_SMOOTHDELAY -O3  $(SMOOTHDELAY_OPTS) -DMARCH_NATIVE_ALLOWED=1 -march=native -ffast-math #-fopt-info-vec-optimized -fopt-info-vec-all
#-march=native

#-fno-signed-zeros 
	$(CCC) test_smoothdelay.o Fade.o $(OS_LDFLAGS2)  -o test_smoothdelay
	./test_smoothdelay
	@rm test_smoothdelay

packages: bin/packages/deletemetorebuild

bin/packages/deletemetorebuild: bin/packages/build.sh
	bash check_dependencies.sh `./find_python_path.sh` $(MOC) $(UIC) test_packages
	echo "\
	cd bin/packages;\
	./build.sh this_argument_is_not_used no \
	" >makescript.sh
	bash makescript.sh
	@echo
	@echo "packages successfully built. Now run ./build_linux.sh -j7"

#bin/styles/libqcleanlooksstyle.so: bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqcleanlooksstyle.so bin/styles
#	cp bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqcleanlooksstyle.so bin/styles/


#bin/styles/libqplastiquestyle.so: bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqplastiquestyle.so bin/styles
#	cp bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqplastiquestyle.so bin/styles/

#bin/styles:
#	mkdir bin/styles

#bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqcleanlooksstyle.so:
#	@echo "packages not built"

#bin/packages/qtstyleplugins-src-5.0.0/plugins/styles/libqplastiquestyle.so:
#	@echo "packages not built"


start_bin.sh:
	echo "#!/bin/sh" >start_bin.sh
	echo "cd bin" >>start_bin.sh
	echo "LD_LIBRARY_PATH=../lib $(PYTHONEXE) start.py keybindings.conf $@" >>start_bin.sh
	chmod a+rx start_bin.sh

/tmp/run_preload:
	time $(LINKER) -Xlinker --preload `cat buildtype.opt` $(OBJ) $(OS_OBJS) -o $(RADIUM_BIN) -g $(VL_LDFLAGS) $(OS_LDFLAGS) $(JACK_LDFLAGS) $(QTLINKFLAGS) $(OS_LDFLAGS2)
	touch /tmp/run_preload

$(RADIUM_BIN): $(OBJ) $(MAKEFILE) bin/packages/fluidsynth-1.1.6/src/.libs/libfluidsynth.a $(OS_DEPS)
	@echo
	@echo "Changed ($(RADIUM_BIN)):"
	@echo $?
	@echo
	time $(LINKER) `cat buildtype.opt` $(OBJ) $(OS_OBJS) -o $(RADIUM_BIN) -g $(VL_LDFLAGS) $(OS_LDFLAGS) $(JACK_LDFLAGS) $(QTLINKFLAGS) $(OS_LDFLAGS2)

#libqhttpserver.a
# -lX11 -ldl -lpthread -lfreetype -lXext
#$(LDFLAGS)

# `$(PKG) --libs fluidsynth`
#	$(LINKER) $(OBJ) $(GCDIR)/.libs/libgc.a -o $(RADIUM_BIN) -g  -lpython2.6 -lpthread $(QTLINKFLAGS) $(LDFLAGS) $(FPIC)

#	$(LINKER) -shared $(OBJ) $(GCDIR)/.libs/libgc.a -o bin/radiummodule.so -g  -lasound -L/home/kjetil/site/lib `pkg-config --libs Qt3Support` -lprofiler
# -pg 
#  -lasound


bin/radium_plugin_scanner: $(PLUGINHOSTSCANNERLIB)
	$(LINKER) $(PLUGINHOSTSCANNERLIB) -o bin/radium_plugin_scanner $(OS_JUCE_LDFLAGS) $(RADIUM_BFD_LDFLAGS) `$(PKG) --libs freetype2` $(OS_LDFLAGS2)

ifeq ($(BUILD_DEBUG), YES)

PLUGINHOSTOPTS = CONFIG=Debug
LIBPLUGIN_SCANNER_OPTS = CONFIG=Debug

else

PLUGINHOSTOPTS = CONFIG=Release
LIBPLUGIN_SCANNER_OPTS = CONFIG=Release

endif


# Adding "TARGET_ARCH=-g" to prevent juce from compiling with -march=native
PLUGINHOSTOPTS += CXX="$(CCC) -DCOMPILING_JUCE_PLUGINS_O=1 -DDEBUG_ALLOWED -DJUCE_ALSA_MIDI_NAME=\\\"Radium\\\" -DJUCE_ALSA_MIDI_INPUT_NAME=\\\"Radium\\\" -DJUCE_ALSA_MIDI_OUTPUT_NAME=\\\"Radium\\\"" TARGET_ARCH="-g -fno-strict-aliasing"

LIBPLUGIN_SCANNER_OPTS += CXX="$(CCC) -DCOMPILING_RADIUM_PLUGIN_SCANNER=1 -DDEBUG_ALLOWED -DJUCE_ALSA_MIDI_NAME=\\\"Radium\\\" -DJUCE_ALSA_MIDI_INPUT_NAME=\\\"Radium\\\" -DJUCE_ALSA_MIDI_OUTPUT_NAME=\\\"Radium\\\" " TARGET_ARCH="-g -fno-strict-aliasing" TARGET="libMyPluginHost_for_scanner.a"

pluginhost/Builds/Linux/build/libMyPluginHost.a: pluginhost/Builds/Linux/build/libMyPluginHost_for_scanner.a audio/Juce_plugins.cpp midi/midi_juce.cpp flagopts.opt pluginhost/MyPluginHost.jucer common/Vector.hpp audio/Smooth.cpp audio/Smooth_proc.h audio/JuceAudioDevice.cpp
	rm -f pluginhost/Builds/Linux/build/*/*/Juce_plugins_*.o pluginhost/Builds/Linux/build/*/*/Juce_plugin_scanner.o
# dryrun
	cd pluginhost/Builds/Linux && $(PLUGINHOSTOPTS) $(MAKE) -n
	cd pluginhost/Builds/Linux && $(PLUGINHOSTOPTS) $(MAKE)


pluginhost/Builds/Linux/build/libMyPluginHost_for_scanner.a: audio/Juce_plugin_scanner.cpp flagopts.opt pluginhost/MyPluginHost.jucer
	rm -f pluginhost/Builds/Linux/build/*/*/Juce_plugins_*.o pluginhost/Builds/Linux/build/*/*/Juce_plugin_scanner.o
# dryrun
	cd pluginhost/Builds/Linux && $(LIBPLUGIN_SCANNER_OPTS)  $(MAKE)  -n
	cd pluginhost/Builds/Linux && $(LIBPLUGIN_SCANNER_OPTS)  $(MAKE)


$(CD)keyboard_sub_ids.h: bin/generate_keyboard_sub_ids.py bin/keysubids.py
	cd bin && $(PYTHONEXE) generate_keyboard_sub_ids.py >../$(CD)keyboard_sub_ids.h

bin/protos.conf: $(API)protos.conf
	echo "#Warning! Strange things may happen if this file is changed." >bin/protos.conf
	echo "#The file is copied from ../python/ during make-process." >>bin/protos.conf
	cat $(API)protos.conf >>bin/protos.conf



#-----------------COMPILING-----------------------------

$(T)windows.o: $(BUILD_DEPENDENCIES) $(CD)windows.c 
	$(CC2) $(CD)windows.c $(OPT)

$(T)list.o:  $(BUILD_DEPENDENCIES) $(CD)list.c 
	$(CC2) $(CD)list.c $(OPT)

$(T)vector.o:  $(BUILD_DEPENDENCIES) $(CD)vector.c 
	$(CC2) $(CD)vector.c $(OPT)

$(T)hashmap.o:  $(BUILD_DEPENDENCIES) $(CD)hashmap.c 
	$(CC2) $(CD)hashmap.c $(OPT) $(NO_SANITIZE_SIGNED_INTEGER_OVERFLOW)  #-fno-sanitize=undefined

$(T)Dynvec.o:  $(BUILD_DEPENDENCIES) $(CD)Dynvec.c $(CD)dyn_type.h $(CD)nsmtracker.h
	$(CC2) $(CD)Dynvec.c $(OPT)

$(T)TimeData.o: $(BUILD_DEPENDENCIES) $(CD)TimeData.cpp $(CD)TimeData.hpp
	$(CCC2) $(CD)TimeData.cpp $(CPPOPT)

$(T)RT_memory_allocator.o: $(BUILD_DEPENDENCIES) $(CD)RT_memory_allocator.cpp
	$(CCC2) $(CD)RT_memory_allocator.cpp $(CPPOPT) $(BOOST_FLAGS)


$(T)song.o:  $(BUILD_DEPENDENCIES) $(CD)song.c 
	$(CC2) $(CD)song.c $(OPT)

$(T)blocks.o:  $(BUILD_DEPENDENCIES) $(CD)blocks.cpp
	$(CCC2) $(CD)blocks.cpp $(QTOPT)

$(T)tracks.o:  $(BUILD_DEPENDENCIES) $(CD)tracks.cpp $(CD)TimeData.hpp
	$(CCC2) $(CD)tracks.cpp $(CPPOPT)

$(T)localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)localzooms.c 
	$(CC2) $(CD)localzooms.c $(OPT)

$(T)notes.o:  $(BUILD_DEPENDENCIES) $(CD)notes.cpp common/nsmtracker.h common/TimeData.hpp
	$(CCC2) $(CD)notes.cpp $(QTOPT)

$(T)pitches.o:  $(BUILD_DEPENDENCIES) $(CD)pitches.cpp
	$(CCC2) $(CD)pitches.cpp $(CPPOPT)

$(T)wblocks.o:  $(BUILD_DEPENDENCIES) $(CD)wblocks.c 
	$(CC2) $(CD)wblocks.c $(OPT)

$(T)wtracks.o:  $(BUILD_DEPENDENCIES) $(CD)wtracks.cpp
	$(CCC2) $(CD)wtracks.cpp $(CPPOPT)

$(T)sliders.o:  $(BUILD_DEPENDENCIES) $(CD)sliders.c 
	$(CC2) $(CD)sliders.c $(OPT)

$(T)common.o:  $(BUILD_DEPENDENCIES) $(CD)common.c 
	$(CC2) $(CD)common.c $(OPT)

$(T)eventreciever.o:  $(BUILD_DEPENDENCIES) $(CD)eventreciever.c
	$(CC2) $(CD)eventreciever.c $(OPT)

$(T)scancodes.o:  $(BUILD_DEPENDENCIES) $(CD)scancodes.c
	$(CC2) $(CD)scancodes.c $(OPT)

$(T)reallines.o:  $(BUILD_DEPENDENCIES) $(CD)reallines.c
	$(CC2) $(CD)reallines.c $(OPT)

$(T)notestext.o:  $(BUILD_DEPENDENCIES) $(CD)notestext.c
	$(CC2) $(CD)notestext.c $(OPT)

$(T)trackreallines2.o:  $(BUILD_DEPENDENCIES) $(CD)trackreallines2.cpp common/TimeData.hpp
	$(CCC2) $(CD)trackreallines2.cpp  $(QTOPT) #$(OPT)

$(T)signaturetext.o:  $(BUILD_DEPENDENCIES) $(CD)signaturetext.cpp
	$(CCC2) $(CD)signaturetext.cpp $(QTOPT)

$(T)lpbtext.o:  $(BUILD_DEPENDENCIES) $(CD)lpbtext.cpp
	$(CCC2) $(CD)lpbtext.cpp $(QTOPT)

$(T)bpmtext.o:  $(BUILD_DEPENDENCIES) $(CD)bpmtext.cpp
	$(CCC2) $(CD)bpmtext.cpp $(QTOPT)

$(T)swingtext.o:  $(BUILD_DEPENDENCIES) $(CD)swingtext.cpp
	$(CCC2) $(CD)swingtext.cpp $(QTOPT)

$(T)centtext.o:  $(BUILD_DEPENDENCIES) $(CD)centtext.cpp
	$(CCC2) $(CD)centtext.cpp $(QTOPT)

$(T)chancetext.o:  $(BUILD_DEPENDENCIES) $(CD)chancetext.cpp
	$(CCC2) $(CD)chancetext.cpp $(QTOPT)

$(T)veltext.o:  $(BUILD_DEPENDENCIES) $(CD)veltext.cpp
	$(CCC2) $(CD)veltext.cpp $(QTOPT)

$(T)fxtext.o:  $(BUILD_DEPENDENCIES) $(CD)fxtext.cpp
	$(CCC2) $(CD)fxtext.cpp $(QTOPT)

$(T)data_as_text.o:  $(BUILD_DEPENDENCIES) $(CD)data_as_text.c
	$(CC2) $(CD)data_as_text.c $(OPT)

$(T)debug.o:  $(BUILD_DEPENDENCIES) $(CD)debug.c
	$(CC2) $(CD)debug.c $(OPT) 

$(T)memory.o:  $(BUILD_DEPENDENCIES) $(CD)memory.c
	$(CC2) $(CD)memory.c $(OPT)

$(T)validatemem.o:  $(BUILD_DEPENDENCIES) $(CD)validatemem.cpp $(CD)atomic.h
	$(CCC2) $(CD)validatemem.cpp $(QTOPT)

$(T)placement.o:  $(BUILD_DEPENDENCIES) $(CD)placement.c
	$(CC2) $(CD)placement.c $(OPT)

$(T)t_gc.o:  $(BUILD_DEPENDENCIES) $(CD)t_gc.c
	$(CC2) $(CD)t_gc.c $(OPT)

$(T)cursor.o:  $(BUILD_DEPENDENCIES) $(CD)cursor.cpp
	$(CCC2) $(CD)cursor.cpp $(QTOPT)

$(T)cursor_updown.o:  $(BUILD_DEPENDENCIES) $(CD)cursor_updown.cpp
	$(CCC2) $(CD)cursor_updown.cpp $(QTOPT)

$(T)velocities.o:  $(BUILD_DEPENDENCIES) $(CD)velocities.cpp
	$(CCC2) $(CD)velocities.cpp $(QTOPT)

$(T)realline_calc.o:  $(BUILD_DEPENDENCIES) $(CD)realline_calc.c
	$(CC2) $(CD)realline_calc.c $(OPT)

$(T)gfx_subtrack.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_subtrack.cpp common/nsmtracker.h
	$(CCC2) $(CD)gfx_subtrack.cpp $(QTOPT)

$(T)tempos.o:  $(BUILD_DEPENDENCIES) $(CD)tempos.cpp
	$(CCC2) $(CD)tempos.cpp $(QTOPT)

$(T)swing.o:  $(BUILD_DEPENDENCIES) $(CD)swing.cpp
	$(CCC2) $(CD)swing.cpp $(QTOPT)

$(T)LPB.o:  $(BUILD_DEPENDENCIES) $(CD)LPB.cpp
	$(CCC2) $(CD)LPB.cpp $(QTOPT)

$(T)Signature.o:  $(BUILD_DEPENDENCIES) $(CD)Signature.cpp
	$(CCC2) $(CD)Signature.cpp $(QTOPT)

$(T)Beats.o:  $(BUILD_DEPENDENCIES) $(CD)Beats.cpp common/TimeData.hpp
	$(CCC2) $(CD)Beats.cpp $(QTOPT)

$(T)temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)temponodes.c
	$(CC2) $(CD)temponodes.c $(OPT)

$(T)instruments.o:  $(BUILD_DEPENDENCIES) $(CD)instruments.cpp
	$(CCC2) $(CD)instruments.cpp $(CPPOPT)

$(T)fxlines.o:  $(BUILD_DEPENDENCIES) $(CD)fxlines.cpp
	$(CCC2) $(CD)fxlines.cpp $(CPPOPT)


$(T)tbox.o:  $(BUILD_DEPENDENCIES) $(CD)tbox.c
	$(CC2) $(CD)tbox.c $(OPT)


$(T)area.o:  $(BUILD_DEPENDENCIES) $(CD)area.c
	$(CC2) $(CD)area.c $(OPT)

$(T)nodelines.o:  $(BUILD_DEPENDENCIES) $(CD)nodelines.cpp
	$(CCC2) $(CD)nodelines.cpp $(QTOPT)

$(T)range.o:  $(BUILD_DEPENDENCIES) $(CD)range.c
	$(CC2) $(CD)range.c $(OPT)

$(T)sequencer.o:  $(BUILD_DEPENDENCIES) $(CD)sequencer.cpp audio/Envelope.hpp
	$(CCC2) $(CD)sequencer.cpp $(QTOPT)

$(T)seqtrack_automation.o:  $(BUILD_DEPENDENCIES) $(CD)seqtrack_automation.cpp $(CD)SeqAutomation.hpp $(CD)atomic.h common/Vector.hpp
	$(CCC2) $(CD)seqtrack_automation.cpp $(QTOPT) -Wno-null-dereference

$(T)song_tempo_automation.o:  $(BUILD_DEPENDENCIES) $(CD)song_tempo_automation.cpp $(CD)SeqAutomation.hpp $(CD)atomic.h
	$(CCC2) $(CD)song_tempo_automation.cpp $(QTOPT) -Wno-unknown-pragmas -Wno-null-dereference

$(T)sequencer_timing.o:  $(BUILD_DEPENDENCIES) $(CD)sequencer_timing.cpp $(CD)SeqAutomation.hpp $(CD)atomic.h
	$(CCC2) $(CD)sequencer_timing.cpp $(QTOPT) -Wno-null-dereference # -Wno-unknown-pragmas

$(T)seqblock_automation.o:  $(BUILD_DEPENDENCIES) $(CD)seqblock_automation.cpp $(CD)SeqAutomation.hpp $(CD)atomic.h audio/Envelope.hpp common/Vector.hpp
	$(CCC2) $(CD)seqblock_automation.cpp $(QTOPT) -Wno-unknown-pragmas

SEQBLOCK_STRETCHSPEED_OPT=
ifeq (,$(findstring clang,$(CC)))
 SEQBLOCK_STRETCHSPEED_OPT += -Wno-maybe-uninitialized
endif

$(T)seqblock_stretchspeed.o:  $(BUILD_DEPENDENCIES) $(CD)seqblock_stretchspeed.cpp $(CD)SeqAutomation.hpp 
	$(CCC2) $(CD)seqblock_stretchspeed.cpp $(QTOPT) $(SEQBLOCK_STRETCHSPEED_OPT)

$(T)time.o:  $(BUILD_DEPENDENCIES) $(CD)time.cpp common/time_proc.h
	$(CCC2) $(CD)time.cpp $(QTOPT)

$(T)reltempo.o:  $(BUILD_DEPENDENCIES) $(CD)reltempo.c
	$(CC2) $(CD)reltempo.c $(OPT)


#player source-files.

$(T)Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) $(CD)Ptask2Mtask.c $(CD)playerclass.h
	$(CC2) $(CD)Ptask2Mtask.c $(OPT) 

$(T)player.o:  $(BUILD_DEPENDENCIES) $(CD)player.c $(CD)playerclass.h $(CD)scheduler_proc.h
	$(CC2) $(CD)player.c $(OPT) #-fno-sanitize=undefined

$(T)scheduler.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler.c $(CD)scheduler_proc.h
	$(CC2) $(CD)scheduler.c $(OPT) #-fno-sanitize=undefined

$(T)scheduler_seqtracks.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_seqtracks.c $(CD)scheduler_proc.h
	$(CC2) $(CD)scheduler_seqtracks.c $(OPT) #-fno-sanitize=undefined

$(T)scheduler_notes.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_notes.cpp $(CD)scheduler_proc.h
	$(CCC2) $(CD)scheduler_notes.cpp $(CPPOPT)

#$(T)scheduler_pitches.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_pitches.c $(CD)scheduler_proc.h
#	$(CC2) $(CD)scheduler_pitches.c $(OPT)

#$(T)scheduler_velocities.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_velocities.c $(CD)scheduler_proc.h
#	$(CC2) $(CD)scheduler_velocities.c $(OPT) #-fno-sanitize=undefined $(O0)

#$(T)scheduler_fxs.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_fxs.c $(CD)scheduler_proc.h
#	$(CC2) $(CD)scheduler_fxs.c $(OPT)

$(T)scheduler_reallines.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_reallines.c $(CD)scheduler_proc.h
	$(CC2) $(CD)scheduler_reallines.c $(OPT) $(WNO_GNU_FOLDING_CONSTANT)

$(T)scheduler_LPB.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_LPB.c $(CD)scheduler_proc.h
	$(CC2) $(CD)scheduler_LPB.c $(OPT) $(WNO_GNU_FOLDING_CONSTANT)


$(T)scheduler_Beats.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_Beats.cpp $(CD)scheduler_proc.h
	$(CCC2) $(CD)scheduler_Beats.cpp $(CPPOPT)

$(T)scheduler_Signature.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler_Signature.c $(CD)scheduler_proc.h
	$(CC2) $(CD)scheduler_Signature.c $(OPT)

$(T)playerclass.o:  $(BUILD_DEPENDENCIES) $(CD)playerclass.c $(CD)playerclass.h
	$(CC2) $(CD)playerclass.c $(OPT)

$(T)player_startstop.o:  $(BUILD_DEPENDENCIES) $(CD)player_startstop.cpp $(CD)playerclass.h $(CD)scheduler_proc.h
	$(CCC2) $(CD)player_startstop.cpp $(QTOPT) #-fno-sanitize=undefined

$(T)patch.o:  $(BUILD_DEPENDENCIES) $(CD)patch.cpp $(CD)nsmtracker.h
	$(CCC2) $(CD)patch.cpp $(QTOPT)

$(T)undo_audio_patch_addremove.o:  $(BUILD_DEPENDENCIES) $(CD)undo_audio_patch_addremove.c $(CD)nsmtracker.h
	$(CC2) $(CD)undo_audio_patch_addremove.c $(OPT)

$(T)clipboard_range.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range.c $(CD)clipboard_range.h
	$(CC2) $(CD)clipboard_range.c $(OPT)

$(T)clipboard_range_calc.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_calc.c $(CD)clipboard_range.h
	$(CC2) $(CD)clipboard_range_calc.c $(OPT)

$(T)clipboard_range_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_copy.cpp $(CD)clipboard_range.h
	$(CCC2) $(CD)clipboard_range_copy.cpp $(CPPOPT)

$(T)clipboard_range_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_paste.cpp $(CD)clipboard_range.h
	$(CCC2) $(CD)clipboard_range_paste.cpp $(CPPOPT)

$(T)clipboard_range_cut.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_cut.cpp $(CD)clipboard_range.h
	$(CCC2) $(CD)clipboard_range_cut.cpp $(CPPOPT)

$(T)player_pause.o:  $(BUILD_DEPENDENCIES) $(CD)player_pause.c $(CD)playerclass.h
	$(CC2) $(CD)player_pause.c $(OPT)

$(T)PEQ_type.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_type.c $(CD)playerclass.h
	$(CC2) $(CD)PEQ_type.c $(OPT)


$(T)transpose.o:  $(BUILD_DEPENDENCIES) $(CD)transpose.cpp
	$(CCC2) $(CD)transpose.cpp $(CPPOPT)



$(T)disk_wblock.o:  $(BUILD_DEPENDENCIES) $(CD)disk_wblock.c $(CD)disk.h
	$(CC2) $(CD)disk_wblock.c $(OPT)


$(T)disk_localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)disk_localzooms.c $(CD)disk.h
	$(CC2) $(CD)disk_localzooms.c $(OPT)


$(T)disk_track.o:  $(BUILD_DEPENDENCIES) $(CD)disk_track.c $(CD)disk.h
	$(CC2) $(CD)disk_track.c $(OPT)

$(T)disk_fx.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fx.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_fx.cpp $(QTOPT)

$(T)disk_fxnodelines.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fxnodelines.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_fxnodelines.cpp $(CPPOPT)

$(T)disk_wtrack.o:  $(BUILD_DEPENDENCIES) $(CD)disk_wtrack.c $(CD)disk.h
	$(CC2) $(CD)disk_wtrack.c $(OPT)

$(T)disk_temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)disk_temponodes.c $(CD)disk.h
	$(CC2) $(CD)disk_temponodes.c $(OPT)

$(T)disk_tempos.o:  $(BUILD_DEPENDENCIES) $(CD)disk_tempos.c $(CD)disk.h
	$(CC2) $(CD)disk_tempos.c $(OPT)

$(T)disk_song.o:  $(BUILD_DEPENDENCIES) $(CD)disk_song.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_song.cpp $(QTOPT)

$(T)disk_velocities.o:  $(BUILD_DEPENDENCIES) $(CD)disk_velocities.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_velocities.cpp $(CPPOPT)

$(T)disk_block.o:  $(BUILD_DEPENDENCIES) $(CD)disk_block.c $(CD)disk.h
	$(CC2) $(CD)disk_block.c $(OPT)

$(T)disk_placement.o:  $(BUILD_DEPENDENCIES) $(CD)disk_placement.c $(CD)disk.h
	$(CC2) $(CD)disk_placement.c $(OPT)

$(T)disk_stops.o:  $(BUILD_DEPENDENCIES) $(CD)disk_stops.cpp $(CD)disk.h common/TimeData.hpp
	$(CCC2) $(CD)disk_stops.cpp $(CPPOPT)

$(T)disk_playlist.o:  $(BUILD_DEPENDENCIES) $(CD)disk_playlist.c $(CD)disk.h
	$(CC2) $(CD)disk_playlist.c $(OPT)

$(T)disk_root.o:  $(BUILD_DEPENDENCIES) $(CD)disk_root.c $(CD)disk.h
	$(CC2) $(CD)disk_root.c $(OPT)

$(T)disk_notes.o:  $(BUILD_DEPENDENCIES) $(CD)disk_notes.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_notes.cpp $(CPPOPT)

$(T)disk_lpbs.o:  $(BUILD_DEPENDENCIES) $(CD)disk_lpbs.c $(CD)disk.h
	$(CC2) $(CD)disk_lpbs.c $(OPT)

$(T)disk_signatures.o:  $(BUILD_DEPENDENCIES) $(CD)disk_signatures.c $(CD)disk.h
	$(CC2) $(CD)disk_signatures.c $(OPT)

$(T)disk_swing.o:  $(BUILD_DEPENDENCIES) $(CD)disk_swing.c $(CD)disk.h
	$(CC2) $(CD)disk_swing.c $(OPT)

$(T)disk_windows.o:  $(BUILD_DEPENDENCIES) $(CD)disk_windows.c $(CD)disk.h
	$(CC2) $(CD)disk_windows.c $(OPT)

DISK_FX_OPT=
ifeq (,$(findstring clang,$(CC)))
 DISK_FX_OPT += -Wno-jump-misses-init
endif
$(T)disk_fxs.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fxs.cpp $(CD)disk.h
	$(CCC2) $(CD)disk_fxs.cpp $(QTOPT)

$(T)disk.o:  $(BUILD_DEPENDENCIES) $(CD)disk.c $(CD)disk.h
	$(CC2) $(CD)disk.c $(OPT)

$(T)disk_warea.o:  $(BUILD_DEPENDENCIES) $(CD)disk_warea.c $(CD)disk.h
	$(CC2) $(CD)disk_warea.c $(OPT)

$(T)disk_save.o:  $(BUILD_DEPENDENCIES) $(CD)disk_save.c config/config.h common/nag.h
	$(CC2) $(CD)disk_save.c $(OPT)

$(T)disk_load.o:  $(BUILD_DEPENDENCIES) $(CD)disk_load.c config/config.h
	$(CC2) $(CD)disk_load.c $(OPT)

$(T)disk_saveload_blocktrack.o:  $(BUILD_DEPENDENCIES) $(CD)disk_saveload_blocktrack.cpp config/config.h
	$(CCC2) $(CD)disk_saveload_blocktrack.cpp $(QTOPT)


$(T)control.o:  $(BUILD_DEPENDENCIES) $(CD)control.c
	$(CC2) $(CD)control.c $(OPT)

$(T)disk_instrument.o:  $(BUILD_DEPENDENCIES) $(CD)disk_instrument.c $(CD)disk.h
	$(CC2) $(CD)disk_instrument.c $(OPT)

$(T)disk_patches.o:  $(BUILD_DEPENDENCIES) $(CD)disk_patches.c $(CD)disk.h
	$(CC2) $(CD)disk_patches.c $(OPT)

$(T)disk_slider.o:  $(BUILD_DEPENDENCIES) $(CD)disk_slider.c
	$(CC2) $(CD)disk_slider.c $(OPT)

$(T)clipboard_track_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_copy.cpp
	$(CCC2) $(CD)clipboard_track_copy.cpp $(CPPOPT)

$(T)clipboard_track_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_paste.cpp
	$(CCC2) $(CD)clipboard_track_paste.cpp $(CPPOPT)

$(T)clipboard_track_cut.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_cut.cpp common/TimeData.hpp
	$(CCC2) $(CD)clipboard_track_cut.cpp $(CPPOPT)

$(T)lines.o:  $(BUILD_DEPENDENCIES) $(CD)lines.cpp
	$(CCC2) $(CD)lines.cpp $(CPPOPT)

$(T)notes_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)notes_legalize.cpp
	$(CCC2) $(CD)notes_legalize.cpp $(CPPOPT)

$(T)temponodes_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)temponodes_legalize.c
	$(CC2) $(CD)temponodes_legalize.c $(OPT)

$(T)fxlines_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)fxlines_legalize.cpp
	$(CCC2) $(CD)fxlines_legalize.cpp $(CPPOPT)

$(T)reallines_insert.o:  $(BUILD_DEPENDENCIES) $(CD)reallines_insert.cpp
	$(CCC2) $(CD)reallines_insert.cpp $(CPPOPT)

$(T)block_properties.o:  $(BUILD_DEPENDENCIES) $(CD)block_properties.cpp common/AtomicPointerStorage.hpp
	$(CCC2) $(CD)block_properties.cpp $(CPPOPT)

$(T)clipboard_tempos_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_tempos_copy.c
	$(CC2) $(CD)clipboard_tempos_copy.c $(OPT)

$(T)font.o:  $(BUILD_DEPENDENCIES) $(CD)font.c
	$(CC2) $(CD)font.c $(OPT)

$(T)clipboard_localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_localzooms.c
	$(CC2) $(CD)clipboard_localzooms.c $(OPT)

$(T)clipboard_block_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_block_copy.c
	$(CC2) $(CD)clipboard_block_copy.c $(OPT)

$(T)clipboard_block_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_block_paste.c
	$(CC2) $(CD)clipboard_block_paste.c $(OPT)

$(T)undo.o:  $(BUILD_DEPENDENCIES) $(CD)undo.cpp $(CD)undo.h
	$(CCC2) $(CD)undo.cpp $(CPPOPT) -DMAX_NUM_UNDOS=$(MAX_NUM_UNDOS)

$(T)undo_notes.o:  $(BUILD_DEPENDENCIES) $(CD)undo_notes.cpp $(CD)undo.h
	$(CCC2) $(CD)undo_notes.cpp $(CPPOPT)

$(T)undo_fxs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_fxs.c $(CD)undo.h
	$(CC2) $(CD)undo_fxs.c $(OPT)

$(T)undo_temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)undo_temponodes.c $(CD)undo.h
	$(CC2) $(CD)undo_temponodes.c $(OPT)

$(T)undo_tempos.o:  $(BUILD_DEPENDENCIES) $(CD)undo_tempos.c $(CD)undo.h
	$(CC2) $(CD)undo_tempos.c $(OPT)

$(T)undo_swings.o:  $(BUILD_DEPENDENCIES) $(CD)undo_swings.c $(CD)undo.h
	$(CC2) $(CD)undo_swings.c $(OPT)

$(T)undo_lpbs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_lpbs.c $(CD)undo.h
	$(CC2) $(CD)undo_lpbs.c $(OPT)

$(T)undo_signatures.o:  $(BUILD_DEPENDENCIES) $(CD)undo_signatures.c $(CD)undo.h
	$(CC2) $(CD)undo_signatures.c $(OPT)

$(T)undo_notesandfxs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_notesandfxs.cpp $(CD)undo.h
	$(CCC2) $(CD)undo_notesandfxs.cpp $(CPPOPT)

$(T)undo_reallines.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reallines.c $(CD)undo.h
	$(CC2) $(CD)undo_reallines.c $(OPT)

$(T)undo_tracks.o:  $(BUILD_DEPENDENCIES) $(CD)undo_tracks.c $(CD)undo.h
	$(CC2) $(CD)undo_tracks.c $(OPT)

$(T)undo_range.o:  $(BUILD_DEPENDENCIES) $(CD)undo_range.c
	$(CC2) $(CD)undo_range.c $(OPT)

$(T)undo_blocks.o:  $(BUILD_DEPENDENCIES) $(CD)undo_blocks.c
	$(CC2) $(CD)undo_blocks.c $(OPT)

$(T)PEQ_calc_64bit.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_calc_64bit.c
	$(CC2) $(CD)PEQ_calc_64bit.c $(OPT)

$(T)track_insert.o:  $(BUILD_DEPENDENCIES) $(CD)track_insert.cpp
	$(CCC2) $(CD)track_insert.cpp $(CPPOPT)

$(T)quantitize.o:  $(BUILD_DEPENDENCIES) $(CD)quantitize.cpp
	$(CCC2) $(CD)quantitize.cpp $(QTOPT)

$(T)undo_trackheader.o:  $(BUILD_DEPENDENCIES) $(CD)undo_trackheader.c
	$(CC2) $(CD)undo_trackheader.c $(OPT)

$(T)undo_reltempomax.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reltempomax.c
	$(CC2) $(CD)undo_reltempomax.c $(OPT)

$(T)undo_maintempos.o:  $(BUILD_DEPENDENCIES) $(CD)undo_maintempos.c
	$(CC2) $(CD)undo_maintempos.c $(OPT)

$(T)undo_sequencer.o:  $(BUILD_DEPENDENCIES) $(CD)undo_sequencer.c
	$(CC2) $(CD)undo_sequencer.c $(OPT)

$(T)undo_song_tempo_automation.o:  $(BUILD_DEPENDENCIES) $(CD)undo_song_tempo_automation.c
	$(CC2) $(CD)undo_song_tempo_automation.c $(OPT)

$(T)undo_patchvoice.o:  $(BUILD_DEPENDENCIES) $(CD)undo_patchvoice.c
	$(CC2) $(CD)undo_patchvoice.c $(OPT)

$(T)undo_patchname.o:  $(BUILD_DEPENDENCIES) $(CD)undo_patchname.c mixergui/QM_chip.h
	$(CC2) $(CD)undo_patchname.c $(OPT)

$(T)undo_instrument_color.o:  $(BUILD_DEPENDENCIES) $(CD)undo_instrument_color.c
	$(CC2) $(CD)undo_instrument_color.c $(OPT)

$(T)window_config.o:  $(BUILD_DEPENDENCIES) $(CD)window_config.cpp
	$(CCC2) $(CD)window_config.cpp $(CPPOPT)

$(T)PEQ_clock.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_clock.c $(CD)playerclass.h
	$(CC2) $(CD)PEQ_clock.c $(OPT)

$(T)PEQ_LPB.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_LPB.c $(CD)playerclass.h
	$(CC2) $(CD)PEQ_LPB.c $(OPT)

$(T)PEQ_Signature.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_Signature.c $(CD)playerclass.h
	$(CC2) $(CD)PEQ_Signature.c $(OPT)

$(T)PEQ_Beats.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_Beats.c $(CD)playerclass.h
	$(CC2) $(CD)PEQ_Beats.c $(OPT)

$(T)block_insert.o:  $(BUILD_DEPENDENCIES) $(CD)block_insert.c
	$(CC2) $(CD)block_insert.c $(OPT)

$(T)block_delete.o:  $(BUILD_DEPENDENCIES) $(CD)block_delete.c
	$(CC2) $(CD)block_delete.c $(OPT)

$(T)undo_block_insertdelete.o:  $(BUILD_DEPENDENCIES) $(CD)undo_block_insertdelete.c
	$(CC2) $(CD)undo_block_insertdelete.c $(OPT)

$(T)track_onoff.o:  $(BUILD_DEPENDENCIES) $(CD)track_onoff.c
	$(CC2) $(CD)track_onoff.c $(OPT)

#$(T)backwards.o:  $(BUILD_DEPENDENCIES) $(CD)new/backwards.c
#	$(CC2) $(CD)new/backwards.c $(OPT)

$(T)invert.o:  $(BUILD_DEPENDENCIES) $(CD)new/invert.c
	$(CC2) $(CD)new/invert.c $(OPT)

$(T)gfx_slider.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_slider.c
	$(CC2) $(CD)gfx_slider.c $(OPT)

$(T)undo_reltemposlider.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reltemposlider.c
	$(CC2) $(CD)undo_reltemposlider.c $(OPT)

$(T)error.o:  $(BUILD_DEPENDENCIES) $(CD)error.c
	$(CC2) $(CD)error.c $(OPT) -Wno-null-dereference

$(T)threading.o:  $(BUILD_DEPENDENCIES)  $(CD)threading.cpp common/threading.h
	$(CCC2)  $(CD)threading.cpp $(JACKOPT) $(QTOPT) $(BOOST_INCLUDE) # $(O0)

$(T)Semaphores.o: $(BUILD_DEPENDENCIES) $(CD)/Semaphores.cpp $(CD)/sema.h common/Semaphores.hpp common/OS_Semaphores.h
	$(CCC2) $(CD)Semaphores.cpp $(QTOPT)

$(T)stacktoucher.o: $(CD)stacktoucher.c
	$(CC2) $(O0) $(CD)stacktoucher.c -c $(O0) -std=c99 -g -Wall $(WERROR)


$(T)X11_Main.o:  $(BUILD_DEPENDENCIES) $(P)X11_Main.c 
	$(CC2) $(P)X11_Main.c $(OPT)

$(T)X11_visual.o:  $(BUILD_DEPENDENCIES) $(P)X11_visual.c 
	$(CC2) $(P)X11_visual.c $(OPT) 

$(T)X11_error.o:  $(BUILD_DEPENDENCIES) X11/X11_error.c 
	$(CC2) X11/X11_error.c $(OPT)

$(T)W_Error.o:  $(BUILD_DEPENDENCIES) windows/W_Error.c 
	$(CC2) windows/W_Error.c $(OPT)

$(T)W_Keyboard.o:  $(BUILD_DEPENDENCIES) windows/W_Keyboard.c 
	$(CC2) windows/W_Keyboard.c $(OPT)

$(T)cocoa_Keyboard.o:  $(BUILD_DEPENDENCIES) macosx/cocoa_Keyboard.mm
	$(CLANGPLUSPLUS2) macosx/cocoa_Keyboard.mm $(CPPOPT) $(OBJCPP_OPT)

$(T)machthreads.o:  $(BUILD_DEPENDENCIES) macosx/machthreads.mm
	$(CLANGPLUSPLUS2) macosx/machthreads.mm $(OBJC_OPT)

$(T)X11_Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) X11/X11_Ptask2Mtask.c 
	$(CC2) X11/X11_Ptask2Mtask.c $(OPT)

$(T)X11_Bs_edit.o:  $(BUILD_DEPENDENCIES) X11/X11_Bs_edit.c
	$(CC2) X11/X11_Bs_edit.c $(OPT)

$(T)X11_endprogram.o:  $(BUILD_DEPENDENCIES) $(P)X11_endprogram.c 
	$(CC2) $(P)X11_endprogram.c $(OPT)

$(T)X11_disk.o:  $(BUILD_DEPENDENCIES) X11/X11_disk.c 
	$(CC2) X11/X11_disk.c $(OPT)

$(T)posix_Player.o:  $(BUILD_DEPENDENCIES) posix/posix_Player.c 
	$(CC2) posix/posix_Player.c $(OPT)

$(T)X11_ReqType.o:  $(BUILD_DEPENDENCIES) X11/X11_ReqType.c 
	$(CC2) X11/X11_ReqType.c $(OPT)

$(T)X11_instrument.o:  $(BUILD_DEPENDENCIES) X11/X11_instrument.c
	$(CC2) X11/X11_instrument.c $(OPT)

$(T)X11_keyboard.o:  $(BUILD_DEPENDENCIES) X11/X11_keyboard.cpp
	$(CCC2) X11/X11_keyboard.cpp $(QTOPT)

bin/radium_check_recent_libxcb: X11/check_recent_libxcb.c
	$(CC) -Wall $(WERROR) X11/check_recent_libxcb.c -ldl -o bin/radium_check_recent_libxcb

#X11_MidiProperties.o:  $(BUILD_DEPENDENCIES) X11/X11_MidiProperties.c
#	$(CC2) X11/X11_MidiProperties.c $(OPT) 

#X11_ClientMessages.o:  $(BUILD_DEPENDENCIES) X11/X11_ClientMessages.c
#	$(CC2) X11/X11_ClientMessages.c $(OPT)

$(P)EditorWidget.h: $(BUILD_DEPENDENCIES)

$(T)Qt_Main.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Main.cpp $(P)EditorWidget.h $(P)Qt_instruments_proc.h $(QM)QM_MixerWidget.h Qt/helpers.h audio/SampleRecorder_proc.h common/nag.h Qt/KeyboardFocusFrame.hpp common/Process.hpp Qt/Timer.hpp
	$(MOC) Qt/Qt_Main.cpp > Qt/mQt_Main.cpp
	cd Qt && $(MOC) -DFOR_LINUX Timer.hpp > mTimer.hpp
	$(CCC2) $(P)Qt_Main.cpp $(QTOPT) $(SNDFILEOPT) $(BOOST_INCLUDE) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\" -Wno-null-dereference # -Wno-deprecated-declarations -Wno-shadow 

$(T)Qt_SaveRestoreWindows.o:  $(BUILD_DEPENDENCIES) Qt/Qt_SaveRestoreWindows.cpp
	$(CCC2) $(P)Qt_SaveRestoreWindows.cpp $(QTOPT)

$(T)KeyboardFocus.o:  $(BUILD_DEPENDENCIES) Qt/KeyboardFocus.cpp Qt/KeyboardFocusFrame.hpp
	$(CCC2) $(P)KeyboardFocus.cpp $(QTOPT)

$(T)Qt_visual.o:  $(BUILD_DEPENDENCIES) $(P)Qt_visual.cpp $(P)EditorWidget.h
	$(CCC2) $(P)Qt_visual.cpp $(QTOPT)

$(T)GTK_visual.o:  $(BUILD_DEPENDENCIES) GTK/GTK_visual.c
	$(CC2) GTK/GTK_visual.c $(OPT) $(GTK_CFLAGS)

$(T)GTK_ReqType.o:  $(BUILD_DEPENDENCIES) GTK/GTK_ReqType.c 
	$(CC2) GTK/GTK_ReqType.c $(OPT) $(GTK_CFLAGS)

$(T)GTK_PopupMenu.o:  $(BUILD_DEPENDENCIES) GTK/GTK_PopupMenu.c
	$(CC2) GTK/GTK_PopupMenu.c $(OPT) $(GTK_CFLAGS)


$(T)Qt_Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Ptask2Mtask.cpp $(P)EditorWidget.h
	$(CC2) $(P)Qt_Ptask2Mtask.cpp $(OPT)

$(T)Qt_endprogram.o:  $(BUILD_DEPENDENCIES) $(P)Qt_endprogram.c $(P)EditorWidget.h
	$(CC2) $(P)Qt_endprogram.c $(OPT)

$(T)Qt_Player.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Player.c $(P)EditorWidget.h
	$(CC2) $(P)Qt_Player.c $(OPT)

$(T)Qt_EventReceiver.o:  $(BUILD_DEPENDENCIES) $(P)Qt_EventReceiver.cpp $(P)EditorWidget.h
	$(CCC2) $(P)Qt_EventReceiver.cpp $(QTOPT)

$(T)Qt_colors.o:  $(BUILD_DEPENDENCIES) $(P)Qt_colors.cpp $(P)mQt_colors.cpp common/visual_proc.h  embedded_scheme/s7extra_proc.h
	$(CCC2) $(P)Qt_colors.cpp $(QTOPT) -I$(FAUSTDIR)/architecture -Wno-overloaded-virtual -Wno-unused-function $(WNO_DEPRECATED_DECLARATIONS)

$(P)mQt_colors.cpp: $(P)Qt_colors.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_colors.cpp >$(P)mQt_colors.cpp

$(T)Qt_Menues.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Menues.cpp $(P)mQt_Menues.cpp
	$(CCC2) $(P)Qt_Menues.cpp $(QTOPT)  -Wno-shadow

$(P)mQt_Menues.cpp: $(P)Qt_Menues.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_Menues.cpp >$(P)mQt_Menues.cpp

$(T)Qt_Fonts.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Fonts.cpp OpenGL/GfxElements.h
	$(CCC2) $(P)Qt_Fonts.cpp $(QTOPT)

$(T)Qt_ReqType.o:  $(BUILD_DEPENDENCIES) $(P)Qt_ReqType.cpp
	$(CCC2) $(P)Qt_ReqType.cpp $(QTOPT) -Wno-null-dereference

$(T)Qt_PopupMenu.o:  $(BUILD_DEPENDENCIES) $(P)Qt_PopupMenu.cpp $(P)mQt_PopupMenu.cpp audio/Envelope.hpp embedded_scheme/s7extra_proc.h Qt/Timer.hpp
	$(CCC2) $(P)Qt_PopupMenu.cpp $(QTOPT) -Wno-null-dereference

$(P)mQt_PopupMenu.cpp: $(P)Qt_PopupMenu.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_PopupMenu.cpp -DUSE_QT_MENU >$(P)mQt_PopupMenu.cpp

$(T)Qt_MainWindow.o:  $(BUILD_DEPENDENCIES) $(P)Qt_MainWindow.cpp $(P)mQt_bottom_bar_widget_callbacks.h $(P)mQt_upperleft_widget_callbacks.h $(P)Rational.h $(P)lzqlineedit.h $(P)helpers.h audio/CpuUsage.hpp Qt/EditorWidget.h  Qt/FileRequester.hpp Qt/Qt_MyQCheckBox.h Qt/Qt_MyQLabel.h
	$(CCC2) $(P)Qt_MainWindow.cpp $(QTOPT)

$(T)Qt_Time.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Time.cpp
	$(CCC2) $(P)Qt_Time.cpp $(QTOPT)

$(T)Qt_sequencer.o:  $(BUILD_DEPENDENCIES) $(P)Qt_sequencer.cpp Qt/helpers.h audio/Envelope.hpp audio/Peaks.hpp common/seqblock_automation_proc.h Qt/KeyboardFocusFrame.hpp Qt/Qt_MyQCheckBox.h
	$(CCC2) $(P)Qt_sequencer.cpp $(QTOPT) $(SNDFILEOPT) $(WNO_DUPLICATED_BRANCHES) $(BOOST_INCLUDE) 

#QD = /home/kjetil/site/src/qt-x11-free-3.3.8b/src/dialogs/
QD = $(P)

$(T)Qt_Bs_edit.o: $(BUILD_DEPENDENCIES) $(P)Qt_Bs_edit.cpp  Qt/Qt_MyQScrollBar.hpp
	$(CCC2) $(P)Qt_Bs_edit.cpp $(QTOPT) -Wno-null-dereference #-fno-sanitize=undefined


INSTRUMENTS_DEPENDENCIES = $(P)mQt_instruments_widget_callbacks.h $(P)mQt_midi_instrument_widget_callbacks.h $(P)mQt_audio_instrument_widget_callbacks.h $(P)mQt_sample_requester_widget_callbacks.h $(P)mQt_control_change_widget_callbacks.h $(P)mQt_plugin_widget_callbacks.h $(P)Qt_auto_suspend_menu.h $(P)Qt_pd_plugin_widget.h $(P)Qt_jack_plugin_widget.h $(P)Qt_sendreceive_plugins_widget.h $(P)Qt_faust_plugin_widget.h $(P)Qt_pd_controller_widget.h $(P)mQt_compressor_widget_callbacks.h $(P)Qt_MyQSlider.h $(P)Qt_MyQCheckBox.h $(P)Qt_MyQButton.h $(P)create_source_from_ui.sh $(P)undo_instruments_widget.cpp $(P)undo_instruments_widget_proc.h $(P)Qt_PluginWidget.h $(P)MySliderPainterPainter.h $(P)Qt_MyWidget.h $(P)Qt_mix_colors.h $(P)Qt_audio_instrument_widget_callbacks.h $(P)compressor_vertical_sliders.cpp $(P)FocusSniffers.h audio/CpuUsage.hpp Qt/Qt_MyQScrollBar.hpp Qt/Qt_MyQLabel.h common/Vector.hpp Qt/Editor.hpp



# $(P)midi_instrument_widget.ui.h $(P)control_change_widget.ui.h $(P)instruments_widget.ui.h
$(T)Qt_instruments.o: $(BUILD_DEPENDENCIES) $(P)Qt_instruments.cpp $(INSTRUMENTS_DEPENDENCIES)
	@echo
	@echo "Changed (Qt_instruments.o):"
	@echo $?
	@echo
	if [ $(BUILDTYPE) = RELEASE ] ; then \
		$(CCC2) $(P)Qt_instruments.cpp $(QTOPT) $(SNDFILEOPT) -Wno-null-dereference  $(NO_ANALYZER) ; \
	else \
		$(CCC2) $(P)Qt_instruments.cpp $(QTOPT) $(SNDFILEOPT) $(O0) -Wno-null-dereference $(NO_ANALYZER) ; \
	fi
	 # ^ It takes forever to compile this file with -Og

#	$(CLANGPLUSPLUS) $(P)Qt_instruments.cpp $(QTOPT)
# clang++ $(P)Qt_instruments.cpp $(QTOPT)


$(T)Qt_PresetBrowser.o: $(BUILD_DEPENDENCIES) $(P)Qt_PresetBrowser.cpp $(INSTRUMENTS_DEPENDENCIES)
	$(MOC) $(P)/Qt_PresetBrowser.cpp >$(P)/mQt_PresetBrowser.cpp
	@echo
	@echo "Changed (Qt_PresetBrowser.o):"
	@echo $?
	@echo
	if [ $(BUILDTYPE) = RELEASE ] ; then \
		$(CCC2) $(P)Qt_PresetBrowser.cpp $(QTOPT) $(SNDFILEOPT) -Wno-null-dereference  $(NO_ANALYZER) ; \
	else \
		$(CCC2) $(P)Qt_PresetBrowser.cpp $(QTOPT) $(SNDFILEOPT) $(O0) -Wno-null-dereference $(NO_ANALYZER) ; \
	fi

$(P)mQt_instruments_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_instruments_widget.ui $(P)create_source_from_ui.sh $(P)Qt_instruments_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) instruments_widget

$(P)mQt_midi_instrument_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_midi_instrument_widget.ui $(P)create_source_from_ui.sh $(P)Qt_midi_instrument_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) midi_instrument_widget

$(P)mQt_audio_instrument_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_audio_instrument_widget.ui $(P)create_source_from_ui.sh $(P)Qt_audio_instrument_widget_callbacks.h $(P)mQt_plugin_widget_callbacks.h $(P)mQt_patch_widget_callbacks.h audio/CpuUsage.hpp
	@echo
	@echo "Changed (mQt_audio_instrument_widget_callbacks.h):"
	@echo $?
	@echo
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) audio_instrument_widget

$(P)mQt_patch_widget_callbacks.h:  $(BUILD_DEPENDENCIES) $(P)qt4_patch_widget.ui $(P)create_source_from_ui.sh $(P)Qt_patch_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) patch_widget

$(P)mQt_sample_requester_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_sample_requester_widget.ui $(P)create_source_from_ui.sh $(P)Qt_sample_requester_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) sample_requester_widget

$(P)mQt_control_change_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_control_change_widget.ui $(P)create_source_from_ui.sh $(P)Qt_control_change_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) control_change_widget

$(P)mQt_plugin_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_plugin_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) plugin_widget

$(P)Qt_auto_suspend_menu.h:  $(BUILD_DEPENDENCIES) $(P)qt4_auto_suspend_menu.ui $(P)create_source_from_ui.sh  $(P)Qt_auto_suspend_menu_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) auto_suspend_menu

$(P)Qt_pd_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_pd_plugin_widget_callbacks.h $(P)Qt_pd_controller_widget.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_plugin_widget

$(P)Qt_faust_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_faust_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_faust_plugin_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) faust_plugin_widget

$(P)Qt_jack_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_jack_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_jack_plugin_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) jack_plugin_widget

$(P)Qt_sendreceive_plugins_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_sendreceive_plugins_widget.ui $(P)create_source_from_ui.sh $(P)Qt_sendreceive_plugins_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) sendreceive_plugins_widget

$(P)Qt_pd_controller_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_controller_widget.ui $(P)create_source_from_ui.sh $(P)Qt_pd_controller_widget_callbacks.h $(P)Qt_pd_controller_config_dialog.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_controller_widget

$(P)Qt_pd_controller_config_dialog.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_controller_config_dialog.ui $(P)create_source_from_ui.sh $(P)Qt_pd_controller_config_dialog_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_controller_config_dialog

$(P)mQt_compressor_widget_callbacks.h:  $(BUILD_DEPENDENCIES) $(P)qt4_compressor_widget.ui $(P)create_source_from_ui.sh $(P)Qt_compressor_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) compressor_widget

$(P)mQt_bottom_bar_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_bottom_bar_widget.ui $(P)create_source_from_ui.sh $(P)Qt_bottom_bar_widget_callbacks.h $(P)Qt_MyQButton.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) bottom_bar_widget

$(P)mQt_upperleft_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)qt4_upperleft_widget.ui $(P)create_source_from_ui.sh $(P)Qt_upperleft_widget_callbacks.h $(P)Qt_MyQButton.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) upperleft_widget

#$(P)Qt_seqtrack_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_seqtrack_widget.ui $(P)create_source_from_ui.sh $(P)Qt_seqtrack_widget_callbacks.h $(P)Qt_MyQButton.h
#	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) seqtrack_widget




$(P)Qt_mixer_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_mixer_widget.ui $(P)create_source_from_ui.sh $(P)Qt_mixer_widget_callbacks.h $(P)Qt_mixer_direction_menu.h Qt/helpers.h Qt/Timer.hpp
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) mixer_widget

$(P)Qt_mixer_direction_menu.h: $(BUILD_DEPENDENCIES) $(P)qt4_mixer_direction_menu.ui $(P)create_source_from_ui.sh  $(P)Qt_mixer_direction_menu_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) mixer_direction_menu




$(T)Qt_soundfilesaver_widget_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_soundfilesaver_widget_callbacks.cpp $(P)Qt_soundfilesaver_widget.h $(P)mQt_soundfilesaver_widget_callbacks.cpp mixergui/QM_chip.h
	$(CCC2) $(P)Qt_soundfilesaver_widget_callbacks.cpp $(QTOPT)  $(SNDFILEOPT) $(NO_ANALYZER_MALLOC_LEAK) # Might be leak there, but I don't see where.

$(P)mQt_soundfilesaver_widget_callbacks.cpp: $(P)Qt_soundfilesaver_widget_callbacks.cpp
	cd $(P) && $(MOC) Qt_soundfilesaver_widget_callbacks.cpp >mQt_soundfilesaver_widget_callbacks.cpp

$(P)Qt_soundfilesaver_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_soundfilesaver_widget.ui $(P)Qt_soundfilesaver_widget_callbacks.cpp
	cd $(P) && $(UIC) qt4_soundfilesaver_widget.ui | sed s/protected/public/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/MyQSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/MyQSpinBox\>://\ \ qspingox.h: | sed s/QLineEdit/FocusSnifferQLineEdit/ | sed s:\#include\ \<QtWidgets/FocusSnifferQLineEdit\>://\ \ qlineedit.h: > Qt_soundfilesaver_widget.h
#	cd $(P) && $(UIC) qt4_soundfilesaver_widget.ui | sed s/protected/public/ | sed s/QLineEdit/FocusSnifferQLineEdit/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtWidgets/MyQSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/FocusSnifferQLineEdit\>://\ \ qlineedit.h: > Qt_soundfilesaver_widget.h




# Look at this one for creating Qt dialogs (the other Qt dialogs are hacks since the "create_source_from_uio.sh" script is not called
######################################################################################################################################
$(T)Qt_comment_dialog.o: $(BUILD_DEPENDENCIES) $(P)Qt_comment_dialog_callbacks.h $(P)Qt_comment_dialog.cpp $(P)qt4_comment_dialog.ui Qt/Qt_MyQCheckBox.h Qt/Qt_MyQLabel.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) comment_dialog  DONT_USE_RADIUM_CHECKBOXES
	ln -sf mQt_comment_dialog_callbacks.h $(P)mQt_comment_dialog_callbacks.cpp
	$(CCC2) $(P)Qt_comment_dialog.cpp $(QTOPT) -Wno-null-dereference

$(T)Qt_song_properties.o: $(BUILD_DEPENDENCIES) $(P)Qt_song_properties_callbacks.h $(P)Qt_song_properties.cpp $(P)qt4_song_properties.ui Qt/Qt_MyQCheckBox.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) song_properties DONT_USE_RADIUM_CHECKBOXES
	ln -sf mQt_song_properties_callbacks.h $(P)mQt_song_properties_callbacks.cpp
	$(CCC2) $(P)Qt_song_properties.cpp $(QTOPT) -Wno-null-dereference





$(T)Qt_preferences_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_preferences_callbacks.cpp $(P)Qt_preferences.h common/visual_proc.h Qt/mQt_vst_paths_widget_callbacks.h $(P)Qt_vst_paths_widget.h Qt/helpers.h Qt/Qt_MyQScrollBar.hpp
	if [ $(BUILDTYPE) = RELEASE ] ; then \
		$(CCC2) $(P)Qt_preferences_callbacks.cpp $(QTOPT)  -Wno-null-dereference $(NO_ANALYZER) ; \
	else \
		$(CCC2) $(P)Qt_preferences_callbacks.cpp $(QTOPT) $(O0)  -Wno-null-dereference $(NO_ANALYZER) ; \
	fi
	 # ^ It takes forever to compile this file with -Og


$(P)Qt_preferences.h: $(BUILD_DEPENDENCIES) $(P)qt4_preferences.ui $(P)Qt_preferences_callbacks.cpp $(P)mQt_vst_paths_widget_callbacks.h
	cd $(P) && $(UIC) qt4_preferences.ui | sed s/protected/public/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/MyQSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/MyQSpinBox\>://\ \ qspingox.h: | sed s/QLineEdit/FocusSnifferQLineEdit/ | sed s:\#include\ \<QtWidgets/FocusSnifferQLineEdit\>://\ \ qlineedit.h: > Qt_preferences.h
	cd $(P) && $(MOC) Qt_preferences_callbacks.cpp >mQt_preferences_callbacks.cpp

$(P)mQt_vst_paths_widget_callbacks.h: $(BUILD_DEPENDENCIES) $(P)create_source_from_ui.sh $(P)Qt_vst_paths_widget_callbacks.h $(P)Qt_vst_paths_widget.h
	cd $(P) && $(MOC) Qt_vst_paths_widget_callbacks.h >mQt_vst_paths_widget_callbacks.h

$(P)Qt_vst_paths_widget.h: $(P)qt4_vst_paths_widget.ui
	cd $(P) && $(UIC) qt4_vst_paths_widget.ui | sed s/protected/public/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/MyQSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/MyQSpinBox\>://\ \ qspingox.h: | sed s/QLineEdit/FocusSnifferQLineEdit/ | sed s:\#include\ \<QtWidgets/FocusSnifferQLineEdit\>://\ \ qlineedit.h: > Qt_vst_paths_widget.h


$(T)Qt_tools_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_tools_callbacks.cpp $(P)Qt_tools_callbacks.h $(P)Qt_tools.h Qt/helpers.h midi/midi_i_input_proc.h common/Vector.hpp Qt/ScrollArea.hpp  Qt/Qt_MyQScrollBar.hpp
	$(CCC2) $(P)Qt_tools_callbacks.cpp $(QTOPT) $(WNO_DEPRECATED_DECLARATIONS)

$(P)Qt_tools.h: $(BUILD_DEPENDENCIES) $(P)qt4_tools.ui $(P)Qt_tools_callbacks.h $(P)lzqlineedit.h
	cd $(P) && $(UIC) qt4_tools.ui | sed s/protected/public/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QWidgets/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/MyQSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtWidgets/MyQSpinBox\>://\ \ qspingox.h: | sed s/QLineEdit/FocusSnifferQLineEdit/ | sed s:\#include\ \<QtWidgets/FocusSnifferQLineEdit\>://\ \ qlineedit.h: > Qt_tools.h
	cd $(P) && $(MOC) Qt_tools_callbacks.h >mQt_tools_callbacks.h
#	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) tools

$(T)Qt_PluginWidget.o: $(BUILD_DEPENDENCIES) $(P)Qt_PluginWidget.cpp $(P)Qt_PluginWidget.h $(P)mQt_PluginWidget.cpp $(P)mQt_audio_instrument_widget_callbacks.h $(P)mQt_sample_requester_widget_callbacks.h $(P)mQt_PluginWidget.cpp $(P)Qt_MyQSlider.h common/Vector.hpp Qt/Qt_MyQScrollBar.hpp Qt/Qt_MyQCheckBox.h mixergui/QM_chip.h
	$(CCC2) $(P)Qt_PluginWidget.cpp $(QTOPT) $(NO_ANALYZER_MALLOC_LEAK) # Might be leak there, but I don't see where.

$(P)mQt_PluginWidget.cpp: $(P)Qt_PluginWidget.h
	cd $(P) && $(MOC) Qt_PluginWidget.h >mQt_PluginWidget.cpp

$(T)Qt_SliderPainter.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_SliderPainter.cpp $(P)MySliderPainterPainter.h
	$(CCC2) $(P)Qt_SliderPainter.cpp $(QTOPT)

$(T)Qt_memory.o:  $(BUILD_DEPENDENCIES)  $(P)Qt_memory.cpp
	$(CCC2)  $(P)Qt_memory.cpp $(CPPOPT)

$(T)Qt_path_resolver.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_path_resolver.cpp
	$(CCC2) $(P)Qt_path_resolver.cpp $(QTOPT)

$(T)Qt_settings.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_settings.cpp
	$(CCC2) $(P)Qt_settings.cpp $(QTOPT) $(SNDFILEOPT) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\"

$(T)Qt_disk.o: $(BUILD_DEPENDENCIES) $(P)Qt_disk.cpp
	$(CCC2) $(P)Qt_disk.cpp $(QTOPT)

$(T)Qt_Error.o: $(BUILD_DEPENDENCIES) $(P)Qt_Error.cpp
	@echo
	@echo "Changed (Qt_Error.o):"
	@echo $?
	@echo
	$(CCC2) $(P)Qt_Error.cpp $(QTOPT)  $(WNO_DEPRECATED_COPY_CLANG) #$(O0)

bin/radium_error_message: $(P)Qt_Error.cpp $(P)EditorWidget.h
	@echo
	@echo "Changed (bin/radium_error_message):"
	@echo $?
	@echo
	$(CCC) -Wall $(WERROR) $(P)Qt_Error.cpp $(CPPOPT) $(QT_CFLAGS) $(OS_OPTS) -DCOMPILE_EXECUTABLE $(QT_GUI_CFLAGS) -o errormessagebin.o -Wno-missing-declarations  $(WNO_DEPRECATED_COPY_CLANG) # $(O0)
	$(LINKER) `cat buildtype.opt` errormessagebin.o -o bin/radium_error_message $(QT_GUI_LDFLAGS)
	rm errormessagebin.o

bin/radium_progress_window: $(P)Qt_progresswindow.cpp
	$(CCC) -Wall $(WERROR) $(P)Qt_progresswindow.cpp $(CPPOPT) $(QT_CFLAGS) $(OS_OPTS) -DP_CLIENT $(QT_GUI_CFLAGS) -o radium_progress_window.o
	$(LINKER) `cat buildtype.opt` radium_progress_window.o -o bin/radium_progress_window $(QT_GUI_LDFLAGS)  
	rm radium_progress_window.o

bin/radium_check_jack_status: audio/KillJackd.cpp $(T)Jack_plugin.o $(T)find_jack_library.o # Jack_plugin.o depends on all the weakjack things
	$(CCC) -Wall $(WERROR) audio/KillJackd.cpp $(CPPOPT) $(QT_CFLAGS) $(JACKOPT) $(OS_OPTS) $(STD_CPP) -DCOMPILE_EXECUTABLE -Wno-error=deprecated-declarations -o $(T)radium_check_jack_status.o -Wno-missing-declarations
	$(LINKER) `cat buildtype.opt` $(T)radium_check_jack_status.o $(T)find_jack_library.o $(JACK_LDFLAGS) `$(PKGqt) --libs Qt5Core` $(QT_SYSTEM_CFLAGS) $(OS_LDFLAGS2) -o bin/radium_check_jack_status $(FPIC)
	rm $(T)radium_check_jack_status.o

bin/radium_check_opengl: OpenGL/CheckOpenGL.cpp common/Process.hpp
	$(CCC) -Wall $(WERROR) OpenGL/CheckOpenGL.cpp $(CPPOPT) $(QT_CFLAGS) $(OS_OPTS) $(STD_CPP) -DCOMPILE_EXECUTABLE -o radium_check_opengl.o $(WNO_DEPRECATED_DECLARATIONS)
	$(LINKER) `cat buildtype.opt` radium_check_opengl.o -o bin/radium_check_opengl $(QT_GUI_LDFLAGS) `$(PKGqt) --libs Qt5OpenGL`
	rm radium_check_opengl.o

$(T)Qt_progresswindow.o: $(BUILD_DEPENDENCIES) $(P)Qt_progresswindow.cpp
	$(CCC2) $(P)Qt_progresswindow.cpp $(QTOPT) -DP_SERVER

$(T)KillJackd.o:$(BUILD_DEPENDENCIES) audio/KillJackd.cpp weakjack/weak_libjack.c common/Process.hpp
	$(CCC2) audio/KillJackd.cpp $(QTOPT) -Wno-missing-declarations

$(T)Rational.o: $(BUILD_DEPENDENCIES) $(P)Rational.cpp
	$(CCC2) $(P)Rational.cpp $(QTOPT)

$(T)Qt_check_for_updates.o: $(BUILD_DEPENDENCIES) $(P)Qt_check_for_updates.cpp
	$(MOC) $(P)/Qt_check_for_updates.cpp >$(P)/mQt_check_for_updates.cpp
	$(CCC2) $(P)Qt_check_for_updates.cpp $(QTOPT) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\"

$(T)Qt_AutoBackups.o: $(BUILD_DEPENDENCIES) $(P)Qt_AutoBackups.cpp audio/SampleRecorder_proc.h
	$(CCC2) $(P)Qt_AutoBackups.cpp $(QTOPT)

$(T)flowlayout.o: $(BUILD_DEPENDENCIES) $(P)flowlayout.cpp $(P)flowlayout.h
	$(CCC2) $(P)flowlayout.cpp $(QTOPT)

$(T)posix_settings.o:  $(BUILD_DEPENDENCIES) posix/posix_settings.c
	$(CC2) posix/posix_settings.c $(OPT)

$(T)settings.o:  $(BUILD_DEPENDENCIES) $(CD)settings.cpp
	$(CCC2) $(CD)settings.cpp $(QTOPT)

$(T)mmd2load.o:  $(BUILD_DEPENDENCIES) mmd2loader/mmd2load.cpp
	$(CCC2) mmd2loader/mmd2load.cpp $(CPPOPT)

$(T)scroll.o:  $(BUILD_DEPENDENCIES) $(CD)scroll.c
	$(CC2) $(CD)scroll.c $(OPT)


$(T)pixmap.o:  $(BUILD_DEPENDENCIES)  $(CD)pixmap.c
	$(CC2)  $(CD)pixmap.c $(OPT)

$(T)X11_memory.o:  $(BUILD_DEPENDENCIES)  $(P)X11_memory.c 
	$(CC2)  $(P)X11_memory.c $(OPT)

$(T)gfx_shrink.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_shrink.c
	$(CC2)  $(CD)gfx_shrink.c $(OPT)

$(T)gfx_shrink_t.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_shrink_t.c
	$(CC2)  $(CD)gfx_shrink_t.c $(OPT)

$(T)scroll_play.o:  $(BUILD_DEPENDENCIES)  $(CD)scroll_play.c
	$(CC2)  $(CD)scroll_play.c $(OPT)

$(T)block_split.o:  $(BUILD_DEPENDENCIES)  $(CD)block_split.c
	$(CC2)  $(CD)block_split.c $(OPT)

$(T)undo_block_mergesplit.o:  $(BUILD_DEPENDENCIES)  $(CD)undo_block_mergesplit.c
	$(CC2)  $(CD)undo_block_mergesplit.c $(OPT)

$(T)glissando.o:  $(BUILD_DEPENDENCIES)  $(CD)new/glissando.c
	$(CC2)  $(CD)new/glissando.c $(OPT)

$(T)pitchexpand.o:  $(BUILD_DEPENDENCIES)  $(CD)new/pitchexpand.cpp
	$(CCC2)  $(CD)new/pitchexpand.cpp $(CPPOPT)

$(T)expand.o:  $(BUILD_DEPENDENCIES)  $(CD)expand.cpp
	$(CCC2)  $(CD)expand.cpp $(CPPOPT)

$(T)api_common.o:  $(BUILD_DEPENDENCIES)  $(API)api_common.cpp
	@echo "Changed (api_common.o):"
	@echo $?
	$(CCC2)  $(API)api_common.cpp $(QTOPT)

$(T)api_keyplay.o:  $(BUILD_DEPENDENCIES)  $(API)api_keyplay.c
	$(CC2)  $(API)api_keyplay.c $(OPT)

$(T)api_keyplayedit.o:  $(BUILD_DEPENDENCIES)  $(API)api_keyplayedit.c 
	$(CC2)  $(API)api_keyplayedit.c $(OPT)

$(T)api_navigate.o:  $(BUILD_DEPENDENCIES)  $(API)api_navigate.cpp
	$(CCC2)  $(API)api_navigate.cpp $(CPPOPT)

$(T)api_disk.o:  $(BUILD_DEPENDENCIES)  $(API)api_disk.cpp 
	$(CCC2)  $(API)api_disk.cpp $(SNDFILEOPT) $(QTOPT)

$(T)api_noteedit.o:  $(BUILD_DEPENDENCIES)  $(API)api_noteedit.cpp common/TimeData.hpp
	$(CCC2)  $(API)api_noteedit.cpp $(QTOPT)

$(T)api_velocities.o:  $(BUILD_DEPENDENCIES)  $(API)api_velocities.cpp
	$(CCC2)  $(API)api_velocities.cpp $(CPPOPT)

$(T)api_pitches.o:  $(BUILD_DEPENDENCIES)  $(API)api_pitches.cpp 
	$(CCC2)  $(API)api_pitches.cpp $(CPPOPT)

$(T)api_timing.o:  $(BUILD_DEPENDENCIES)  $(API)api_timing.cpp
	$(CCC2)  $(API)api_timing.cpp $(QTOPT)

$(T)api_trackonoff.o:  $(BUILD_DEPENDENCIES)  $(API)api_trackonoff.c 
	$(CC2)  $(API)api_trackonoff.c $(OPT)

$(T)api_zoom.o:  $(BUILD_DEPENDENCIES)  $(API)api_zoom.cpp Qt/KeyboardFocusFrame.hpp 
	$(CCC2)  $(API)api_zoom.cpp $(QTOPT)

$(T)api_notemanipulate.o:  $(BUILD_DEPENDENCIES)  $(API)api_notemanipulate.cpp
	$(CCC2)  $(API)api_notemanipulate.cpp $(QTOPT)

$(T)api_play.o:  $(BUILD_DEPENDENCIES)  $(API)api_play.cpp
	$(CCC2)  $(API)api_play.cpp $(QTOPT)

$(T)api_clipboard.o:  $(BUILD_DEPENDENCIES)  $(API)api_clipboard.cpp
	$(CCC2)  $(API)api_clipboard.cpp $(CPPOPT)

$(T)api_undo.o:  $(BUILD_DEPENDENCIES)  $(API)api_undo.cpp  embedded_scheme/s7extra_proc.h
	$(CCC2)  $(API)api_undo.cpp $(QTOPT)

$(T)api_various.o:  $(BUILD_DEPENDENCIES)  $(API)api_various.cpp bin/packages/s7/s7.c $(P)EditorWidget.h embedded_scheme/s7extra_proc.h Qt/KeyboardFocusFrame.hpp audio/CpuUsage.hpp
	$(CCC2)  $(API)api_various.cpp $(QTOPT) -I$(FAUSTDIR)/architecture -DRADIUM_VERSION=\"$(RADIUM_VERSION)\"  -Wno-null-dereference $(WNO_EXTERN_C_COMPAT) $(NO_ANALYZER)

$(T)api_instruments.o:  $(BUILD_DEPENDENCIES)  $(API)api_instruments.cpp  $(API)api_instruments_proc.h embedded_scheme/s7extra_proc.h mixergui/QM_chip.h mixergui/QM_MixerWidget.h
	$(CCC2)  $(API)api_instruments.cpp $(QTOPT)

$(T)api_soundpluginregistry.o:  $(BUILD_DEPENDENCIES) $(API)api_soundpluginregistry.cpp  $(API)api_instruments_proc.h
#	$(MOC) $(API)api_gui.cpp > $(API)mapi_gui.cpp
	$(CCC2)  $(API)api_soundpluginregistry.cpp $(QTOPT)



OpenGL/GfxElements.h: $(P)EditorWidget.h
Qt/Qt_MyQCheckBox.h: $(P)EditorWidget.h
Qt/Qt_MyQSlider.h: $(P)EditorWidget.h
common/windows_proc.h: $(P)EditorWidget.h

$(P)EditorWidget.h: Qt/KeyboardFocusFrame.hpp



$(T)api_requesters.o:  $(BUILD_DEPENDENCIES)  $(API)api_requesters.cpp 
	$(CCC2)  $(API)api_requesters.cpp $(QTOPT)

$(T)api_mouse.o:  $(BUILD_DEPENDENCIES)  $(API)api_mouse.cpp common/Beats_proc.h
	$(CCC2)  $(API)api_mouse.cpp $(QTOPT)

$(T)api_sequencer.o:  $(BUILD_DEPENDENCIES)  $(API)api_sequencer.cpp $(API)api_sequencer_proc.h  audio/Envelope.hpp common/seqblock_automation_proc.h embedded_scheme/s7extra_proc.h
	$(CCC2) $(JACKOPT) $(API)api_sequencer.cpp $(QTOPT)

$(T)api_osc.o:  $(BUILD_DEPENDENCIES)  $(API)api_osc.cpp embedded_scheme/s7extra_proc.h
	$(CCC2) $(LIBLOOPT) $(API)api_osc.cpp $(QTOPT) -fno-sanitize=undefined # $(O0) # Adding -fno-sanitize=undefined since liblo sends misaligned data to calbacks.

$(T)api_midi.o:  $(BUILD_DEPENDENCIES)  $(API)api_midi.cpp
	$(CCC2) $(API)api_midi.cpp $(QTOPT) $(BOOST_INCLUDE)

$(T)api_gui.o:  $(BUILD_DEPENDENCIES)  $(API)api_gui.cpp  Qt/ScrollArea.hpp Qt/helpers.h Qt/lzqlineedit.h  Qt/Rational.h Qt/Qt_MyQCheckBox.h embedded_scheme/s7extra_proc.h Qt/Qt_MyQScrollBar.hpp Qt/FileRequester.hpp Qt/Timer.hpp Qt/HashVector.hpp Qt/Qt_MyQCheckBox.h Qt/FocusSniffers.h Qt/Editor.hpp
	$(MOC) $(USE_QWEBENGINE_CFLAGS) $(API)api_gui.cpp > $(API)mapi_gui.cpp
	$(CCC2)  $(API)api_gui.cpp $(QTOPT) $(QT_UI_CFLAGS) $(QT_SVG_CFLAGS) $(FPIC) -Wno-null-dereference $(NO_ANALYZER) $(WNO_DEPRECATED_DECLARATIONS)


NOUNUSEDBUTSETVARIABLEWARNING=
ifeq (,$(findstring clang,$(CC)))
	NOUNUSEDBUTSETVARIABLEWARNING += -Wno-unused-but-set-variable -Wno-cast-function-type
endif

$(T)radium_wrap.o:  $(BUILD_DEPENDENCIES)  $(API)radium_wrap.c 
	$(CC2) $(API)radium_wrap.c $(OPT) -Wno-unused-function $(NOUNUSEDBUTSETVARIABLEWARNING) -Wno-missing-field-initializers -Wno-write-strings -Wno-cast-function-type-mismatch

$(API)radium_wrap.c: $(BUILD_DEPENDENCIES) $(API)protos.conf bin/protoconfparser.py $(API)/radium_wrap/radium_wrap_1.c $(API)/radium_wrap/radium_wrap_3.c $(API)makeradiumwrap_c.sh $(API)makeradiumwrap_c.sh
	cd $(API) ; bash makeradiumwrap_c.sh $(PYTHONEXE) ; cd ..

# # The following two lines can be uses instead of the two previous.
# # But I haven't found out how to make swig generate the "PyArg_ParseTupleAndKeywords"
# # function (if possible), and I haven't bothered porting swig to amigaos.
# # And protoconfparser.py does a perfectly fine job anyway.
#$(API)radium_wrap.c: $(API)radium.i
#	swig -python $(API)radium.i

$(T)api_support.o:  $(BUILD_DEPENDENCIES)  $(API)api_support.c
	$(CC2)  $(API)api_support.c $(OPT)

$(T)wrapfunclist.o:  $(BUILD_DEPENDENCIES) $(API)wrapfunclist.c
	$(CC2) $(API)wrapfunclist.c $(OPT) -Wno-write-strings

$(API)wrapfunclist.c: $(BUILD_DEPENDENCIES) $(API)protos.conf bin/protoconfparser.py
	@echo "$(PYTHONEXE) ../bin/protoconfparser.py wrapfunclist.c"
	cd $(API) ; $(PYTHONEXE) ../bin/protoconfparser.py wrapfunclist.c ; cd ..

$(API)radium.i: $(BUILD_DEPENDENCIES) $(API)protos.conf bin/protoconfparser.py
	@echo "$(PYTHONEXE) ../bin/protoconfparser.py radium.i"
	cd $(API) ; $(PYTHONEXE) ../bin/protoconfparser.py radium.i ; cd ..

$(API)radium_proc.h: $(API)protos.conf bin/protoconfparser.py
	@echo "$(PYTHONEXE) ../bin/protoconfparser.py radium_proc.h"
	cd $(API) ; $(PYTHONEXE) ../bin/protoconfparser.py radium_proc.h ; cd ..

$(T)gfx_request.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_request.c
	$(CC2)  $(CD)gfx_request.c $(OPT)





$(T)midi_playfromstart.o:  $(BUILD_DEPENDENCIES)  midi/midi_playfromstart.c
	$(CC2)  midi/midi_playfromstart.c $(OPT) 
$(T)midi_instrument.o:  $(BUILD_DEPENDENCIES)  midi/midi_instrument.cpp
	$(CCC2)  midi/midi_instrument.cpp $(CPPOPT) 
$(T)midi_i_input.o:  $(BUILD_DEPENDENCIES)  midi/midi_i_input.cpp  midi/midi_i_input_proc.h common/Vector.hpp
	$(CCC2)  midi/midi_i_input.cpp $(QTOPT) $(JACKOPT) $(BOOST_INCLUDE) 
$(T)midi_fx.o:  $(BUILD_DEPENDENCIES)  midi/midi_fx.cpp
	$(CCC2)  midi/midi_fx.cpp $(CPPOPT) 

#disk_midi_mymidilinks.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_mymidilinks.c
#	$(CC2)  midi/disk_midi_mymidilinks.c $(OPT) 
# TODO

$(T)disk_midi_instrument.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_instrument.c $(CD)disk.h
	$(CC2)  midi/disk_midi_instrument.c $(OPT) 
$(T)disk_midi_fx.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_fx.cpp $(CD)disk.h
	$(CCC2)  midi/disk_midi_fx.cpp $(QTOPT) 
#$(T)alsaseq_midi.o:  $(BUILD_DEPENDENCIES)  midi/alsaseq/alsaseq_midi.c
#	$(CC2)  midi/alsaseq/alsaseq_midi.c $(OPT) 
#midi_getEvents.o:  $(BUILD_DEPENDENCIES)  midi/midi_getEvents.c
#	$(CC2)  midi/midi_getEvents.c $(OPT) 
#$(T)midi_menues.o:  $(BUILD_DEPENDENCIES)  midi/midi_menues.c
#	$(CC2)  midi/midi_menues.c $(OPT) 
$(T)midi_ports.o: $(BUILD_DEPENDENCIES) midi/midi_ports.cpp
	$(CCC2) midi/midi_ports.cpp $(QTOPT) 



buildtype.opt: #Makefile
	echo $(TARGET_OS)
	if [ $(BUILDTYPE) = DEBUG ] ; then \
		echo "$(DEBUG_BUILD_OPTS) $(OPTIMIZE)" >buildtype.opt ; \
	elif [ $(BUILDTYPE) = DEBUG_FAST ] ; then \
		echo "$(DEBUG_BUILD_OPTS) $(OPTIMIZE)" >buildtype.opt ; \
	else \
		echo "$(RELEASE_BUILD_OPTS) $(OPTIMIZE)" >buildtype.opt ; \
	fi

#	elif [ $(TARGET_OS) = mingw32 ] ; then \
#		echo "$(RELEASE_BUILD_OPTS_WITHOUT_NDEBUG)" >buildtype.opt ; \


flagopts.opt: #Makefile
	if [ $(BUILDTYPE) = DEBUG ] ; then \
		echo "$(FLAGOPTS)" >flagopts.opt ; \
	elif [ $(BUILDTYPE) = DEBUG_FAST ] ; then \
		echo "$(FLAGOPTS)" >flagopts.opt ; \
	else \
		echo "$(FLAGOPTS) -DRELEASE" >flagopts.opt ; \
	fi


bin/X11_XSendEvent: X11/X11_XSendEvent.c
	$(CC) X11/X11_XSendEvent.c -Wall -o bin/X11_XSendEvent -L/usr/X11R6/lib -lX11


# Mixer

$(QM)QM_view.cpp: $(QM)mQM_view.cpp

$(QM)mQM_view.cpp: $(QM)QM_view.h 
	cd $(QM) && $(MOC) QM_view.h >mQM_view.cpp

$(QM)mQM_MixerWidget.cpp: $(QM)QM_MixerWidget.h $(QM)QM_MixerWidget.cpp $(P)Qt_MyQButton.h 
	cd $(QM) && $(MOC) QM_MixerWidget.cpp >mQM_MixerWidget.cpp

#images.o: $(QM)images.qrc
#	$(RCC) $(QM)images.qrc -name images -o $(QM)images.cpp
#	$(CCC2) $(QM)images.cpp  `$(PKG) --libs --cflags QtGui` -c

$(T)QM_MixerWidget.o: $(QM)mQM_MixerWidget.cpp $(QM)QM_MixerWidget.cpp $(QM)QM_chip.h $(P)Qt_mixer_widget.h $(QM)QM_MixerWidget.h audio/SoundPluginRegistry_proc.h audio/CpuUsage.hpp Qt/helpers.h common/Vector.hpp Qt/Qt_MyQScrollBar.hpp Qt/KeyboardFocusFrame.hpp Qt/Timer.hpp Qt/Qt_MyQCheckBox.h
	$(CCC2) $(QM)QM_MixerWidget.cpp $(QTOPT) $(WNO_DEPRECATED_DECLARATIONS)

$(T)QM_view.o: $(QM)QM_view.cpp $(QM)QM_view.h $(QM)QM_chip.h $(QM)mQM_view.cpp $(QM)QM_MixerWidget.h
	$(CCC2) $(QM)QM_view.cpp $(QTOPT)

$(T)QM_chip.o: $(QM)QM_chip.cpp $(QM)QM_chip.h $(P)Qt_MyQCheckBox.h $(QM)QM_MixerWidget.h audio/CpuUsage.hpp
	$(CCC2) $(QM)QM_chip.cpp $(QTOPT) $(NO_ANALYZER_MALLOC_LEAK) #$(O0)

$(T)undo_chip_position.o: $(QM)undo_chip_position.c $(QM)QM_chip.h
	$(CC2) $(OPT) $(QM)undo_chip_position.c

$(T)undo_mixer.o: $(QM)undo_mixer.c
	$(CC2) $(OPT) $(QM)undo_mixer.c

$(T)undo_mixer_connections.o: $(QM)undo_mixer_connections.c
	$(CC2) $(OPT) $(QM)undo_mixer_connections.c

#undo_chip_addremove.o: $(QM)undo_chip_addremove.c
#	$(CC2) $(OPT) $(QM)undo_chip_addremove.c

$(T)Jack_plugin.o: audio/Jack_plugin.cpp weakjack/weak_libjack.def weakjack/weak_libjack.h weakjack/weak_libjack.c
	$(CCC2) $(JACKOPT) $(QTOPT) audio/Jack_plugin.cpp -Wno-missing-declarations $(WNO_DEPRECATED_DECLARATIONS)
#-Wno-gnu-designator -Wno-missing-field-initializers

$(T)find_jack_library.o: windows/find_jack_library.cpp
	$(CCC2) windows/find_jack_library.cpp $(QTOPT)

$(T)Sine_plugin.o: audio/Sine_plugin.c
	$(CC2) $(OPT) audio/Sine_plugin.c

$(T)Bus_plugins.o: audio/Bus_plugins.cpp
	$(CCC2) audio/Bus_plugins.cpp $(QTOPT)

$(T)Timeskew_plugin.o: audio/Timeskew_plugin.cpp audio/SmoothDelay.hpp
	$(CCC2) audio/Timeskew_plugin.cpp $(QTOPT) $(OPTIMIZE_O3) $(NO_ANALYZER_MALLOC_LEAK) # $(CPUOPT)

$(T)Patchbay_plugin.o: audio/Patchbay_plugin.cpp
	$(CCC2) audio/Patchbay_plugin.cpp $(QTOPT)

$(T)MidiMessages_plugin.o: audio/MidiMessages_plugin.c
	$(CC2) audio/MidiMessages_plugin.c $(OPT)

$(T)VST_plugins.o: audio/VST_plugins.cpp $(P)Qt_vst_paths_widget.h
	$(CCC2) audio/VST_plugins.cpp $(QTOPT) -I$(LV2_INCLUDE_PATH) -I$(LILV_INCLUDE_PATH) #-Wno-error # uses some Qt stuff to open GUI window

$(T)Ladspa_plugins.o: audio/Ladspa_plugins.cpp
	$(CCC2) audio/Ladspa_plugins.cpp $(QTOPT) $(LRDFOPT)

$(T)Sampler_plugin.o: audio/Sampler_plugin.cpp audio/Sampler_plugin_wav_parse.c audio/Sampler_plugin_xi_load.c audio/Sampler_plugin_sf2_load.c audio/SoundFonts_proc.h audio/Peaks.hpp audio/SampleRecorder_proc.h common/OS_string_proc.h audio/Granulator.hpp  audio/GranResampler.hpp audio/Fade.hpp
	$(CCC2) $(QTOPT) audio/Sampler_plugin.cpp $(SNDFILEOPT) $(SAMPLERATEOPT) $(OPTIMIZE_O3) $(NO_ANALYZER) $(BOOST_INCLUDE) #  $(CPUOPT) 

$(T)SampleRecorder.o: audio/SampleRecorder.cpp audio/SampleRecorder_proc.h common/OS_string_proc.h
	$(CCC2) $(QTOPT) audio/SampleRecorder.cpp $(SNDFILEOPT) $(BOOST_INCLUDE) 

$(T)SampleReader.o: audio/SampleReader.cpp audio/SampleReader_proc.h
	$(CCC2) $(QTOPT) audio/SampleReader.cpp $(SNDFILEOPT) $(BOOST_INCLUDE) 

$(T)Seqtrack_plugin.o: audio/Seqtrack_plugin.cpp audio/SampleReader_proc.h audio/GranResampler.hpp audio/Granulator.hpp common/Random.hpp audio/Peaks.hpp audio/SampleRecorder_proc.h common/seqblock_automation_proc.h audio/Fade.hpp
	$(CCC2) $(QTOPT) audio/Seqtrack_plugin.cpp $(SNDFILEOPT) $(OPTIMIZE_O3) $(NO_ANALYZER_MALLOC_LEAK) $(BOOST_INCLUDE) # $(CPUOPT) 

$(T)FluidSynth_plugin.o: audio/FluidSynth_plugin.cpp
	$(CCC2) $(CPPOPT) $(CPUOPT) audio/FluidSynth_plugin.cpp #-Wno-gnu-designator
#-Wno-missing-field-initializers
#`$(PKG) --cflags fluidsynth`

$(T)Pd_plugin.o: audio/Pd_plugin.cpp
	$(CCC2) -Ibin/packages/fluidsynth-1.1.6/include $(QTOPT) `$(PKG) --cflags glib-2.0` audio/Pd_plugin.cpp -Ibin/packages/libpd-master/libpds -Ibin/packages/libpd-master/libpd_wrapper -Ibin/packages/libpd-master/pure-data/src


$(T)Modulator_plugin.o: audio/Modulator_plugin.cpp audio/Delay.hpp
	$(CCC2) $(QTOPT) audio/Modulator_plugin.cpp $(NO_SANITIZE_SIGNED_INTEGER_OVERFLOW) $(NO_ANALYZER_MALLOC_LEAK)


$(T)SendReceive_plugins.o: audio/SendReceive_plugins.cpp common/Vector.hpp
	$(CCC2) $(QTOPT) audio/SendReceive_plugins.cpp $(BOOST_INCLUDE)

$(T)Pitchshift_plugin.o: audio/Pitchshift_plugin.cpp
	$(CCC2) $(CPPOPT) audio/Pitchshift_plugin.cpp


FAUST_DEPENDENCIES = audio/Faust_plugins_template.cpp audio/Faust_plugins_template1.cpp audio/Faust_plugins_template2.cpp audio/mfaustqt2.cpp
FAUST_OPTS1 = $(QTOPT) $(WNO_SUGGEST_OVERRIDE) -Wno-overloaded-virtual $(NO_SANITIZE_SIGNED_INTEGER_OVERFLOW) -Wno-unused-function -Wno-missing-declarations -Wno-deprecated-declarations -fno-sanitize=vptr $(CPUOPT) -DMACOS_LLVM_TARGET=\"$(MACOS_LLVM_TARGET)\" $(SNDFILEOPT) -DFAUST_EXE
FAUST_OPTS = $(FAUST_OPTS1) -I$(FAUSTDIR)/architecture
FAUST_OPTS2 = $(FAUST_OPTS) -Wno-float-equal
#-Wno-extern-c-compat
# -Ibin/packages/faust2/architecture 
FAUST_BIN_OPTS = -nvi

ifneq '' '$(findstring clang,$(CC))'
	FAUST_BIN_OPTS += -clang
endif


$(T)Faust_plugins.o: audio/Faust_plugins.cpp audio/Faust_factory_factory.cpp $(FAUST_DEPENDENCIES) audio/Faust_plugins_template.cpp audio/Faust_plugins_template1.cpp audio/Faust_plugins_template2.cpp audio/mfaustqt2.cpp
	$(MOC) audio/Faust_factory_factory.cpp >audio/mFaust_factory_factory.cpp
	$(CCC2) $(FAUST_OPTS) $(LLVM_OPTS) -DDSP_NAME="\"FaustDev\"" audio/Faust_plugins.cpp $(NOSHORTEN64TO32FLAG) $(BOOST_INCLUDE) # Qt 5.5 headers (which we use for qtwebkit) needs -Wno-shorten-64-to-32 flag.

audio/mfaustqt2.cpp: $(FAUSTDIR)/architecture/faust/gui/QTUI.h #bin/packages/faust2/architecture/faust/gui/faustqt.h
	cd audio && $(MOC) $(FAUSTDIR)/architecture/faust/gui/QTUI.h >mfaustqt2.cpp


#audio/mfaustqt1.cpp: bin/packages/faust2/architecture/faust/gui/faustqt.h
#	cd audio && $(MOC) faudiostream/architecture/faust/gui/faustqt.h >mfaustqt1.cpp

$(T)zita_rev.o: audio/zita_rev.cpp
	$(CCC2) audio/zita_rev.cpp $(FAUST_OPTS2) -DCLASSNAME=Zita_dsp  -DDSP_NAME=\"Zita\ Reverb\" -DCREATE_NAME=create_zita_rev_plugin

# Compiling zita_rev.dsp with -vec results in faster exection on average, but there appears to be much more CPU spikes
# than without the -vec option.
# I guess it's because of cache misses caused by a significantly higher memory usage in -vec mode (959kb vs. 479kb).
# Non-vec touches a lot of memory too tough, so there seems to be room for improvement in the faust compiler here.
audio/zita_rev.cpp: audio/zita_rev.dsp $(FAUST_DEPENDENCIES)
#	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -vec -cn Zita_dsp -a Faust_plugins_template.cpp zita_rev.dsp -o zita_rev.cpp
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn Zita_dsp -a Faust_plugins_template.cpp zita_rev.dsp -scal -o zita_rev.cpp
	./fix_faust_code.sh Zita_dsp $@


$(T)stk_flute.o: audio/stk_flute.cpp
	$(CCC2) audio/stk_flute.cpp $(FAUST_OPTS2) -DCLASSNAME=Flute_dsp -DDSP_NAME=\"STK\ Flute\" -DCREATE_NAME=create_stk_flute_plugin

audio/stk_flute.cpp: audio/faust-examples/faust-stk/flute.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Flute_dsp -a ../../Faust_plugins_template.cpp flute.dsp -o ../../stk_flute.cpp
	./fix_faust_code.sh Flute_dsp $@


$(T)stk_bowed.o: audio/stk_bowed.cpp
	$(CCC2) audio/stk_bowed.cpp $(FAUST_OPTS2) -DCLASSNAME=Bowed_dsp -DDSP_NAME=\"STK\ Bowed\" -DCREATE_NAME=create_stk_bowed_plugin

audio/stk_bowed.cpp: audio/faust-examples/faust-stk/bowed.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Bowed_dsp -a ../../Faust_plugins_template.cpp bowed.dsp -o ../../stk_bowed.cpp
	./fix_faust_code.sh Bowed_dsp $@



$(T)stk_blow_bottle.o: audio/stk_blow_bottle.cpp
	$(CCC2) audio/stk_blow_bottle.cpp $(FAUST_OPTS2) -DCLASSNAME=Blow_Bottle_dsp -DDSP_NAME=\"STK\ Blow\ Bottle\" -DCREATE_NAME=create_stk_blow_bottle_plugin

audio/stk_blow_bottle.cpp: audio/faust-examples/faust-stk/blowBottle.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Blow_Bottle_dsp -a ../../Faust_plugins_template.cpp blowBottle.dsp -o ../../stk_blow_bottle.cpp
	./fix_faust_code.sh Blow_Bottle_dsp $@



$(T)stk_bass.o: audio/stk_bass.cpp
	$(CCC2) audio/stk_bass.cpp $(FAUST_OPTS2) -DCLASSNAME=Bass_dsp -DDSP_NAME=\"STK\ Bass\" -DCREATE_NAME=create_stk_bass_plugin -Iaudio/faust-examples/faust-stk

audio/stk_bass.cpp: audio/faust-examples/faust-stk/bass.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Bass_dsp -a ../../Faust_plugins_template.cpp bass.dsp -o ../../stk_bass.cpp
	./fix_faust_code.sh Bass_dsp $@


$(T)stk_blow_hole.o: audio/stk_blow_hole.cpp
	$(CCC2) audio/stk_blow_hole.cpp $(FAUST_OPTS2) -DCLASSNAME=Blow_Hole_dsp -DDSP_NAME=\"STK\ Blow\ Hole\ \(clarinet\)\" -DCREATE_NAME=create_stk_blow_hole_plugin -Iaudio/faust-examples/faust-stk

audio/stk_blow_hole.cpp: audio/faust-examples/faust-stk/blowHole.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Blow_Hole_dsp -a ../../Faust_plugins_template.cpp blowHole.dsp -o ../../stk_blow_hole.cpp
	./fix_faust_code.sh Blow_Hole_dsp $@



$(T)stk_brass.o: audio/stk_brass.cpp
	$(CCC2) audio/stk_brass.cpp $(FAUST_OPTS2) -DCLASSNAME=Brass_dsp -DDSP_NAME=\"STK\ Brass\" -DCREATE_NAME=create_stk_brass_plugin -Iaudio/faust-examples/faust-stk

audio/stk_brass.cpp: audio/faust-examples/faust-stk/brass.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Brass_dsp -a ../../Faust_plugins_template.cpp brass.dsp -o ../../stk_brass.cpp
	./fix_faust_code.sh Brass_dsp $@



$(T)stk_clarinet.o: audio/stk_clarinet.cpp
	$(CCC2) audio/stk_clarinet.cpp $(FAUST_OPTS2) -DCLASSNAME=Clarinet_dsp -DDSP_NAME=\"STK\ Clarinet\" -DCREATE_NAME=create_stk_clarinet_plugin -Iaudio/faust-examples/faust-stk

audio/stk_clarinet.cpp: audio/faust-examples/faust-stk/clarinet.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Clarinet_dsp -a ../../Faust_plugins_template.cpp clarinet.dsp -o ../../stk_clarinet.cpp
	./fix_faust_code.sh Clarinet_dsp $@



$(T)stk_flute_stk.o: audio/stk_flute_stk.cpp
	$(CCC2) audio/stk_flute_stk.cpp $(FAUST_OPTS2) -DCLASSNAME=Flute_Stk_dsp -DDSP_NAME=\"STK\ Flute\ STK\" -DCREATE_NAME=create_stk_flute_stk_plugin -Iaudio/faust-examples/faust-stk

audio/stk_flute_stk.cpp: audio/faust-examples/faust-stk/flutestk.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Flute_Stk_dsp -a ../../Faust_plugins_template.cpp flutestk.dsp -o ../../stk_flute_stk.cpp
	./fix_faust_code.sh Flute_Stk_dsp $@



$(T)stk_glass_harmonica.o: audio/stk_glass_harmonica.cpp
	$(CCC2) audio/stk_glass_harmonica.cpp $(FAUST_OPTS2) -DCLASSNAME=Glass_Harmonica_dsp -DDSP_NAME=\"STK\ Glass\ Harmonica\" -DCREATE_NAME=create_stk_glass_harmonica_plugin -Iaudio/faust-examples/faust-stk

audio/stk_glass_harmonica.cpp: audio/faust-examples/faust-stk/glassHarmonica.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Glass_Harmonica_dsp -a ../../Faust_plugins_template.cpp glassHarmonica.dsp -o ../../stk_glass_harmonica.cpp
	./fix_faust_code.sh Glass_Harmonica_dsp $@



$(T)stk_harpsi.o: audio/stk_harpsi.cpp
	$(CCC2) audio/stk_harpsi.cpp $(FAUST_OPTS2) -DCLASSNAME=Harpsi_dsp -DDSP_NAME=\"STK\ Harpsichord\" -DCREATE_NAME=create_stk_harpsi_plugin -Iaudio/faust-examples/faust-stk

audio/stk_harpsi.cpp: audio/faust-examples/faust-stk/harpsi.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Harpsi_dsp -a ../../Faust_plugins_template.cpp harpsi.dsp -o ../../stk_harpsi.cpp
	./fix_faust_code.sh Harpsi_dsp $@



$(T)stk_modal_bar.o: audio/stk_modal_bar.cpp
	$(CCC2) audio/stk_modal_bar.cpp $(FAUST_OPTS2) -DCLASSNAME=Modal_Bar_dsp -DDSP_NAME=\"STK\ Modal\ Bar\" -DCREATE_NAME=create_stk_modal_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_modal_bar.cpp: audio/faust-examples/faust-stk/modalBar.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Modal_Bar_dsp -a ../../Faust_plugins_template.cpp modalBar.dsp -o ../../stk_modal_bar.cpp
	./fix_faust_code.sh Modal_Bar_dsp $@




$(T)stk_NLF_eks.o: audio/stk_NLF_eks.cpp
	$(CCC2) audio/stk_NLF_eks.cpp $(FAUST_OPTS2) -DCLASSNAME=NLF_Eks_dsp -DDSP_NAME=\"STK\ Non\-linear\ Karplus\-Strong\" -DCREATE_NAME=create_stk_NLF_eks_plugin -Iaudio/faust-examples/faust-stk

audio/stk_NLF_eks.cpp: audio/faust-examples/faust-stk/NLFeks.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn NLF_Eks_dsp -a ../../Faust_plugins_template.cpp NLFeks.dsp -o ../../stk_NLF_eks.cpp
	./fix_faust_code.sh NLF_Eks_dsp $@




$(T)stk_NLF_fm.o: audio/stk_NLF_fm.cpp
	$(CCC2) audio/stk_NLF_fm.cpp $(FAUST_OPTS2) -DCLASSNAME=NLF_Fm_dsp -DDSP_NAME=\"STK\ Non\-linear\ FM\" -DCREATE_NAME=create_stk_NLF_fm_plugin -Iaudio/faust-examples/faust-stk

audio/stk_NLF_fm.cpp: audio/faust-examples/faust-stk/NLFfm.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn NLF_Fm_dsp -a ../../Faust_plugins_template.cpp NLFfm.dsp -o ../../stk_NLF_fm.cpp
	./fix_faust_code.sh NLF_Fm_dsp $@




$(T)stk_piano.o: audio/stk_piano.cpp
	$(CCC2) audio/stk_piano.cpp $(FAUST_OPTS2) -DCLASSNAME=Piano_dsp -DDSP_NAME=\"STK\ Piano\" -DCREATE_NAME=create_stk_piano_plugin -Iaudio/faust-examples/faust-stk

audio/stk_piano.cpp: audio/faust-examples/faust-stk/piano.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Piano_dsp -a ../../Faust_plugins_template.cpp piano.dsp -o ../../stk_piano.cpp
	./fix_faust_code.sh Piano_dsp $@




$(T)stk_saxophony.o: audio/stk_saxophony.cpp
	$(CCC2) audio/stk_saxophony.cpp $(FAUST_OPTS2) -DCLASSNAME=Saxophony_dsp -DDSP_NAME=\"STK\ Saxophony\" -DCREATE_NAME=create_stk_saxophony_plugin -Iaudio/faust-examples/faust-stk

audio/stk_saxophony.cpp: audio/faust-examples/faust-stk/saxophony.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Saxophony_dsp -a ../../Faust_plugins_template.cpp saxophony.dsp -o ../../stk_saxophony.cpp
	./fix_faust_code.sh Saxophony_dsp $@




$(T)stk_sitar.o: audio/stk_sitar.cpp
	$(CCC2) audio/stk_sitar.cpp $(FAUST_OPTS2) -DCLASSNAME=Sitar_dsp -DDSP_NAME=\"STK\ Sitar\" -DCREATE_NAME=create_stk_sitar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_sitar.cpp: audio/faust-examples/faust-stk/sitar.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Sitar_dsp -a ../../Faust_plugins_template.cpp sitar.dsp -o ../../stk_sitar.cpp
	./fix_faust_code.sh Sitar_dsp $@




$(T)stk_tibetan_bowl.o: audio/stk_tibetan_bowl.cpp
	$(CCC2) audio/stk_tibetan_bowl.cpp $(FAUST_OPTS2) -DCLASSNAME=Tibetan_Bowl_dsp -DDSP_NAME=\"STK\ Tibetan\ Bowl\" -DCREATE_NAME=create_stk_tibetan_bowl_plugin -Iaudio/faust-examples/faust-stk

audio/stk_tibetan_bowl.cpp: audio/faust-examples/faust-stk/tibetanBowl.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Tibetan_Bowl_dsp -a ../../Faust_plugins_template.cpp tibetanBowl.dsp -o ../../stk_tibetan_bowl.cpp
	./fix_faust_code.sh Tibetan_Bowl_dsp $@




$(T)stk_tuned_bar.o: audio/stk_tuned_bar.cpp
	$(CCC2) audio/stk_tuned_bar.cpp $(FAUST_OPTS2) -DCLASSNAME=Tuned_Bar_dsp -DDSP_NAME=\"STK\ Tuned\ Bar\" -DCREATE_NAME=create_stk_tuned_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_tuned_bar.cpp: audio/faust-examples/faust-stk/tunedBar.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Tuned_Bar_dsp -a ../../Faust_plugins_template.cpp tunedBar.dsp -o ../../stk_tuned_bar.cpp
	./fix_faust_code.sh Tuned_Bar_dsp $@




$(T)stk_uni_bar.o: audio/stk_uni_bar.cpp
	$(CCC2) audio/stk_uni_bar.cpp $(FAUST_OPTS2) -DCLASSNAME=Uni_Bar_dsp -DDSP_NAME=\"STK\ Uni\ Bar\" -DCREATE_NAME=create_stk_uni_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_uni_bar.cpp: audio/faust-examples/faust-stk/uniBar.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Uni_Bar_dsp -a ../../Faust_plugins_template.cpp uniBar.dsp -o ../../stk_uni_bar.cpp
	./fix_faust_code.sh Uni_Bar_dsp $@




$(T)stk_voice_form.o: audio/stk_voice_form.cpp
	$(CCC2) audio/stk_voice_form.cpp $(FAUST_OPTS2) -DCLASSNAME=Voice_Form_dsp -DDSP_NAME=\"STK\ Voice\" -DCREATE_NAME=create_stk_voice_form_plugin -Iaudio/faust-examples/faust-stk

audio/stk_voice_form.cpp: audio/faust-examples/faust-stk/voiceForm.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn Voice_Form_dsp -a ../../Faust_plugins_template.cpp voiceForm.dsp -o ../../stk_voice_form.cpp
	./fix_faust_code.sh Voice_Form_dsp $@




$(T)faust_tapiir.o: audio/faust_tapiir.cpp
	@echo
	@echo "Changed (audio/tapiir.o):"
	@echo $?
	@echo
	$(CCC2) audio/faust_tapiir.cpp $(FAUST_OPTS2) -DCLASSNAME=Tapiir_dsp -DDSP_NAME=\"Tapiir\" -DCREATE_NAME=create_faust_tapiir_plugin 

audio/faust_tapiir.cpp: audio/faust-examples/tapiir.dsp $(FAUST_DEPENDENCIES)
	cd audio/faust-examples && $(FAUST) $(FAUST_BIN_OPTS) -cn Tapiir_dsp -a ../Faust_plugins_template.cpp tapiir.dsp -o ../faust_tapiir.cpp
	./fix_faust_code.sh Tapiir_dsp $@




$(T)faust_multibandcomp.o: audio/faust_multibandcomp.cpp
	$(CCC2) audio/faust_multibandcomp.cpp $(FAUST_OPTS2) -DCLASSNAME=Multibandcomp_dsp -DDSP_NAME=\"Multiband\ Compressor\" -DCREATE_NAME=create_faust_multibandcomp_plugin -DFAUST_THAT_ONE $(NO_ANALYZER) $(NOUNUSEDBUTSETVARIABLEWARNING)

audio/faust_multibandcomp.cpp: audio/faust_multibandcomp.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -vec -cn Multibandcomp_dsp -a Faust_plugins_template.cpp faust_multibandcomp.dsp -o faust_multibandcomp.cpp
	./fix_faust_code.sh Multibandcomp_dsp $@

$(T)faust_system_eq.o: audio/faust_system_eq.cpp
	$(CCC2) audio/faust_system_eq.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Eq_dsp -DDSP_NAME=\"System\ Eq\" -DCREATE_NAME=create_faust_system_eq_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_eq.cpp: audio/system_eq.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Eq_dsp -a Faust_plugins_template.cpp system_eq.dsp -o faust_system_eq.cpp
	./fix_faust_code.sh System_Eq_dsp $@




$(T)faust_system_tremolo.o: audio/faust_system_tremolo.cpp
	$(CCC2) audio/faust_system_tremolo.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Tremolo_dsp -DDSP_NAME=\"System\ Tremolo\" -DCREATE_NAME=create_faust_system_tremolo_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_tremolo.cpp: audio/system_tremolo.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Tremolo_dsp -a Faust_plugins_template.cpp system_tremolo.dsp -o faust_system_tremolo.cpp
	./fix_faust_code.sh System_Tremolo_dsp $@



$(T)faust_system_lowpass.o: audio/faust_system_lowpass.cpp
	$(CCC2) audio/faust_system_lowpass.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Lowpass_dsp -DDSP_NAME=\"System\ Lowpass\" -DCREATE_NAME=create_faust_system_lowpass_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_lowpass.cpp: audio/system_lowpass.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Lowpass_dsp -a Faust_plugins_template.cpp system_lowpass.dsp -o faust_system_lowpass.cpp
	./fix_faust_code.sh System_Lowpass_dsp $@




$(T)faust_system_highpass.o: audio/faust_system_highpass.cpp
	$(CCC2) audio/faust_system_highpass.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Highpass_dsp -DDSP_NAME=\"System\ Highpass\" -DCREATE_NAME=create_faust_system_highpass_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_highpass.cpp: audio/system_highpass.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Highpass_dsp -a Faust_plugins_template.cpp system_highpass.dsp -o faust_system_highpass.cpp
	./fix_faust_code.sh System_Highpass_dsp $@




$(T)faust_system_lowshelf.o: audio/faust_system_lowshelf.cpp
	$(CCC2) audio/faust_system_lowshelf.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Lowshelf_dsp -DDSP_NAME=\"System\ Lowshelf\" -DCREATE_NAME=create_faust_system_lowshelf_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_lowshelf.cpp: audio/system_lowshelf.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Lowshelf_dsp -a Faust_plugins_template.cpp system_lowshelf.dsp -o faust_system_lowshelf.cpp
	./fix_faust_code.sh System_Lowshelf_dsp $@




$(T)faust_system_highshelf.o: audio/faust_system_highshelf.cpp
	$(CCC2) audio/faust_system_highshelf.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Highshelf_dsp -DDSP_NAME=\"System\ Highshelf\" -DCREATE_NAME=create_faust_system_highshelf_plugin -DFAUST_SYSTEM_EFFECT

audio/faust_system_highshelf.cpp: audio/system_highshelf.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Highshelf_dsp -a Faust_plugins_template.cpp system_highshelf.dsp -o faust_system_highshelf.cpp
	./fix_faust_code.sh System_Highshelf_dsp $@




#faust_system_delay.o: audio/faust_system_delay.cpp
#	$(CCC2) audio/faust_system_delay.cpp $(FAUST_OPTS2) -DCLASSNAME=System_Delay_dsp -DDSP_NAME=\"System\ Delay\" -DCREATE_NAME=create_faust_system_delay_plugin -DFAUST_SYSTEM_EFFECT

#audio/faust_system_delay.cpp: audio/system_delay.dsp $(FAUST_DEPENDENCIES) audio/filter_smoothing.lib
#	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn System_Delay_dsp -a Faust_plugins_template.cpp system_delay.dsp -o faust_system_delay.cpp
#	sed -i s/^float\ faustpower/static\ float\ faustpower/ $@




#Faust_plugins.o: $(FAUST_DEPENDENCIES) audio/zita_rev.cpp audio/faust-examples/faust-stk/flute.cpp
#	$(CCC2) audio/Faust_plugins_template.cpp $(FAUST_OPTS2) -DDSP_INCLUDE=zita_rev.cpp -DDSP_NAME=\"Zita Reverb\"

#audio/zita_rev.cpp: audio/zita_rev.dsp
#	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -cn my_dsp zita_rev.dsp -o zita_rev.cpp

#audio/faust-examples/faust-stk/flute.cpp: audio/faust-examples/faust-stk/flute.dsp
#	cd audio/faust-examples/faust-stk && $(FAUST) $(FAUST_BIN_OPTS) -cn my_dsp flute.dsp -o flute.cpp

$(T)SoundProducer.o: audio/SoundProducer.cpp audio/SoundProducer_proc.h audio/fade_envelopes.h audio/MultiCore.cpp audio/monotonic_timer.c common/sema.h common/Semaphores.hpp common/QueueStack.hpp audio/SmoothDelay.hpp common/Vector.hpp common/spinlock.h audio/CpuUsage.hpp audio/AudioBuffer.hpp audio/AudioMeterPeaks_proc.h common/threading.h
	$(MOC) audio/MultiCore.cpp >audio/mMultiCore.cpp
	$(CCC2) audio/SoundProducer.cpp $(JACKOPT) $(QTOPT) $(OPTIMIZE_O3) $(CPUOPT) $(NO_ANALYZER_MALLOC_LEAK) $(BOOST_INCLUDE) # -O3 # 
#-fno-tree-vectorize # tree-vectorize makes radium crash on windows 8 with gcc 4.7.2

#-finline-functions -funswitch-loops -fvect-cost-model -fipa-cp-clone  -fpredictive-commoning -fgcse-after-reload
#-ftree-vectorize

#MultiCore.o: audio/MultiCore.cpp audio/fade_envelopes.h
#	$(CCC2) audio/MultiCore.cpp $(QTOPT)


$(T)AudioBuffer.o: audio/AudioBuffer.cpp audio/AudioBuffer.hpp
	$(CCC2) audio/AudioBuffer.cpp $(CPPOPT)

$(T)SoundPluginRegistry.o: audio/SoundPluginRegistry.cpp audio/SoundPluginRegistry_proc.h common/Vector.hpp
	$(CCC2) audio/SoundPluginRegistry.cpp  $(QTOPT)

$(T)SoundPlugin.o: audio/SoundPlugin.cpp audio/SoundPlugin.h audio/SoundPlugin_proc.h audio/SmoothDelay.hpp midi/midi_i_input_proc.h Qt/helpers.h $(T)Sine_plugin.o mixergui/QM_chip.h # we add Sine_plugin.o here to make sure it is up to date.
	$(CCC2) audio/SoundPlugin.cpp $(QTOPT) $(OPTIMIZE_O3) $(NO_ANALYZER_MALLOC_LEAK) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\" $(BOOST_INCLUDE) 
### $(CPUOPT)

$(T)AudioMeterPeaks.o: audio/SoundPlugin.h audio/AudioMeterPeaks.cpp
	$(CCC2) audio/AudioMeterPeaks.cpp $(QTOPT) $(NO_ANALYZER_MALLOC_LEAK)

$(T)Peaks.o: audio/Peaks.cpp audio/Peaks.hpp
	$(CCC2) audio/Peaks.cpp $(SNDFILEOPT) $(QTOPT) $(BOOST_INCLUDE)

$(T)Fade.o: audio/Fade.cpp audio/Fade.hpp
	$(CCC2) audio/Fade.cpp $(CPPOPT) -ffast-math

$(T)Mixer.o: audio/Mixer.cpp audio/SoundProducer_proc.h Qt/helpers.h audio/SampleRecorder_proc.h audio/CpuUsage.hpp weakjack/weak_libjack.h
	$(CCC2) audio/Mixer.cpp  $(JACKOPT) $(QTOPT)  $(CPUOPT) -Wno-null-dereference $(NO_ANALYZER_MALLOC_LEAK)

$(T)get_windows_commandlines.o: audio/get_windows_commandlines.c
	$(CC2) audio/get_windows_commandlines.c $(OPT)

$(T)Envelope.o: audio/Envelope.cpp
	$(CCC2) audio/Envelope.cpp $(CPPOPT) $(CPUOPT)

$(T)Resampler.o: audio/Resampler.cpp audio/SampleInterpolator.cpp
#	$(CCC2) audio/Resampler.cpp $(CPPOPT) `$(PKG) --cflags samplerate`
	$(CCC2) audio/Resampler.cpp $(CPPOPT) $(CPUOPT) `$(PKG) --cflags samplerate` 

$(T)SoundFonts.o: audio/SoundFonts.cpp $(LIBGIG_PATH)/SF.cpp
	$(CCC2) audio/SoundFonts.cpp $(QTOPT) -Ibin/packages/libgig/src/
# `$(PKG) --cflags glib-2.0`

$(T)audio_instrument.o: audio/audio_instrument.cpp $(CD)disk.h audio/SoundPluginRegistry_proc.h mixergui/QM_chip.h
	$(CCC2) audio/audio_instrument.cpp $(QTOPT)

#Smooth.o: audio/Smooth.c audio/Smooth_proc.h
#	$(CC2) audio/Smooth.c $(OPT) $(CPUOPT)

$(T)Presets.o: audio/Presets.cpp audio/Presets_proc.h
	$(CCC2) audio/Presets.cpp $(QTOPT)

$(T)undo_audio_effect.o: audio/undo_audio_effect.c
	$(CC2) audio/undo_audio_effect.c $(OPT)

$(T)undo_connection_enabled.o: audio/undo_connection_enabled.c
	$(CC2) audio/undo_connection_enabled.c $(OPT)

$(T)undo_audio_connection_gain.o: audio/undo_audio_connection_gain.c
	$(CC2) audio/undo_audio_connection_gain.c $(OPT)

$(T)undo_pd_controllers.o: audio/undo_pd_controllers.c
	$(CC2) audio/undo_pd_controllers.c $(OPT)

$(T)undo_plugin_state.o: audio/undo_plugin_state.c
	$(CC2) audio/undo_plugin_state.c $(OPT)

$(T)SoundfileSaver.o: audio/SoundfileSaver.c
	$(CC2) audio/SoundfileSaver.c $(OPT) $(SNDFILEOPT)

$(T)system_compressor_wrapper.o: audio/system_compressor_wrapper.cpp audio/system_compressor.cpp
	$(CCC2) $(FAUST_OPTS2) audio/system_compressor_wrapper.cpp

audio/system_compressor.cpp: audio/system_compressor.dsp
	$(FAUST) -I `pwd`/audio -vec -cn Faust_system_compressor audio/system_compressor.dsp -o audio/system_compressor.cpp
	./fix_faust_code.sh Faust_system_compressor $@

bin/radium_crashreporter: crashreporter/crashreporter.cpp common/Process.hpp
	@echo
	@echo "Changed (bin/radium_crashreporter):"
	@echo $?
	@echo
	$(CCC) -Wall crashreporter/crashreporter.cpp $(RADIUM_BFD_CFLAGS) $(CPPOPT) -DCRASHREPORTER_BIN -DRADIUM_VERSION=\"$(RADIUM_VERSION)\" $(QT_GUI_CFLAGS) $(QT_NETWORK_CFLAGS) $(OS_OPTS) $(WNO_DEPRECATED_DECLARATIONS) $(WNO_DEPRECATED_COPY) $(WNO_DEPRECATED_COPY_CLANG) $(QT_SYSTEM_CFLAGS) -o /tmp/crashbin.o
	$(LINKER) `cat buildtype.opt` /tmp/crashbin.o -o bin/radium_crashreporter $(QT_GUI_LDFLAGS) $(QT_NETWORK_LDFLAGS)
	rm /tmp/crashbin.o

bin/radium_pcinfo.exe: crashreporter/radium_pcinfo.cpp
	$(CCC) crashreporter/radium_pcinfo.cpp -Wall $(RADIUM_PCINFO_CFLAGS) $(RADIUM_PCINFO_LDFLAGS) -o bin/radium_pcinfo.exe -mwindows


ifeq ($(GCC_MAJOR),9)
	CRASHREPORTER_OPTS += $(WNO_DEPRECATED_COPY)
endif

$(T)crashreporter.o: crashreporter/crashreporter.cpp common/Process.hpp
	@echo
	@echo "Changed (crashreporter.o):"
	@echo $?
	@echo
	$(CCC2) crashreporter/crashreporter.cpp $(QTOPT) $(CRASHREPORTER_OPTS) -DRADIUM_VERSION=\"$(RADIUM_VERSION)\" $(NO_ANALYZER_MALLOC_LEAK) $(WNO_DEPRECATED_COPY_CLANG)

$(T)crashreporter_posix.o: crashreporter/crashreporter_posix.c crashreporter/backtrace-symbols.c
	if ! $(CC2) $(RADIUM_BFD_CFLAGS) crashreporter/crashreporter_posix.c $(OPT) $(CRASHREPORTER_POSIX_OPTS) ; then \
		printf '   \n\n\n    ** Note: You might need to uncomment the  PACKAGE AND PACKAGE_VERSION definitions in crashreporter/crashreporter_posix.c ** \n\n\n\n' ; \
		exit -1 ; \
	fi

$(T)crashreporter_windows.o: crashreporter/crashreporter_windows.cpp
	$(CCC2) crashreporter/crashreporter_windows.cpp $(CPPOPT) $(O0) $(CRASHREPORTER_WINDOWS_CFLAGS)
#	$(CC_STATIC2) crashreporter/crashreporter_windows.c $(OPT) $(O0) -DPACKAGE  $(CRASHREPORTER_WINDOWS_CFLAGS)
#	$(CC2) crashreporter/crashreporter_windows.c $(OPT) -I/home/kjetil/radium-qt4/mingw/binutils-2.23.1/bfd -DPACKAGE -I/home/kjetil/radium-qt4/mingw/binutils-2.23.1/include $(O0)

VISUALIZATION_OPTIONS=$(WNO_SUGGEST_OVERRIDE) $(WNO_DUPLICATED_BRANCHES) $(WNO_NULL_POINTER_ARITHMETIC) $(NO_ANALYZER)  $(WNO_DEPRECATED_COPY_CLANG) $(WNO_DEPRECATED_DECLARATIONS) $(WNO_MISLEADING_INDENTATION_CLANG) $(WNO_CLASS_MEMACCESS) $(WNO_DEPRECATED_ENUM_ENUM_CONVERSION)

$(T)GfxElements.o: OpenGL/GfxElements.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/SharedVariables.hpp OpenGL/FreeType.hpp common/Mutex.hpp OpenGL/T2.hpp common/spinlock.h
	$(CCC2) OpenGL/GfxElements.cpp $(QTOPT) $(FREETYPE_CFLAGS) $(BOOST_INCLUDE) $(VL_CFLAGS) $(VISUALIZATION_OPTIONS)

$(T)T2.o: OpenGL/T2.cpp OpenGL/T2.hpp OpenGL/SharedVariables.hpp common/QueueStack.hpp OpenGL/GfxElements.h
	$(CCC2) OpenGL/T2.cpp $(QTOPT) $(BOOST_INCLUDE) $(VL_CFLAGS) $(VISUALIZATION_OPTIONS) 

$(T)Render.o: OpenGL/Render.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/SharedVariables.hpp common/spinlock.h common/time_proc.h common/Beats_proc.h common/TimeData.hpp
	$(CCC2) OpenGL/Render.cpp $(QTOPT) $(VL_CFLAGS) $(VISUALIZATION_OPTIONS)

$(T)Widget.o: OpenGL/Widget.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/Timing.hpp OpenGL/SharedVariables.hpp common/Mutex.hpp OpenGL/T2.hpp common/spinlock.h common/MovingAverage.hpp OpenGL/Qt5ThreadedWidget.hpp common/Vector.hpp Qt/Timer.hpp
	$(CCC2) OpenGL/Widget.cpp $(QTOPT) $(VL_CFLAGS) $(VISUALIZATION_OPTIONS) 

$(T)CheckOpenGL.o: OpenGL/CheckOpenGL.cpp common/Process.hpp
	$(CCC2) OpenGL/CheckOpenGL.cpp $(QTOPT) $(WNO_DEPRECATED_DECLARATIONS)

do.o:  $(BUILD_DEPENDENCIES) OpenGL/do.m
	$(CC) OpenGL/do.m $(OPT)


# embedded scheme

ifeq ($(TARGET_OS),linux)
S7AlignmentSanitize=
#S7AlignmentSanitize=-fno-sanitize=alignment
else
S7AlignmentSanitize=
endif

ifeq ($(BUILDTYPE), DEBUG)
	S7OPTS += -DS7_DEBUGGING=1 -DS7_ALIGNED # -DWITH_PROFILE=1 
	ifneq (,$(findstring clang,$(CC)))
		S7OPTS +=  -fno-sanitize=integer
	endif
	ifeq ($(TARGET_OS),linux)
		S7OPTS += -DWITH_MULTITHREAD_CHECKS=1 # Only enabled on Linux. The cleanup function is not called as often as it should on clang/macos.
	endif
endif

S7OPTS += -DS7_ALIGNED -g # $(O0) is REALLY slow on mac, for some reason.

ifneq ($(TARGET_OS),linux)
	S7OPTS += -O2  # $(O0) is REALLY slow on mac, for some reason.
endif

#S7OPTS += -DWITH_GMP

bin/packages/s7/s7_$(TARGET_OS)_$(BUILDTYPE).o: bin/packages/s7/s7.c
	$(CC) -c bin/packages/s7/s7.c -o bin/packages/s7/s7_$(TARGET_OS)_$(BUILDTYPE).o `cat buildtype.opt` -Wno-error -Wno-float-equal -Iembedded_scheme $(S7OPTS) $(S7AlignmentSanitize) -DWITH_C_LOADER=0 -DWITH_HISTORY=1 -fPIC

bin/packages/s7/s7.c: bin/packages/s7.tar.gz
	cd bin/packages && rm -fr s7 && tar xvzf s7.tar.gz && touch s7/s7.c && mv s7/s7webserver s7/s7webserver_org # Note: renaming s7webserver to avoid mistakenly using it instead of bin/s7webserver


# -Wno-absolute-value
#-DDEBUGGING=1

sndlib_objectfiles/headers.o: sndlib_built
	cp bin/packages/sndlib/headers.o sndlib_objectfiles/
sndlib_objectfiles/io.o: sndlib_built
	cp bin/packages/sndlib/io.o sndlib_objectfiles/
sndlib_objectfiles/audio.o: sndlib_built
	cp bin/packages/sndlib/audio.o sndlib_objectfiles/
sndlib_objectfiles/sound.o: sndlib_built
	cp bin/packages/sndlib/sound.o sndlib_objectfiles/
sndlib_objectfiles/xen.o: sndlib_built
	cp bin/packages/sndlib/xen.o sndlib_objectfiles/
sndlib_objectfiles/vct.o: sndlib_built
	cp bin/packages/sndlib/vct.o sndlib_objectfiles/
sndlib_objectfiles/sndlib2xen.o: sndlib_built
	cp bin/packages/sndlib/sndlib2xen.o sndlib_objectfiles/
sndlib_objectfiles/clm2xen.o: sndlib_built
	cp bin/packages/sndlib/clm2xen.o sndlib_objectfiles/
sndlib_objectfiles/clm.o: sndlib_built
	cp bin/packages/sndlib/clm.o sndlib_objectfiles/

SNDLIBCONF ?=

sndlib_built: bin/packages/sndlib/clm.c
	cd bin/packages/sndlib && CC="$(CC)" CFLAGS="$(SNDLIBFLAGS) -g $(CPUOPT)" ./configure --without-alsa --without-audio --without-forth --without-gsl --without-jack --without-oss --without-portaudio --without-ruby --without-s7 $(SNDLIBCONF) && $(MAKE) -j3
	mkdir -p sndlib_objectfiles
	echo 1 >sndlib_built

bin/packages/sndlib/clm.c: bin/packages/sndlib.tar.gz bin/packages/sndlib.patch
	cd bin/packages && rm -fr sndlib && tar xvzf sndlib.tar.gz && cd sndlib && patch -p0 <../sndlib.patch && touch clm.c



#clm.o: audio/clm.h audio/clm.c audio/sndlib.h audio/_sndlib.h audio/xen.h audio/vct.h
#	$(CC2) $(OPT) audio/clm.c -Iembedded_scheme -I/home/kjetil/snd-17/


$(T)s7webserver.o: bin/s7webserver/s7webserver.h bin/s7webserver/s7webserver.cpp bin/s7webserver/moc_s7webserver.cpp bin/packages/s7/s7.c
	$(CCC2) -c bin/s7webserver/s7webserver.cpp $(QTOPT) -Ibin/packages/s7 -g -Iembedded_scheme -Wall $(WERROR) -Wno-error=unused-variable -Wno-error=unused-function $(STD_CPP) -Wno-deprecated-declarations 

bin/s7webserver/moc_s7webserver.cpp: bin/s7webserver/s7webserver.h
	$(MOC) -DCOMPILING_S7WEBSERVER bin/s7webserver/s7webserver.h -o bin/s7webserver/moc_s7webserver.cpp

$(T)scheme.o: embedded_scheme/scheme.cpp  bin/packages/s7/s7.c embedded_scheme/s7extra_proc.h
	$(CCC2) -c embedded_scheme/scheme.cpp $(QTOPT) -I$(QHTTPSERVER_PATH)/src -Ibin/packages/s7

QHTTPSERVERFLAGS= $(CPPOPT) $(QT_CFLAGS) $(NOSHORTEN64TO32FLAG) -I$(QHTTPSERVER_PATH)/http-parser -I$(QHTTPSERVER_PATH)/build -Wno-null-dereference -D_REENTRANT  #-fno-sanitize=undefined

ifeq ($(shell test $(GCC_MAJOR) -gt 6; echo $$?),0)
	QHTTPCONNECTIONFLAGS=-fno-sanitize=vptr # <- Workaround. Couldn't find real bug. TODO: Update to qhttp.
	HTTPPARSERFLAGS=-Wno-implicit-fallthrough
else ifeq ($(shell test $(CLANG_MAJOR) -gt 14; echo $$?),0)
	HTTPPARSERFLAGS=-Wno-implicit-fallthrough
else
	QHTTPCONNECTIONFLAGS=
	HTTPPARSERFLAGS=
endif



$(T)qhttpconnection.o: $(QHTTPSERVER_PATH)/src/qhttpconnection.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/src/qhttpconnection.cpp $(QHTTPSERVERFLAGS) -Wno-missing-declarations #$(QHTTPCONNECTIONFLAGS)
$(T)qhttprequest.o: $(QHTTPSERVER_PATH)/src/qhttprequest.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/src/qhttprequest.cpp $(QHTTPSERVERFLAGS)
$(T)qhttpresponse.o: $(QHTTPSERVER_PATH)/src/qhttpresponse.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/src/qhttpresponse.cpp $(QHTTPSERVERFLAGS)
$(T)qhttpserver.o: $(QHTTPSERVER_PATH)/src/qhttpserver.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/src/qhttpserver.cpp $(QHTTPSERVERFLAGS)
$(T)moc_qhttpconnection.o: $(QHTTPSERVER_PATH)/build/moc_qhttpconnection.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/build/moc_qhttpconnection.cpp $(QHTTPSERVERFLAGS)
$(T)moc_qhttprequest.o: $(QHTTPSERVER_PATH)/build/moc_qhttprequest.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/build/moc_qhttprequest.cpp $(QHTTPSERVERFLAGS)
$(T)moc_qhttpresponse.o: $(QHTTPSERVER_PATH)/build/moc_qhttpresponse.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/build/moc_qhttpresponse.cpp $(QHTTPSERVERFLAGS)
$(T)moc_qhttpserver.o: $(QHTTPSERVER_PATH)/build/moc_qhttpserver.cpp
	$(CCC2) -c $(QHTTPSERVER_PATH)/build/moc_qhttpserver.cpp $(QHTTPSERVERFLAGS)
#ar cqs libqhttpserver.a qhttpconnection.o moc_qhttpconnection.o qhttprequest.o moc_qhttprequest.o qhttpresponse.o moc_qhttpresponse.o qhttpserver.o moc_qhttpserver.o

$(T)http_parser.o: $(QHTTPSERVER_PATH)/http-parser/http_parser.c
	$(CC2) -c $(QHTTPSERVER_PATH)/http-parser/http_parser.c $(OPT) $(HTTPPARSERFLAGS)

LIBGIG_FLAGS=-Wno-sign-compare -Wno-missing-declarations -Wno-unused-result -DPACKAGE="\"libgig\"" -DVERSION="\"4.2.0\"" -D_GNU_SOURCE

$(T)RIFF.o: $(LIBGIG_PATH)/SF.cpp
	$(CCC2) -c $(LIBGIG_PATH)/RIFF.cpp $(CPPOPT) $(LIBGIG_FLAGS)

$(T)SF.o: $(LIBGIG_PATH)/SF.cpp
	$(CCC2) -c $(LIBGIG_PATH)/SF.cpp $(CPPOPT) $(LIBGIG_FLAGS)

$(LIBGIG_PATH)/SF.cpp: bin/packages/libgig-4.2.0.tar.bz2
	cd bin/packages && rm -fr libgig && tar xvjf libgig-4.2.0.tar.bz2 && mv libgig-4.2.0 libgig && touch $(LIBGIG_PATH)/SF.cpp

$(T)radium_s7_wrap.o: api/radium_s7_wrap.c 
	$(CC2) api/radium_s7_wrap.c $(OPT) -Ibin/packages/s7

api/radium_s7_wrap.c: bin/protoconfparser.py api/protos.conf bin/packages/s7/s7.c api/s7_types_code.c api/s7_types_code_init.c
	cd api && $(PYTHONEXE) ../bin/protoconfparser.py radium_s7_wrap.c >radium_s7_wrap.c

api/s7_types_code.c: api/s7_types_generator.scm
	api/s7_types_generator.scm code

api/s7_types_code_init.c: api/s7_types_generator.scm
	api/s7_types_generator.scm init

bin/scheme/api_protos.scm: bin/protos.conf bin/protoconfparser.py 
	cd api && $(PYTHONEXE) ../bin/protoconfparser.py api_protos.scm >../bin/scheme/api_protos.scm

#bin/zita_rev_ladspa.so: audio/zita_rev.dsp
#	cd audio && $(FAUST) $(FAUST_BIN_OPTS) -a ladspa.cpp -cn zita_rev_radium zita_rev.dsp >zita_rev_ladspa.cpp
#	$(CCC2) -I /usr/share/faust/ audio/zita_rev_ladspa.cpp -shared -o bin/zita_rev_ladspa.so $(FPIC) 



