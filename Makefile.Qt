#
# Users and packagers: Edit build_*.sh instead.
#

VERSION = 3.3.2

#----------------USER SETTINGS-------------------------------

# 1. Where to install
#
PREFIX ?= /usr/local
bindir ?= $(PREFIX)/bin
libdir ?= $(PREFIX)/lib


# 2. Where moc and uic for QT4 is installed.
#
MOC ?= moc
UIC ?= uic
RCC ?= rcc

# 4. Release buid or Debug build
#
BUILDTYPE ?= DEBUG
#BUILDTYPE=RELEASE

IS_LINUX_BINARY ?= 


# 5. Full path to a python2 executable.  (Think it needs to be at least V2.4)
#
PYTHONEXE ?= `which python2`



# 6. Opimization options. Only enabled in RELEASE build
OPTIMIZE ?= -O3


#----------------END USER SETTINGS---------------------------



#----------------DEFININTIONS----------------------

# Packagers: Don't change anything below here unless things don't work.


GCDIR=bin/packages/gc-7.2

MIDIINC=-Imidi/rtmidi
#MIDIINC=-Imidi/alsaseq



P=Qt/
API=api/

MAKEFILE=Makefile.Qt

MAX_NUM_UNDOS=800

CD=common/

PKG ?= pkg-config

CCC ?= g++
CC ?= gcc
GCC ?= gcc
GPLUSPLUS ?= $(CCC)
LINKER ?= g++

TARGET_OS ?= any

S7OPTS ?=

# The include files in audio/faudiostream are copied from Faust 0.9.55.
FAUST ?= ~/site/bin/faust


JACKOPT ?=
LRDFOPT ?= `$(PKG) --cflags lrdf`
SNDFILEOPT ?= `$(PKG) --cflags sndfile`
SAMPLERATEOPT ?= `$(PKG) --cflags samplerate`
GLIBOPT ?= `$(PKG) --cflags glib-2.0`
# (G_BYTE_ORDER == G_LITTLE_ENDIAN)

PYPATH ?= 
QT_CFLAGS ?= `$(PKG) --cflags Qt3Support --cflags QtOpenGL` -Ibin/packages/qhttpserver-master/src -DQHTTPSERVER_EXPORT
QT_LDFLAGS ?= `$(PKG) --libs Qt3Support --libs QtOpenGL --libs QtNetwork`
GTK_CFLAGS ?= `$(PKG) --cflags gtk+-2.0`
GTK_LDFLAGS ?= `$(PKG) --libs gtk+-2.0`

FREETYPE_CFLAGS ?= `$(PKG) pkg-config --cflags freetype2`

VST_OPTS ?= -DUSE_VESTIGE=0

CRASHREPORTER_OPTS ?= 
CRASHREPORTER_POSIX_OPTS ?= 

DEFINES=-DNOPAUSEPLAY -DCOMPILING_RADIUM
#-DDISABLE_BDWGC
#-DMEMORY_DEBUG
# define SYSBASEDEBUG
# define TRACKER_DEBUG
# define MEMORY_DEBUG
# define TRACKER_GB

# If you want QT visual:
VISUAL ?= -DUSE_QT_VISUAL=1 -DUSE_GTK_VISUAL=0

# Or, if you want GTK visual: (Less maintained, and doesn't work very well on OSX. Possibly faster though.)
#VISUAL ?= -DUSE_QT_VISUAL=0 -DUSE_GTK_VISUAL=1

FULL_VERSION ?= 1

DEBUG_BUILD_OPTS = -DDEBUG -Werror -Wall -g
#-DNDEBUG

RELEASE_BUILD_OPTS_WITHOUT_NDEBUG = -DRELEASE -DDEBUG -Wall -g $(OPTIMIZE)
# NDEBUG chashes on windows 32 bit (!).
# The crashreporter says the crash happens in QTextEngine::itemize, but there is no further backtrace, which is a sign of memory corruption, so this information might not be accurate.

RELEASE_BUILD_OPTS = $(RELEASE_BUILD_OPTS_WITHOUT_NDEBUG) -DNDEBUG



OS_OPTS ?= 
OS_LDFLAGS ?=
OS_DEPS ?=
OS_OBJS ?=

REQTYPE_TYPE = -DUSE_QT_REQTYPE=1 -DUSE_GTK_REQTYPE=0
MENU_TYPE = -DUSE_QT_MENU=1 -DUSE_GTK_MENU=0

FLAGOPTS = $(DEFINES) -DGUIISQT -DUSE_GFX_OP_QUEUE -DFULL_VERSION=$(FULL_VERSION) -DIS_LITTLE_ENDIAN=1 -DUSE_OPENGL=1 $(VISUAL) $(REQTYPE_TYPE) $(MENU_TYPE)

COMMONOPT = -c `cat buildtype.opt` -I$(GCDIR)/include -I$(P) -I$(PYPATH) $(FLAGOPTS) $(MIDIINC) $(OS_OPTS) $(VST_OPTS) -I${HOME}/boost_1_58_0
#$(CFLAGS)

# OPT is C flags
OPT=$(COMMONOPT) -Wstrict-prototypes
# -D_FORTIFY_SOURCE=2 -O2

CPUOPT ?=


# -pg

# CPPOPT is CPP flags
CPPOPT = $(COMMONOPT) -Wno-unused-function -std=gnu++11


# Common QT opts (both 3 and 4)
COMMON_QTOPTS =

# QT4 opts
QTOPT = $(CPPOPT) -DUSE_QT4 -DUSE_QIMAGE_BUFFER=1 $(QT_CFLAGS) $(COMMON_QTOPTS) # -DQT_NO_OPENGL 
QTLINKFLAGS = $(QT_LDFLAGS)
#$(GTK_LDFLAGS)

#QTOPT = $(CPPOPT) -DUSE_QT4 -DQT_SHARED -DQT3_SUPPORT -I/home/kjetil/site/include/Qt3Support -I/home/kjetil/site/include/QtCore -I/home/kjetil/site/include/QtGui -I/home/kjetil/site/QtNetwork -I/home/kjetil/site/QtSql $(COMMON_QTOPTS)

#
# or:
#

# QT3 opts
# 
#QTOPT = $(CPPOPT) -DUSE_QT3 `pkg-config --cflags qt-mt` $(COMMON_QTOPTS)
#QTLINKFLAGS = `pkg-config --libs qt-mt` `pkg-config --libs gtk+-2.0`

#QTLINKFLAGS = $(QT_LDFLAGS) -static `pkg-config --static --libs gtk+-2.0`
#QTLINKFLAGS = $(QT_LDFLAGS) /tmp/radium/lib/libgtk-x11-2.0.a /tmp/radium/lib/libgdk-x11-2.0.a -L/tmp/radium/lib -latk-1.0 -lpangocairo-1.0 -lXext -lXrender -lXinerama -lXrandr -lXcursor -lXcomposite -lXdamage -lgdk_pixbuf-2.0 -lpangoft2-1.0 -lgio-2.0 -lXfixes -lcairo -lX11 -lpango-1.0 -lm -lfreetype -lfontconfig -lgobject-2.0 -lglib-2.0

#/home/kjetil/site/src/qt-x11-free-3.3.8b/lib/libqt.a 

#`pkg-config --libs gtk+-2.0`
#/tmp/radium/lib/ -static -lX11 -lXext -lXft -lXcursor -lXinerama -lXrandr -lSM



# rtmidi flags
RTMIDI_DIR = midi/rtmidi/rtmidi-2.0.0
RTMIDI_CFLAGS ?= -D__DUMMY__
#-fexceptions
RTMIDI_LDFLAGS ?= 


# vl flags
VL_CFLAGS ?=
VL_LIBS ?=


VL_LDFLAGS=$(VL_LIBS)



#-------------------OBJECT DEFINITIONS-------------------------------

OBJ1= windows.o window_config.o list.o vector.o hashmap.o song.o blocks.o block_insert.o block_split.o block_delete.o block_properties.o tracks.o localzooms.o control.o lines.o font.o track_insert.o track_onoff.o settings.o mmd2load.o

OBJ2= notes.o notes_legalize.o pitches.o wblocks.o wtracks.o sliders.o gfx_wblocks.o gfx_wblocks_reltempo.o common.o gfx_wtext.o gfx_text.o gfx_lines.o gfx_point.o gfx_op_queue.o

OBJ3= eventreciever.o reallines.o notestext.o trackreallines2.o clipboard_range.o clipboard_range_calc.o clipboard_range_copy.o clipboard_range_paste.o clipboard_range_cut.o transpose.o backwards.o invert.o glissando.o pitchexpand.o expand.o clipboard_track_copy.o clipboard_track_paste.o clipboard_track_cut.o clipboard_tempos_copy.o clipboard_localzooms.o clipboard_block_copy.o clipboard_block_paste.o quantitize.o

OBJ4 = tbox.o area.o range.o nodelines.o

OBJ5= debug.o memory.o placement.o t_gc.o cursor.o cursor_updown.o velocities.o pixmap.o scroll.o blts.o

OBJ6= realline_calc.o gfx_subtrack.o LPB.o Signature.o Beats.o gfx_wtrackheaders.o gfx_wtrackheader_volpan.o gfx_slider.o reallines_insert.o gfx_shrink.o gfx_shrink_t.o gfx_request.o

OBJ7= instruments.o patch.o fxlines.o fxlines_legalize.o blocklist.o  scroll_play.o crashreporter.o crashreporter_posix.o crashreporter_windows.o error.o  threading.o Semaphores.o stacktoucher.o

#Tempos and time
OBJ8= reltempo.o temponodes.o tempos.o time.o temponodes_legalize.o

#Playing
OBJ9= Ptask2Mtask.o player.o scheduler.o PEQrealline.o PEQline.o PEQmempool.o PEQblock.o PEQnotes.o PEQcommon.o playerclass.o player_startstop.o PEQvelocities.o PEQpitches.o PEQ_calc.o PEQfxs.o player_pause.o PEQ_type.o PEQ_calc_64bit.o PEQ_clock.o PEQ_LPB.o PEQ_Signature.o PEQ_Beats.o

#Disk
OBJ10= disk.o disk_fxs.o disk_wblock.o disk_localzooms.o disk_track.o disk_fx.o disk_fxnodelines.o disk_wtrack.o disk_temponodes.o disk_tempos.o disk_song.o disk_velocities.o disk_block.o disk_placement.o disk_stops.o disk_playlist.o disk_root.o disk_notes.o disk_lpbs.o disk_signatures.o disk_windows.o disk_warea.o disk_save.o disk_load.o disk_instrument.o disk_patches.o disk_slider.o

#Undo
OBJ11= undo.o undo_notes.o undo_fxs.o undo_temponodes.o undo_tempos.o undo_lpbs.o undo_signatures.o undo_notesandfxs.o undo_reallines.o undo_tracks.o undo_range.o undo_blocks.o undo_trackheader.o undo_reltempomax.o undo_maintempos.o undo_block_insertdelete.o undo_block_mergesplit.o undo_reltemposlider.o undo_playlist.o undo_patch.o undo_patchvoice.o undo_patchname.o undo_chip_position.o

#X11 Spesific
#OBJ12= X11_visual.o X11_error.o X11_Ptask2Mtask.o X11_Bs_edit.o X11_Main.o X11_endprogram.o X11_disk.o X11_Player.o X11_memory.o X11_ReqType.o X11_keyboard.o X11_MidiProperties.o

#Qt Spesific
OBJ12= Qt_visual.o GTK_visual.o Qt_Main.o Qt_endprogram.o Qt_EventReceiver.o Qt_colors.o Qt_Menues.o Qt_Fonts.o Qt_ReqType.o Qt_PopupMenu.o qcolordialog.o Qt_Bs_edit.o Qt_instruments.o Qt_PluginWidget.o Qt_MyQSlider.o Qt_SliderPainter.o Qt_memory.o Qt_path_resolver.o Qt_settings.o Qt_disk.o Qt_MainWindow.o Qt_Time.o GTK_ReqType.o GTK_PopupMenu.o Qt_soundfilesaver_widget_callbacks.o Qt_comment_dialog_callbacks.o Qt_preferences_callbacks.o Qt_tools_callbacks.o Qt_pianorollheader_callbacks.o Qt_Error.o Rational.o Qt_check_for_updates.o Qt_AutoBackups.o


#X11_MidiProperties.o  X11_ClientMessages.o 
#Qt_Bs_edit.o 

#Posix (used by linux/win/mac)
OBJ_POSIX=posix_settings.o posix_Player.o 

# Two of the following three must be set empty by the build script.
OBJ_X11 ?= X11_keyboard.o X11_disk.o X11_Qtstuff.o
OBJ_WIN ?= X11_disk.o X11_Qtstuff.o W_Keyboard.o
OBJ_MACOSX ?= X11_disk.o X11_Qtstuff.o cocoa_Keyboard.o do.o

#Python
OBJ13=radium_wrap.o api_common.o api_keyplay.o api_keyplayedit.o api_navigate.o api_noteedit.o api_support.o ad_noteadd.o wrapfunclist.o api_trackonoff.o api_zoom.o api_notemanipulate.o api_play.o api_clipboard.o api_undo.o api_various.o api_instruments.o api_requesters.o api_mouse.o

#Midi
OBJ14=disk_midi_fx.o disk_midi_i_plugin.o midi_fx.o midi_i_plugin.o midi_playfromstart.o midi_rtmidi.o RtMidi.o midi_i_input.o midi_menues.o
# alsaseq_midi.o

#Faust plugins
OBJ_FAUST=zita_rev.o stk_flute.o stk_bowed.o stk_blow_bottle.o stk_bass.o stk_blow_hole.o stk_brass.o stk_clarinet.o stk_flute_stk.o stk_glass_harmonica.o stk_harpsi.o stk_modal_bar.o stk_NLF_eks.o stk_NLF_fm.o stk_piano.o stk_saxophony.o stk_sitar.o stk_tibetan_bowl.o stk_tuned_bar.o stk_uni_bar.o stk_voice_form.o faust_tapiir.o faust_system_eq.o faust_system_lowpass.o faust_system_lowshelf.o faust_system_highshelf.o faust_system_delay.o faust_multibandcomp.o

#AUDIO
OBJ_AUDIO=audio_instrument.o SoundProducer.o Jack_plugin.o Bus_plugins.o Patchbay_plugin.o MidiMessages_plugin.o VST_plugins.o Ladspa_plugins.o Sampler_plugin.o FluidSynth_plugin.o Pd_plugin.o SoundPluginRegistry.o SoundPlugin.o Mixer.o get_windows_commandlines.o Envelope.o Resampler.o SoundFonts.o Smooth.o undo_audio_effect.o undo_pd_controllers.o undo_sample.o SoundfileSaver.o system_compressor_wrapper.o

#MultiCore.o

#Mixer
QM=mixergui/
OBJ_MIXER=QM_view.o QM_chip.o QM_MixerWidget.o undo_mixer.o undo_mixer_connections.o undo_chip_addremove.o

#OpenGL
OBJ_VL=GfxElements.o Render.o Widget.o

#Embedded scheme
OBJ_ES=scheme.o bin/packages/s7/s7_$(TARGET_OS).o s7webserver.o radium_s7_wrap.o qhttpconnection.o moc_qhttpconnection.o qhttprequest.o moc_qhttprequest.o qhttpresponse.o moc_qhttpresponse.o qhttpserver.o moc_qhttpserver.o http_parser.o

OBJ = $(OBJ_ES) $(OBJ1) $(OBJ2) $(OBJ3) $(OBJ4) $(OBJ5) $(OBJ6) $(OBJ7) $(OBJ8) $(OBJ9) $(OBJ10) $(OBJ11) $(OBJ12) $(OBJ13) $(OBJ_POSIX) $(OBJ_X11) $(OBJ_WIN) $(OBJ_MACOSX) $(OBJ14) $(OBJ_FAUST) $(OBJ_AUDIO) $(OBJ_MIXER) $(OBJ_VL)




#-------------------KARSJK-------------------------------

BUILD_DEPENDENCIES =  buildtype.opt $(CD)keyboard_sub_ids.h dependencies_ok

PROGRAM_MODULES = bin/radium bin/crashreporter bin/protoconfparser.py bin/protos.conf bin/common.py bin/X11_Qtstuff.py bin/radium_error_message
OBJECT_DEPENDENCIES = $(BUILD_DEPENDENCIES)

all:
	@echo
	@echo "Use one of the ./build_* scripts to build Radium."
	@echo


radium: $(BUILD_DEPENDENCIES) $(PROGRAM_MODULES)
	@echo
	@echo "Compilation OK."
	@echo
	@echo "Run 'bin/radium' to start radium"

very_clean: clean
	rm -f bin/packages/s7/*.o
	cd pluginhost/Builds/Linux && $(MAKE) clean && cd ../../../
	cd bin/packages && ./buildclean.sh

clean:
	rm -f *.o */*.o featurelist *~ */*~ */*~ */*/*~ core bin/core */*.pyc */*/*.pyc $(API)radium_wrap.c $(API)wrapfunclist.c $(API)radium.i $(API)radium_proc.h bin/protoconfparser.py bin/protos.conf bin/common.py bin/radium python/core bin/X11_XSendEvent bin/X11_Qtstuff.py makescript.sh $(P)Qt_instruments_widget.h $(P)Qt_midi_instrument_widget.h $(P)Qt_audio_instrument_widget.h $(P)Qt_sample_requester_widget.h $(P)Qt_control_change_widget.h $(P)mQt* $(QM)mQM* $(QM)images.cpp a.out common/keyboard_sub_ids.h w dependencies_ok buildtype.opt bin/crashreporter bin/crashreporter.exe bin/radium_error_message bin/radium_error_message.exe bin/radium.bin.exe linux_objs/* darwinx_objs/* mingw_objs/* */*/*/Juce_plugins.o bin/s7webserver/moc_s7webserver.cpp
	cd pluginhost/Builds/Linux && $(MAKE) clean

dependencies_ok: check_dependencies.sh #Makefile
	bash check_dependencies.sh `./find_python_path.sh` $(MOC) $(UIC) test_build
#	sh check_dependencies.sh $(PYTHONEXE) $(MOC) $(UIC)
	touch dependencies_ok

install:
	@echo
	@echo "make install is not supported anymore. Instead you need to launch bin/radium, or write a script that does so."
	@echo
	exit -1
	bash check_install_dependencies.sh
	install -d $(DESTDIR)$(bindir)
	install -d $(DESTDIR)$(libdir)/radium

	cp -a bin/* $(DESTDIR)$(libdir)/radium/
	rm -fr $(DESTDIR)$(libdir)/radium/packages/*
	mkdir $(DESTDIR)$(libdir)/radium/packages/xmessage-1.0.3/
	cp bin/packages/xmessage-1.0.3/xmessage $(DESTDIR)$(libdir)/radium/packages/xmessage-1.0.3/

	rm -fr $(DESTDIR)$(libdir)/radium/python2.7

	chmod -R a+rx $(DESTDIR)$(libdir)/radium/*

	echo "#!/bin/sh" >$(DESTDIR)$(bindir)/radium
	echo "cd " $(libdir)/radium >>$(DESTDIR)$(bindir)/radium
	echo "./radium" >>$(DESTDIR)$(bindir)/radium

	chmod a+rx $(DESTDIR)$(bindir)/radium

uninstall:
	rm -fr $(DESTDIR)$(libdir)/radium
	rm -f $(DESTDIR)$(bindir)/radium

run-gdb:
	./build_linux.sh -j7 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb ./radium
#./build_linux.sh -j7 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb -e ./radium -x ../gakk
#	make -j3 && cd bin && G_DEBUG=fatal-criticals QT_FATAL_WARNINGS=1 gdb --args $(PYTHONEXE) start.py keybindings.conf && cd ..          

run-valgrind:
	echo "Execute first: jackd -s -r -ddummy -r 11000 -p 2048 -w 5000000"
	$(CC) -DMEMORY_DEBUG $(CD)memory.c $(OPT)
	rm -f Mixer.o SoundProducer.o linux_objs/Mixer.o linux_objs/SoundProducer.o
#	make -j3 && cd bin && valgrind --tool=helgrind $(PYTHONEXE) start.py keybindings.conf
	BUILDTYPE=DEBUG CFLAGS="-DMEMORY_DEBUG" ./build_linux.sh -j7 && rm -f memory.o Mixer.o SoundProducer.o && cd bin && valgrind --suppressions=../valgrind-python.supp --suppressions=../Qt47supp.txt --suppressions=../libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./radium
# --dont-load-new-song
#	make -j3 && cd bin && valgrind gdb --args $(PYTHONEXE) start.py keybindings.conf
#	killall -9 X11_Qtstuff.py radium
	rm -f Mixer.o SoundProducer.o memory.o

# --tool=memcheck --read-var-info=yes --track-origins=yes

profile:
	cd bin && operf ./radium && opreport -ca |more

check: test
test: dotesting

dotesting: test_vector test_placement test_notes test_path_resolver
	$(CCC) common/threading.cpp -DTEST_THREADING -Wall -lpthread && ./a.out
	clang common/threading.cpp -DTEST_THREADING -Wall -lpthread && ./a.out
	i686-w64-mingw32-g++ common/threading.cpp -DTEST_THREADING -Wall -lpthread -o test/a.exe && cd test && wine a.exe
	@echo
	@echo " == All tests succeeded, apparently =="

test_vector:
	$(CC) -g -Wall -Werror -DTEST_VECTOR -DDEBUG -DUSE_QT_REQTYPE=1 common/vector.c common/memory.c -IQt bin/packages/gc-7.2/.libs/libgc.a -lpthread && valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

test_placement:
	$(CC) -g -Wall -Werror -DTEST_PLACEMENT -DDEBUG -DUSE_QT_REQTYPE=1 common/placement.c common/memory.c -IQt bin/packages/gc-7.2/.libs/libgc.a -lpthread && valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

test_notes:
	$(CC) -g -Wall -Werror -DTEST_NOTES -DDEBUG -DUSE_OPENGL -DUSE_QT_REQTYPE=1 common/notes.c common/memory.c -lm -IQt bin/packages/gc-7.2/.libs/libgc.a -lpthread && valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

test_path_resolver:
	$(CCC) -g -Wall -Werror -DTEST_PATH_RESOLVER -DDEBUG -DUSE_OPENGL -DUSE_QT_REQTYPE=1 -DUSE_QT4 Qt/Qt_path_resolver.cpp -lm -IQt $(QT_CFLAGS) $(QT_LDFLAGS) bin/packages/gc-7.2/.libs/libgc.a -lpthread && ./a.out
	$(CCC) -g -Wall -Werror -DTEST_PATH_RESOLVER -DDEBUG -DUSE_OPENGL -DUSE_QT_REQTYPE=1 -DUSE_QT4 Qt/Qt_path_resolver.cpp -lm -IQt $(QT_CFLAGS) $(QT_LDFLAGS) bin/packages/gc-7.2/.libs/libgc.a -lpthread && valgrind --suppressions=valgrind-python.supp --suppressions=Qt47supp.txt --suppressions=libgc.supp --tool=memcheck --leak-check=no --read-var-info=yes --track-origins=yes --fair-sched=yes ./a.out

packages: bin/packages/deletemetorebuild

bin/packages/deletemetorebuild: bin/packages/build.sh
	bash check_dependencies.sh `./find_python_path.sh` $(MOC) $(UIC) test_packages
	echo "\
	cd bin/packages;\
	./build.sh this_argument_is_not_used no \
	" >makescript.sh
	bash makescript.sh
	@echo
	@echo "packages successfully built. Now run ./build_linux.sh -j7"

start_bin.sh:
	echo "#!/bin/sh" >start_bin.sh
	echo "cd bin" >>start_bin.sh
	echo "LD_LIBRARY_PATH=../lib $(PYTHONEXE) start.py keybindings.conf $@" >>start_bin.sh
	chmod a+rx start_bin.sh

bin/radium: $(OBJ) $(MAKEFILE) bin/packages/fluidsynth-1.1.6/src/.libs/libfluidsynth.a bin/packages/libgig/src/.libs/libgig.a bin/packages/libpd-master/libs/libpds.a $(OS_DEPS)
	$(LINKER) $(OBJ) $(OS_OBJS) -o bin/radium -g -lm $(VL_LDFLAGS) $(QTLINKFLAGS) $(OS_LDFLAGS) $(RTMIDI_LDFLAGS)
#libqhttpserver.a
# -lX11 -ldl -lpthread -lfreetype -lXext
#$(LDFLAGS)

# `$(PKG) --libs fluidsynth`
#	$(LINKER) $(OBJ) $(GCDIR)/.libs/libgc.a -o bin/radium -g -lm -lpython2.6 -lpthread $(QTLINKFLAGS) $(RTMIDI_LDFLAGS) $(LDFLAGS) -fPIC

#	$(LINKER) -shared $(OBJ) $(GCDIR)/.libs/libgc.a -o bin/radiummodule.so -g -lm -lasound -L/home/kjetil/site/lib `pkg-config --libs Qt3Support` -lprofiler
# -pg 
#  -lasound

# Adding "TARGET_ARCH=-g" to prevent juce from compiling with -march=native
PLUGINHOSTOPTS = CXX=g++ TARGET_ARCH=-g

pluginhost/Builds/Linux/build/libMyPluginHost.a: audio/Juce_plugins.cpp flagopts.opt pluginhost/MyPluginHost.jucer $(API)/radium_proc.h
	if [ $(BUILDTYPE) = DEBUG ] ; then cd pluginhost/Builds/Linux && CONFIG=Debug $(PLUGINHOSTOPTS) $(MAKE) -n ; else cd pluginhost/Builds/Linux && CONFIG=Release $(PLUGINHOSTOPTS) $(MAKE) -n ; fi
	if [ $(BUILDTYPE) = DEBUG ] ; then cd pluginhost/Builds/Linux && CONFIG=Debug $(PLUGINHOSTOPTS) $(MAKE) ; else cd pluginhost/Builds/Linux && CONFIG=Release $(PLUGINHOSTOPTS) $(MAKE) ; fi
#	if [ $(BUILDTYPE) = DEBUG ] ; then cd pluginhost/Builds/Linux && CXX="clang++ -v" CONFIG=Debug $(MAKE) ; else cd pluginhost/Builds/Linux && CXX=clang++ CONFIG=Release $(MAKE) ; fi


flagopts.opt: Makefile
	echo "$(FLAGOPTS)" >flagopts.opt


$(CD)keyboard_sub_ids.h: bin/generate_keyboard_sub_ids.py bin/keysubids.py
	cd bin && $(PYTHONEXE) generate_keyboard_sub_ids.py >../$(CD)keyboard_sub_ids.h

bin/protoconfparser.py: $(API)protoconfparser.py
	echo "#This file is copied from ../api/ during make-process" >bin/protoconfparser.py
	cat $(API)protoconfparser.py >>bin/protoconfparser.py

bin/protos.conf: $(API)protos.conf
	echo "#Warning! Strange things may happen if this file is changed." >bin/protos.conf
	echo "#The file is copied from ../python/ during make-process." >>bin/protos.conf
	cat $(API)protos.conf >>bin/protos.conf

bin/common.py: $(API)common.py
	echo "#This file is copied from ../python/ during make-process." >bin/common.py
	cat $(API)common.py >>bin/common.py


bin/X11_Qtstuff.py: X11/X11_Qtstuff.py Makefile
	rm -f bin/X11_Qtstuff.py
	echo "#!$(PYTHONEXE)" >bin/X11_Qtstuff.py
	echo "" >>bin/X11_Qtstuff.py
	echo "#Do not edit, this file is automaticly generated." >>bin/X11_Qtstuff.py
	echo "" >>bin/X11_Qtstuff.py
	cat X11/X11_Qtstuff.py >>bin/X11_Qtstuff.py
	chmod a+rx bin/X11_Qtstuff.py


#-----------------COMPILING-----------------------------

windows.o:  $(BUILD_DEPENDENCIES) $(CD)windows.c 
	$(CC) $(CD)windows.c $(OPT)

list.o:  $(BUILD_DEPENDENCIES) $(CD)list.c 
	$(CC) $(CD)list.c $(OPT)

vector.o:  $(BUILD_DEPENDENCIES) $(CD)vector.c 
	$(CC) $(CD)vector.c $(OPT)

hashmap.o:  $(BUILD_DEPENDENCIES) $(CD)hashmap.c 
	$(CC) $(CD)hashmap.c $(OPT)

song.o:  $(BUILD_DEPENDENCIES) $(CD)song.c 
	$(CC) $(CD)song.c $(OPT)

blocks.o:  $(BUILD_DEPENDENCIES) $(CD)blocks.c 
	$(CC) $(CD)blocks.c $(OPT)

tracks.o:  $(BUILD_DEPENDENCIES) $(CD)tracks.c 
	$(CC) $(CD)tracks.c $(OPT)

localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)localzooms.c 
	$(CC) $(CD)localzooms.c $(OPT)

notes.o:  $(BUILD_DEPENDENCIES) $(CD)notes.c 
	$(CC) $(CD)notes.c $(OPT)

pitches.o:  $(BUILD_DEPENDENCIES) $(CD)pitches.c 
	$(CC) $(CD)pitches.c $(OPT)

wblocks.o:  $(BUILD_DEPENDENCIES) $(CD)wblocks.c 
	$(CC) $(CD)wblocks.c $(OPT)

wtracks.o:  $(BUILD_DEPENDENCIES) $(CD)wtracks.c 
	$(CC) $(CD)wtracks.c $(OPT)

sliders.o:  $(BUILD_DEPENDENCIES) $(CD)sliders.c 
	$(CC) $(CD)sliders.c $(OPT)

gfx_wblocks.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_wblocks.c 
	$(CC) $(CD)gfx_wblocks.c $(OPT)

common.o:  $(BUILD_DEPENDENCIES) $(CD)common.c 
	$(CC) $(CD)common.c $(OPT)

gfx_wtext.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_wtext.c 
	$(CC) $(CD)gfx_wtext.c $(OPT)

gfx_text.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_text.c  $(CD)visual_op_queue_proc.h
	$(CC) $(CD)gfx_text.c $(OPT)

gfx_lines.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_lines.c $(CD)visual_op_queue_proc.h
	$(CC) $(CD)gfx_lines.c $(OPT)

gfx_point.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_point.c $(CD)visual_op_queue_proc.h
	$(CC) $(CD)gfx_point.c $(OPT)

gfx_op_queue.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_op_queue_generated.c $(CD)visual_op_queue_proc.h $(CD)gfx_op_queue.c
	$(CC) $(CD)gfx_op_queue.c $(OPT)

$(CD)gfx_op_queue_generated.c: $(CD)gfx_op_queue.scm $(CD)gfx_op_queue.c
	cd $(CD) && ./gfx_op_queue.scm op-queue-code >gfx_op_queue_generated.c

$(CD)visual_op_queue_proc.h: $(CD)gfx_op_queue.scm 
	cd $(CD) && ./gfx_op_queue.scm protos >visual_op_queue_proc.h

eventreciever.o:  $(BUILD_DEPENDENCIES) $(CD)eventreciever.c $(API)radium_proc.h
	$(CC) $(CD)eventreciever.c $(OPT)

reallines.o:  $(BUILD_DEPENDENCIES) $(CD)reallines.c
	$(CC) $(CD)reallines.c $(OPT)

notestext.o:  $(BUILD_DEPENDENCIES) $(CD)notestext.c
	$(CC) $(CD)notestext.c $(OPT)

trackreallines2.o:  $(BUILD_DEPENDENCIES) $(CD)trackreallines2.c
	$(CC) $(CD)trackreallines2.c $(OPT)

debug.o:  $(BUILD_DEPENDENCIES) $(CD)debug.c
	$(CC) $(CD)debug.c $(OPT) 

memory.o:  $(BUILD_DEPENDENCIES) $(CD)memory.c
	$(GCC) $(CD)memory.c $(OPT)

placement.o:  $(BUILD_DEPENDENCIES) $(CD)placement.c
	$(CC) $(CD)placement.c $(OPT)

t_gc.o:  $(BUILD_DEPENDENCIES) $(CD)t_gc.c
	$(CC) $(CD)t_gc.c $(OPT)

cursor.o:  $(BUILD_DEPENDENCIES) $(CD)cursor.c
	$(CC) $(CD)cursor.c $(OPT)

cursor_updown.o:  $(BUILD_DEPENDENCIES) $(CD)cursor_updown.c
	$(CC) $(CD)cursor_updown.c $(OPT)

velocities.o:  $(BUILD_DEPENDENCIES) $(CD)velocities.c
	$(CC) $(CD)velocities.c $(OPT)

realline_calc.o:  $(BUILD_DEPENDENCIES) $(CD)realline_calc.c
	$(CC) $(CD)realline_calc.c $(OPT)

gfx_subtrack.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_subtrack.c
	$(CC) $(CD)gfx_subtrack.c $(OPT)

tempos.o:  $(BUILD_DEPENDENCIES) $(CD)tempos.c
	$(CC) $(CD)tempos.c $(OPT)

LPB.o:  $(BUILD_DEPENDENCIES) $(CD)LPB.c
	$(CC) $(CD)LPB.c $(OPT)

Signature.o:  $(BUILD_DEPENDENCIES) $(CD)Signature.cpp
	$(CCC) $(CD)Signature.cpp $(QTOPT)

Beats.o:  $(BUILD_DEPENDENCIES) $(CD)Beats.cpp
	$(CCC) $(CD)Beats.cpp $(QTOPT)

gfx_wtrackheaders.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_wtrackheaders.c
	$(CC) $(CD)gfx_wtrackheaders.c $(OPT)

temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)temponodes.c
	$(CC) $(CD)temponodes.c $(OPT)

instruments.o:  $(BUILD_DEPENDENCIES) $(CD)instruments.c
	$(CC) $(CD)instruments.c $(OPT)

fxlines.o:  $(BUILD_DEPENDENCIES) $(CD)fxlines.c
	$(CC) $(CD)fxlines.c $(OPT)


tbox.o:  $(BUILD_DEPENDENCIES) $(CD)tbox.c
	$(CC) $(CD)tbox.c $(OPT)


area.o:  $(BUILD_DEPENDENCIES) $(CD)area.c
	$(CC) $(CD)area.c $(OPT)

nodelines.o:  $(BUILD_DEPENDENCIES) $(CD)nodelines.c
	$(CC) $(CD)nodelines.c $(OPT)

range.o:  $(BUILD_DEPENDENCIES) $(CD)range.c
	$(CC) $(CD)range.c $(OPT)

blocklist.o:  $(BUILD_DEPENDENCIES) $(CD)blocklist.c
	$(CC) $(CD)blocklist.c $(OPT)

time.o:  $(BUILD_DEPENDENCIES) $(CD)time.c
	$(CC) $(CD)time.c $(OPT) 

reltempo.o:  $(BUILD_DEPENDENCIES) $(CD)reltempo.c
	$(CC) $(CD)reltempo.c $(OPT)


#player source-files.

Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) $(CD)Ptask2Mtask.c $(CD)playerclass.h
	$(CC) $(CD)Ptask2Mtask.c $(OPT) 

player.o:  $(BUILD_DEPENDENCIES) $(CD)player.c $(CD)playerclass.h
	$(CC) $(CD)player.c $(OPT)

scheduler.o:  $(BUILD_DEPENDENCIES) $(CD)scheduler.c
	$(CC) $(CD)scheduler.c $(OPT)

PEQrealline.o:  $(BUILD_DEPENDENCIES) $(CD)PEQrealline.c $(CD)playerclass.h
	$(CC) $(CD)PEQrealline.c $(OPT) 

PEQline.o:  $(BUILD_DEPENDENCIES) $(CD)PEQline.c $(CD)playerclass.h
	$(CC) $(CD)PEQline.c $(OPT) 

PEQmempool.o:  $(BUILD_DEPENDENCIES) $(CD)PEQmempool.c $(CD)playerclass.h
	$(GCC) $(CD)PEQmempool.c $(OPT) 

PEQblock.o:  $(BUILD_DEPENDENCIES) $(CD)PEQblock.c $(CD)playerclass.h
	$(CC) $(CD)PEQblock.c $(OPT)

PEQnotes.o:  $(BUILD_DEPENDENCIES) $(CD)PEQnotes.c $(CD)playerclass.h
	$(CC) $(CD)PEQnotes.c $(OPT)

PEQcommon.o:  $(BUILD_DEPENDENCIES) $(CD)PEQcommon.c $(CD)playerclass.h
	$(CC) $(CD)PEQcommon.c $(OPT)

playerclass.o:  $(BUILD_DEPENDENCIES) $(CD)playerclass.c $(CD)playerclass.h
	$(CC) $(CD)playerclass.c $(OPT)

player_startstop.o:  $(BUILD_DEPENDENCIES) $(CD)player_startstop.c $(CD)playerclass.h
	$(GCC) $(CD)player_startstop.c $(OPT)

PEQvelocities.o:  $(BUILD_DEPENDENCIES) $(CD)PEQvelocities.c
	$(CC) $(CD)PEQvelocities.c $(OPT)

PEQpitches.o:  $(BUILD_DEPENDENCIES) $(CD)PEQpitches.c
	$(CC) $(CD)PEQpitches.c $(OPT)

PEQ_calc.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_calc.c
	$(CC) $(CD)PEQ_calc.c $(OPT)

PEQfxs.o:  $(BUILD_DEPENDENCIES) $(CD)PEQfxs.c
	$(CC) $(CD)PEQfxs.c $(OPT)

patch.o:  $(BUILD_DEPENDENCIES) $(CD)patch.c $(CD)nsmtracker.h
	$(CC) $(CD)patch.c $(OPT)

clipboard_range.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range.c $(CD)clipboard_range.h
	$(CC) $(CD)clipboard_range.c $(OPT)

clipboard_range_calc.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_calc.c $(CD)clipboard_range.h
	$(CC) $(CD)clipboard_range_calc.c $(OPT)

clipboard_range_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_copy.c $(CD)clipboard_range.h
	$(CC) $(CD)clipboard_range_copy.c $(OPT)

clipboard_range_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_paste.c $(CD)clipboard_range.h
	$(CC) $(CD)clipboard_range_paste.c $(OPT)

clipboard_range_cut.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_range_cut.c $(CD)clipboard_range.h
	$(CC) $(CD)clipboard_range_cut.c $(OPT)

player_pause.o:  $(BUILD_DEPENDENCIES) $(CD)player_pause.c $(CD)playerclass.h
	$(CC) $(CD)player_pause.c $(OPT)

PEQ_type.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_type.c $(CD)playerclass.h
	$(CC) $(CD)PEQ_type.c $(OPT)


transpose.o:  $(BUILD_DEPENDENCIES) $(CD)transpose.c
	$(CC) $(CD)transpose.c $(OPT)



disk_wblock.o:  $(BUILD_DEPENDENCIES) $(CD)disk_wblock.c $(CD)disk.h
	$(CC) $(CD)disk_wblock.c $(OPT)


disk_localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)disk_localzooms.c $(CD)disk.h
	$(CC) $(CD)disk_localzooms.c $(OPT)


disk_track.o:  $(BUILD_DEPENDENCIES) $(CD)disk_track.c $(CD)disk.h
	$(CC) $(CD)disk_track.c $(OPT)

disk_fx.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fx.c $(CD)disk.h
	$(CC) $(CD)disk_fx.c $(OPT)

disk_fxnodelines.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fxnodelines.c $(CD)disk.h
	$(CC) $(CD)disk_fxnodelines.c $(OPT)

disk_wtrack.o:  $(BUILD_DEPENDENCIES) $(CD)disk_wtrack.c $(CD)disk.h
	$(CC) $(CD)disk_wtrack.c $(OPT)

disk_temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)disk_temponodes.c $(CD)disk.h
	$(CC) $(CD)disk_temponodes.c $(OPT)

disk_tempos.o:  $(BUILD_DEPENDENCIES) $(CD)disk_tempos.c $(CD)disk.h
	$(CC) $(CD)disk_tempos.c $(OPT)

disk_song.o:  $(BUILD_DEPENDENCIES) $(CD)disk_song.c $(CD)disk.h
	$(CC) $(CD)disk_song.c $(OPT)

disk_velocities.o:  $(BUILD_DEPENDENCIES) $(CD)disk_velocities.c $(CD)disk.h
	$(CC) $(CD)disk_velocities.c $(OPT)

disk_block.o:  $(BUILD_DEPENDENCIES) $(CD)disk_block.c $(CD)disk.h
	$(CC) $(CD)disk_block.c $(OPT)

disk_placement.o:  $(BUILD_DEPENDENCIES) $(CD)disk_placement.c $(CD)disk.h
	$(CC) $(CD)disk_placement.c $(OPT)

disk_stops.o:  $(BUILD_DEPENDENCIES) $(CD)disk_stops.c $(CD)disk.h
	$(CC) $(CD)disk_stops.c $(OPT)

disk_playlist.o:  $(BUILD_DEPENDENCIES) $(CD)disk_playlist.c $(CD)disk.h
	$(CC) $(CD)disk_playlist.c $(OPT)

disk_root.o:  $(BUILD_DEPENDENCIES) $(CD)disk_root.c $(CD)disk.h
	$(CC) $(CD)disk_root.c $(OPT)

disk_notes.o:  $(BUILD_DEPENDENCIES) $(CD)disk_notes.c $(CD)disk.h
	$(CC) $(CD)disk_notes.c $(OPT)

disk_lpbs.o:  $(BUILD_DEPENDENCIES) $(CD)disk_lpbs.c $(CD)disk.h
	$(CC) $(CD)disk_lpbs.c $(OPT)

disk_signatures.o:  $(BUILD_DEPENDENCIES) $(CD)disk_signatures.c $(CD)disk.h
	$(CC) $(CD)disk_signatures.c $(OPT)

disk_windows.o:  $(BUILD_DEPENDENCIES) $(CD)disk_windows.c $(CD)disk.h
	$(CC) $(CD)disk_windows.c $(OPT)

disk_fxs.o:  $(BUILD_DEPENDENCIES) $(CD)disk_fxs.c $(CD)disk.h
	$(CC) $(CD)disk_fxs.c $(OPT)

disk.o:  $(BUILD_DEPENDENCIES) $(CD)disk.c $(CD)disk.h
	$(CC) $(CD)disk.c $(OPT)

disk_warea.o:  $(BUILD_DEPENDENCIES) $(CD)disk_warea.c $(CD)disk.h
	$(CC) $(CD)disk_warea.c $(OPT)

disk_save.o:  $(BUILD_DEPENDENCIES) $(CD)disk_save.c config/config.h
	$(CC) $(CD)disk_save.c $(OPT)

disk_load.o:  $(BUILD_DEPENDENCIES) $(CD)disk_load.c config/config.h
	$(GCC) $(CD)disk_load.c $(OPT)

control.o:  $(BUILD_DEPENDENCIES) $(CD)control.c
	$(CC) $(CD)control.c $(OPT)

disk_instrument.o:  $(BUILD_DEPENDENCIES) $(CD)disk_instrument.c $(CD)disk.h
	$(CC) $(CD)disk_instrument.c $(OPT)

disk_patches.o:  $(BUILD_DEPENDENCIES) $(CD)disk_patches.c $(CD)disk.h
	$(CC) $(CD)disk_patches.c $(OPT)

disk_slider.o:  $(BUILD_DEPENDENCIES) $(CD)disk_slider.c
	$(CC) $(CD)disk_slider.c $(OPT)

clipboard_track_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_copy.c
	$(CC) $(CD)clipboard_track_copy.c $(OPT)

clipboard_track_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_paste.c
	$(CC) $(CD)clipboard_track_paste.c $(OPT)

clipboard_track_cut.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_track_cut.c
	$(CC) $(CD)clipboard_track_cut.c $(OPT)

lines.o:  $(BUILD_DEPENDENCIES) $(CD)lines.c
	$(CC) $(CD)lines.c $(OPT)

notes_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)notes_legalize.c
	$(CC) $(CD)notes_legalize.c $(OPT)

temponodes_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)temponodes_legalize.c
	$(CC) $(CD)temponodes_legalize.c $(OPT)

fxlines_legalize.o:  $(BUILD_DEPENDENCIES) $(CD)fxlines_legalize.c
	$(CC) $(CD)fxlines_legalize.c $(OPT)

reallines_insert.o:  $(BUILD_DEPENDENCIES) $(CD)reallines_insert.c
	$(CC) $(CD)reallines_insert.c $(OPT)

block_properties.o:  $(BUILD_DEPENDENCIES) $(CD)block_properties.c
	$(CC) $(CD)block_properties.c $(OPT)

clipboard_tempos_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_tempos_copy.c
	$(CC) $(CD)clipboard_tempos_copy.c $(OPT)

font.o:  $(BUILD_DEPENDENCIES) $(CD)font.c
	$(CC) $(CD)font.c $(OPT)

clipboard_localzooms.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_localzooms.c
	$(CC) $(CD)clipboard_localzooms.c $(OPT)

clipboard_block_copy.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_block_copy.c
	$(CC) $(CD)clipboard_block_copy.c $(OPT)

clipboard_block_paste.o:  $(BUILD_DEPENDENCIES) $(CD)clipboard_block_paste.c
	$(CC) $(CD)clipboard_block_paste.c $(OPT)

undo.o:  $(BUILD_DEPENDENCIES) $(CD)undo.c $(CD)undo.h
	$(CC) $(CD)undo.c $(OPT) -DMAX_NUM_UNDOS=$(MAX_NUM_UNDOS)

undo_notes.o:  $(BUILD_DEPENDENCIES) $(CD)undo_notes.c $(CD)undo.h
	$(CC) $(CD)undo_notes.c $(OPT)

undo_fxs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_fxs.c $(CD)undo.h
	$(CC) $(CD)undo_fxs.c $(OPT)

undo_temponodes.o:  $(BUILD_DEPENDENCIES) $(CD)undo_temponodes.c $(CD)undo.h
	$(CC) $(CD)undo_temponodes.c $(OPT)

undo_tempos.o:  $(BUILD_DEPENDENCIES) $(CD)undo_tempos.c $(CD)undo.h
	$(CC) $(CD)undo_tempos.c $(OPT)

undo_lpbs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_lpbs.c $(CD)undo.h
	$(CC) $(CD)undo_lpbs.c $(OPT)

undo_signatures.o:  $(BUILD_DEPENDENCIES) $(CD)undo_signatures.c $(CD)undo.h
	$(CC) $(CD)undo_signatures.c $(OPT)

undo_notesandfxs.o:  $(BUILD_DEPENDENCIES) $(CD)undo_notesandfxs.c $(CD)undo.h
	$(CC) $(CD)undo_notesandfxs.c $(OPT)

undo_reallines.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reallines.c $(CD)undo.h
	$(CC) $(CD)undo_reallines.c $(OPT)

undo_tracks.o:  $(BUILD_DEPENDENCIES) $(CD)undo_tracks.c $(CD)undo.h
	$(CC) $(CD)undo_tracks.c $(OPT)

undo_range.o:  $(BUILD_DEPENDENCIES) $(CD)undo_range.c
	$(CC) $(CD)undo_range.c $(OPT)

undo_blocks.o:  $(BUILD_DEPENDENCIES) $(CD)undo_blocks.c
	$(CC) $(CD)undo_blocks.c $(OPT)

PEQ_calc_64bit.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_calc_64bit.c
	$(CC) $(CD)PEQ_calc_64bit.c $(OPT)

track_insert.o:  $(BUILD_DEPENDENCIES) $(CD)track_insert.c
	$(CC) $(CD)track_insert.c $(OPT)

quantitize.o:  $(BUILD_DEPENDENCIES) $(CD)quantitize.c
	$(CC) $(CD)quantitize.c $(OPT)

gfx_wtrackheader_volpan.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_wtrackheader_volpan.c
	$(CC) $(CD)gfx_wtrackheader_volpan.c $(OPT)

undo_trackheader.o:  $(BUILD_DEPENDENCIES) $(CD)undo_trackheader.c
	$(CC) $(CD)undo_trackheader.c $(OPT)

undo_reltempomax.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reltempomax.c
	$(CC) $(CD)undo_reltempomax.c $(OPT)

undo_maintempos.o:  $(BUILD_DEPENDENCIES) $(CD)undo_maintempos.c
	$(CC) $(CD)undo_maintempos.c $(OPT)

undo_playlist.o:  $(BUILD_DEPENDENCIES) $(CD)undo_playlist.c
	$(CC) $(CD)undo_playlist.c $(OPT)

undo_patch.o:  $(BUILD_DEPENDENCIES) $(CD)undo_patch.c
	$(CC) $(CD)undo_patch.c $(OPT)

undo_patchvoice.o:  $(BUILD_DEPENDENCIES) $(CD)undo_patchvoice.c
	$(CC) $(CD)undo_patchvoice.c $(OPT)

undo_patchname.o:  $(BUILD_DEPENDENCIES) $(CD)undo_patchname.c
	$(CC) $(CD)undo_patchname.c $(OPT)

window_config.o:  $(BUILD_DEPENDENCIES) $(CD)window_config.c
	$(CC) $(CD)window_config.c $(OPT)

PEQ_clock.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_clock.c $(CD)playerclass.h
	$(CC) $(CD)PEQ_clock.c $(OPT)

PEQ_LPB.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_LPB.c $(CD)playerclass.h
	$(CC) $(CD)PEQ_LPB.c $(OPT)

PEQ_Signature.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_Signature.c $(CD)playerclass.h
	$(CC) $(CD)PEQ_Signature.c $(OPT)

PEQ_Beats.o:  $(BUILD_DEPENDENCIES) $(CD)PEQ_Beats.c $(CD)playerclass.h
	$(CC) $(CD)PEQ_Beats.c $(OPT)

block_insert.o:  $(BUILD_DEPENDENCIES) $(CD)block_insert.c
	$(CC) $(CD)block_insert.c $(OPT)

block_delete.o:  $(BUILD_DEPENDENCIES) $(CD)block_delete.c
	$(CC) $(CD)block_delete.c $(OPT)

undo_block_insertdelete.o:  $(BUILD_DEPENDENCIES) $(CD)undo_block_insertdelete.c
	$(CC) $(CD)undo_block_insertdelete.c $(OPT)

track_onoff.o:  $(BUILD_DEPENDENCIES) $(CD)track_onoff.c
	$(CC) $(CD)track_onoff.c $(OPT)

backwards.o:  $(BUILD_DEPENDENCIES) $(CD)new/backwards.c
	$(CC) $(CD)new/backwards.c $(OPT)

invert.o:  $(BUILD_DEPENDENCIES) $(CD)new/invert.c
	$(CC) $(CD)new/invert.c $(OPT)

gfx_slider.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_slider.c
	$(CC) $(CD)gfx_slider.c $(OPT)

gfx_wblocks_reltempo.o:  $(BUILD_DEPENDENCIES) $(CD)gfx_wblocks_reltempo.c
	$(CC) $(CD)gfx_wblocks_reltempo.c $(OPT)

undo_reltemposlider.o:  $(BUILD_DEPENDENCIES) $(CD)undo_reltemposlider.c
	$(CC) $(CD)undo_reltemposlider.c $(OPT)

error.o:  $(BUILD_DEPENDENCIES) $(CD)error.c
	$(CC) $(CD)error.c $(OPT)

threading.o:  $(BUILD_DEPENDENCIES)  $(CD)threading.cpp
	$(CCC)  $(CD)threading.cpp $(CPPOPT)

Semaphores.o: $(BUILD_DEPENDENCIES) $(CD)/Semaphores.cpp $(CD)/sema.h common/Semaphores.hpp common/OS_Semaphores.h
	$(CCC) $(CD)Semaphores.cpp $(QTOPT)

stacktoucher.o: $(CD)stacktoucher.c
	$(CC) -O0 $(CD)stacktoucher.c -c -O0


X11_Main.o:  $(BUILD_DEPENDENCIES) $(P)X11_Main.c 
	$(CC) $(P)X11_Main.c $(OPT)

X11_visual.o:  $(BUILD_DEPENDENCIES) $(P)X11_visual.c 
	$(CC) $(P)X11_visual.c $(OPT) 

X11_error.o:  $(BUILD_DEPENDENCIES) X11/X11_error.c 
	$(CC) X11/X11_error.c $(OPT)

W_Error.o:  $(BUILD_DEPENDENCIES) windows/W_Error.c 
	$(CC) windows/W_Error.c $(OPT)

W_Keyboard.o:  $(BUILD_DEPENDENCIES) windows/W_Keyboard.c 
	$(CC) windows/W_Keyboard.c $(OPT)

cocoa_Keyboard.o:  $(BUILD_DEPENDENCIES) macosx/cocoa_Keyboard.m
	$(CC) macosx/cocoa_Keyboard.m $(OPT)

X11_Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) X11/X11_Ptask2Mtask.c 
	$(CC) X11/X11_Ptask2Mtask.c $(OPT)

X11_Bs_edit.o:  $(BUILD_DEPENDENCIES) X11/X11_Bs_edit.c 
	$(CC) X11/X11_Bs_edit.c $(OPT)

X11_endprogram.o:  $(BUILD_DEPENDENCIES) $(P)X11_endprogram.c 
	$(CC) $(P)X11_endprogram.c $(OPT)

X11_disk.o:  $(BUILD_DEPENDENCIES) X11/X11_disk.c 
	$(CC) X11/X11_disk.c $(OPT)

posix_Player.o:  $(BUILD_DEPENDENCIES) posix/posix_Player.c 
	$(CC) posix/posix_Player.c $(OPT)

X11_ReqType.o:  $(BUILD_DEPENDENCIES) X11/X11_ReqType.c 
	$(CC) X11/X11_ReqType.c $(OPT)

X11_Qtstuff.o:  $(BUILD_DEPENDENCIES) X11/X11_Qtstuff.c 
	$(CC) X11/X11_Qtstuff.c $(OPT)

X11_instrument.o:  $(BUILD_DEPENDENCIES) X11/X11_instrument.c
	$(CC) X11/X11_instrument.c $(OPT)

X11_keyboard.o:  $(BUILD_DEPENDENCIES) X11/X11_keyboard.c
	$(CC) X11/X11_keyboard.c $(OPT)

#X11_MidiProperties.o:  $(BUILD_DEPENDENCIES) X11/X11_MidiProperties.c
#	$(CC) X11/X11_MidiProperties.c $(OPT) 

#X11_ClientMessages.o:  $(BUILD_DEPENDENCIES) X11/X11_ClientMessages.c
#	$(CC) X11/X11_ClientMessages.c $(OPT)

$(P)EditorWidget.h: $(BUILD_DEPENDENCIES)

Qt_Main.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Main.cpp $(P)EditorWidget.h $(P)Qt_instruments_proc.h
	$(GPLUSPLUS) $(P)Qt_Main.cpp $(QTOPT) -Wno-error $(IS_LINUX_BINARY)

Qt_visual.o:  $(BUILD_DEPENDENCIES) $(P)Qt_visual.cpp $(P)EditorWidget.h $(CD)visual_op_queue_proc.h
	$(CCC) $(P)Qt_visual.cpp $(QTOPT)

GTK_visual.o:  $(BUILD_DEPENDENCIES) GTK/GTK_visual.c  $(CD)visual_op_queue_proc.h
	$(CC) GTK/GTK_visual.c $(OPT) $(GTK_CFLAGS)

GTK_ReqType.o:  $(BUILD_DEPENDENCIES) GTK/GTK_ReqType.c 
	$(CC) GTK/GTK_ReqType.c $(OPT) $(GTK_CFLAGS)

GTK_PopupMenu.o:  $(BUILD_DEPENDENCIES) GTK/GTK_PopupMenu.c 
	$(CC) GTK/GTK_PopupMenu.c $(OPT) $(GTK_CFLAGS)


Qt_Ptask2Mtask.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Ptask2Mtask.cpp $(P)EditorWidget.h
	$(CC) $(P)Qt_Ptask2Mtask.cpp $(OPT)

Qt_endprogram.o:  $(BUILD_DEPENDENCIES) $(P)Qt_endprogram.c $(P)EditorWidget.h
	$(CC) $(P)Qt_endprogram.c $(OPT)

Qt_Player.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Player.c $(P)EditorWidget.h
	$(CC) $(P)Qt_Player.c $(OPT)

Qt_EventReceiver.o:  $(BUILD_DEPENDENCIES) $(P)Qt_EventReceiver.cpp $(P)EditorWidget.h
	$(CCC) $(P)Qt_EventReceiver.cpp $(QTOPT)

Qt_colors.o:  $(BUILD_DEPENDENCIES) $(P)Qt_colors.cpp $(P)mQt_colors.cpp
	$(CCC) $(P)Qt_colors.cpp $(QTOPT)

$(P)mQt_colors.cpp: $(P)Qt_colors.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_colors.cpp >$(P)mQt_colors.cpp

Qt_Menues.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Menues.cpp $(P)mQt_Menues.cpp
	$(CCC) $(P)Qt_Menues.cpp $(QTOPT)

$(P)mQt_Menues.cpp: $(P)Qt_Menues.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_Menues.cpp >$(P)mQt_Menues.cpp

Qt_Fonts.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Fonts.cpp
	$(CCC) $(P)Qt_Fonts.cpp $(QTOPT)

Qt_ReqType.o:  $(BUILD_DEPENDENCIES) $(P)Qt_ReqType.cpp
	$(CCC) $(P)Qt_ReqType.cpp $(QTOPT)

Qt_PopupMenu.o:  $(BUILD_DEPENDENCIES) $(P)Qt_PopupMenu.cpp
	$(CCC) $(P)Qt_PopupMenu.cpp $(QTOPT)

Qt_MainWindow.o:  $(BUILD_DEPENDENCIES) $(P)Qt_MainWindow.cpp $(P)Qt_bottom_bar_widget.h $(P)Qt_bottom_bar_widget_callbacks.h $(P)Qt_upperleft_widget.h $(P)Qt_upperleft_widget_callbacks.h $(P)Qt_audio_instrument_widget.h $(P)Rational.h $(P)lzqlineedit.h
	$(CCC) $(P)Qt_MainWindow.cpp $(QTOPT)

Qt_Time.o:  $(BUILD_DEPENDENCIES) $(P)Qt_Time.cpp
	$(CCC) $(P)Qt_Time.cpp $(QTOPT)

#QD = /home/kjetil/site/src/qt-x11-free-3.3.8b/src/dialogs/
QD = $(P)

# Compile our own (modified) version of the qcolordialog in order to show real time update of colors.
# (it was surprisingly simple to do this. I just had to copy the file. No editing or use of custom compiler flags was needed.)
qcolordialog.o:  $(BUILD_DEPENDENCIES) $(QD)qcolordialog.cpp
	$(MOC) $(QD)qcolordialog.h >$(QD)qcolordialog.moc
	$(MOC) $(QD)qcolordialog.cpp >>$(QD)qcolordialog.moc
	$(CCC) $(QD)qcolordialog.cpp $(QTOPT) -Wno-error -I.

Qt_Bs_edit.o: $(BUILD_DEPENDENCIES) $(P)Qt_Bs_edit.cpp $(P)mQt_Bs_edit.cpp
	$(CCC) $(P)Qt_Bs_edit.cpp $(QTOPT)

$(P)mQt_Bs_edit.cpp: $(P)Qt_Bs_edit.cpp $(BUILD_DEPENDENCIES)
	$(MOC) $(P)Qt_Bs_edit.cpp >$(P)mQt_Bs_edit.cpp

INSTRUMENTS_DEPENDENCIES = $(P)Qt_instruments_widget.h $(P)Qt_midi_instrument_widget.h $(P)Qt_audio_instrument_widget.h $(P)Qt_sample_requester_widget.h $(P)Qt_no_instrument_widget.h $(P)Qt_control_change_widget.h $(P)Qt_vst_paths_widget.h $(P)Qt_plugin_widget.h $(P)Qt_pd_plugin_widget.h $(P)Qt_jack_plugin_widget.h $(P)Qt_pd_controller_widget.h $(P)Qt_compressor_widget.h $(P)Qt_MyQSlider.h $(P)Qt_MyQCheckBox.h $(P)Qt_MyQButton.h $(P)create_source_from_ui.sh $(P)undo_instruments_widget.cpp $(P)undo_instruments_widget_proc.h $(P)Qt_PluginWidget.h $(P)MySliderPainterPainter.h $(P)Qt_MyWidget.h $(P)Qt_mix_colors.h $(P)Qt_audio_instrument_widget_callbacks.h

# $(P)midi_instrument_widget.ui.h $(P)control_change_widget.ui.h $(P)instruments_widget.ui.h
Qt_instruments.o: $(BUILD_DEPENDENCIES) $(P)Qt_instruments.cpp $(INSTRUMENTS_DEPENDENCIES)
	$(CCC) $(P)Qt_instruments.cpp $(QTOPT)

$(P)Qt_instruments_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_instruments_widget.ui $(P)create_source_from_ui.sh $(P)Qt_instruments_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) instruments_widget

$(P)Qt_midi_instrument_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_midi_instrument_widget.ui $(P)create_source_from_ui.sh $(P)Qt_midi_instrument_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) midi_instrument_widget

$(P)Qt_audio_instrument_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_audio_instrument_widget.ui $(P)create_source_from_ui.sh $(P)Qt_audio_instrument_widget_callbacks.h $(P)Qt_patch_widget.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) audio_instrument_widget

$(P)Qt_patch_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_patch_widget.ui $(P)create_source_from_ui.sh $(P)Qt_patch_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) patch_widget

$(P)Qt_sample_requester_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_sample_requester_widget.ui $(P)create_source_from_ui.sh $(P)Qt_sample_requester_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) sample_requester_widget

$(P)Qt_no_instrument_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_no_instrument_widget.ui $(P)create_source_from_ui.sh $(P)Qt_no_instrument_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) no_instrument_widget

$(P)Qt_control_change_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_control_change_widget.ui $(P)create_source_from_ui.sh $(P)Qt_control_change_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) control_change_widget

$(P)Qt_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_plugin_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) plugin_widget

$(P)Qt_pd_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_pd_plugin_widget_callbacks.h $(P)Qt_pd_controller_widget.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_plugin_widget

$(P)Qt_jack_plugin_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_jack_plugin_widget.ui $(P)create_source_from_ui.sh $(P)Qt_jack_plugin_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) jack_plugin_widget

$(P)Qt_pd_controller_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_controller_widget.ui $(P)create_source_from_ui.sh $(P)Qt_pd_controller_widget_callbacks.h $(P)Qt_pd_controller_config_dialog.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_controller_widget

$(P)Qt_pd_controller_config_dialog.h:  $(BUILD_DEPENDENCIES) $(P)qt4_pd_controller_config_dialog.ui $(P)create_source_from_ui.sh $(P)Qt_pd_controller_config_dialog_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pd_controller_config_dialog

$(P)Qt_compressor_widget.h:  $(BUILD_DEPENDENCIES) $(P)qt4_compressor_widget.ui $(P)create_source_from_ui.sh $(P)Qt_compressor_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) compressor_widget

$(P)Qt_bottom_bar_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_bottom_bar_widget.ui $(P)create_source_from_ui.sh $(P)Qt_bottom_bar_widget_callbacks.h $(P)Qt_MyQButton.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) bottom_bar_widget

$(P)Qt_upperleft_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_upperleft_widget.ui $(P)create_source_from_ui.sh $(P)Qt_upperleft_widget_callbacks.h $(P)Qt_MyQButton.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) upperleft_widget

$(P)Qt_vst_paths_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_vst_paths_widget.ui $(P)create_source_from_ui.sh $(P)Qt_vst_paths_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) vst_paths_widget
#	cd $(P) && $(UIC) qt4_vst_paths_widget.ui > Qt_vst_paths_widget.h
#	cd $(P) && $(MOC) Qt_vst_paths_widget_callbacks.h >mQt_vst_paths_widget_callbacks.h

$(P)Qt_mixer_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_mixer_widget.ui $(P)create_source_from_ui.sh $(P)Qt_mixer_widget_callbacks.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) mixer_widget

Qt_soundfilesaver_widget_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_soundfilesaver_widget_callbacks.cpp $(P)Qt_soundfilesaver_widget.h
	$(CCC) $(P)Qt_soundfilesaver_widget_callbacks.cpp $(QTOPT)

$(P)Qt_soundfilesaver_widget.h: $(BUILD_DEPENDENCIES) $(P)qt4_soundfilesaver_widget.ui $(P)Qt_soundfilesaver_widget_callbacks.cpp
	cd $(P) && $(UIC) qt4_soundfilesaver_widget.ui | sed s/protected/public/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: > Qt_soundfilesaver_widget.h
	cd $(P) && $(MOC) Qt_soundfilesaver_widget_callbacks.cpp >mQt_soundfilesaver_widget_callbacks.cpp

Qt_comment_dialog_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_comment_dialog_callbacks.cpp $(P)Qt_comment_dialog.h
	$(CCC) $(P)Qt_comment_dialog_callbacks.cpp $(QTOPT)

$(P)Qt_comment_dialog.h: $(BUILD_DEPENDENCIES) $(P)qt4_comment_dialog.ui $(P)Qt_comment_dialog_callbacks.cpp
	cd $(P) && $(UIC) qt4_comment_dialog.ui | sed s/protected/public/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: > Qt_comment_dialog.h
	cd $(P) && $(MOC) Qt_comment_dialog_callbacks.cpp >mQt_comment_dialog_callbacks.cpp

Qt_preferences_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_preferences_callbacks.cpp $(P)Qt_preferences.h $(API)radium_proc.h
	$(CCC) $(P)Qt_preferences_callbacks.cpp $(QTOPT)

$(P)Qt_preferences.h: $(BUILD_DEPENDENCIES) $(P)qt4_preferences.ui $(P)Qt_preferences_callbacks.cpp
	cd $(P) && $(UIC) qt4_preferences.ui | sed s/protected/public/ | sed s/QSpinBox/MyQSpinBox/ | sed s/QDoubleSpinBox/FocusSnifferQDoubleSpinBox/ | sed s:\#include\ \<QtGui/FocusSnifferQDoubleSpinBox\>://\ \ qspingox.h: | sed s:\#include\ \<QtGui/MyQSpinBox\>://\ \ qspingox.h: > Qt_preferences.h
	cd $(P) && $(MOC) Qt_preferences_callbacks.cpp >mQt_preferences_callbacks.cpp

Qt_tools_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_tools_callbacks.cpp $(P)Qt_tools_callbacks.h $(P)Qt_tools.h
	$(CCC) $(P)Qt_tools_callbacks.cpp $(QTOPT)

$(P)Qt_tools.h: $(BUILD_DEPENDENCIES) $(P)qt4_tools.ui $(P)Qt_tools_callbacks.h $(P)lzqlineedit.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) tools

Qt_pianorollheader_callbacks.o: $(BUILD_DEPENDENCIES) $(P)Qt_pianorollheader_callbacks.cpp $(P)Qt_pianorollheader_callbacks.h $(P)Qt_pianorollheader.h
	$(CCC) $(P)Qt_pianorollheader_callbacks.cpp $(QTOPT)

$(P)Qt_pianorollheader.h: $(BUILD_DEPENDENCIES) $(P)qt4_pianorollheader.ui $(P)Qt_pianorollheader_callbacks.h $(P)lzqlineedit.h
	cd $(P) && ./create_source_from_ui.sh $(UIC) $(MOC) pianorollheader

Qt_PluginWidget.o: $(BUILD_DEPENDENCIES) $(P)Qt_PluginWidget.cpp $(P)mQt_PluginWidget.cpp $(P)Qt_audio_instrument_widget.h $(P)Qt_sample_requester_widget.h $(P)mQt_PluginWidget.cpp $(P)Qt_MyQSlider.h
	$(CCC) $(P)Qt_PluginWidget.cpp $(QTOPT)

$(P)mQt_PluginWidget.cpp: $(P)Qt_PluginWidget.h
	cd $(P) && $(MOC) Qt_PluginWidget.h >mQt_PluginWidget.cpp

Qt_MyQSlider.o: $(BUILD_DEPENDENCIES) $(P)Qt_MyQSlider.h $(P)Qt_MyQSlider.cpp
	$(CCC) $(P)Qt_MyQSlider.cpp $(QTOPT)

Qt_SliderPainter.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_SliderPainter.cpp $(P)MySliderPainterPainter.h
	$(CCC) $(P)Qt_SliderPainter.cpp $(QTOPT)

Qt_memory.o:  $(BUILD_DEPENDENCIES)  $(P)Qt_memory.cpp
	$(CCC)  $(P)Qt_memory.cpp $(CPPOPT)

Qt_path_resolver.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_path_resolver.cpp
	$(CCC) $(P)Qt_path_resolver.cpp $(QTOPT)

Qt_settings.o: $(BUILD_DEPENDENCIES) $(P)EditorWidget.h $(P)Qt_settings.cpp
	$(CCC) $(P)Qt_settings.cpp $(QTOPT)

Qt_disk.o: $(BUILD_DEPENDENCIES) $(P)Qt_disk.cpp
	$(CCC) $(P)Qt_disk.cpp $(QTOPT)

Qt_Error.o: $(BUILD_DEPENDENCIES) $(P)Qt_Error.cpp
	$(CCC) $(P)Qt_Error.cpp $(QTOPT)

bin/radium_error_message: $(P)Qt_Error.cpp $(P)EditorWidget.h
	$(CCC) -Wall -Werror $(P)Qt_Error.cpp $(CPPOPT) -DCOMPILE_EXECUTABLE `$(PKG) --cflags QtGui` -o errormessagebin.o
	$(LINKER) errormessagebin.o -o bin/radium_error_message `$(PKG) --libs QtGui`
	rm errormessagebin.o

Rational.o: $(BUILD_DEPENDENCIES) $(P)Rational.cpp
	$(CCC) $(P)Rational.cpp $(QTOPT)

Qt_check_for_updates.o: $(BUILD_DEPENDENCIES) $(P)Qt_check_for_updates.cpp
	$(MOC) $(P)/Qt_check_for_updates.cpp >$(P)/mQt_check_for_updates.cpp
	$(CCC) $(P)Qt_check_for_updates.cpp $(QTOPT) -DVERSION=\"$(VERSION)\"

Qt_AutoBackups.o: $(BUILD_DEPENDENCIES) $(P)Qt_AutoBackups.cpp
	$(CCC) $(P)Qt_AutoBackups.cpp $(QTOPT) -DVERSION=\"$(VERSION)\"

posix_settings.o:  $(BUILD_DEPENDENCIES) posix/posix_settings.c
	$(CC) posix/posix_settings.c $(OPT)

settings.o:  $(BUILD_DEPENDENCIES) $(CD)settings.cpp
	$(CCC) $(CD)settings.cpp $(QTOPT)

mmd2load.o:  $(BUILD_DEPENDENCIES) mmd2loader/mmd2load.c
	$(CC) mmd2loader/mmd2load.c $(OPT)

scroll.o:  $(BUILD_DEPENDENCIES) $(CD)scroll.c
	$(CC) $(CD)scroll.c $(OPT)


pixmap.o:  $(BUILD_DEPENDENCIES)  $(CD)pixmap.c
	$(CC)  $(CD)pixmap.c $(OPT)

blts.o:  $(BUILD_DEPENDENCIES)  $(CD)blts.c
	$(CC)  $(CD)blts.c $(OPT)

X11_memory.o:  $(BUILD_DEPENDENCIES)  $(P)X11_memory.c 
	$(CC)  $(P)X11_memory.c $(OPT)

gfx_shrink.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_shrink.c
	$(CC)  $(CD)gfx_shrink.c $(OPT)

gfx_shrink_t.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_shrink_t.c
	$(CC)  $(CD)gfx_shrink_t.c $(OPT)

scroll_play.o:  $(BUILD_DEPENDENCIES)  $(CD)scroll_play.c
	$(CC)  $(CD)scroll_play.c $(OPT)

block_split.o:  $(BUILD_DEPENDENCIES)  $(CD)block_split.c
	$(CC)  $(CD)block_split.c $(OPT)

undo_block_mergesplit.o:  $(BUILD_DEPENDENCIES)  $(CD)undo_block_mergesplit.c
	$(CC)  $(CD)undo_block_mergesplit.c $(OPT)

glissando.o:  $(BUILD_DEPENDENCIES)  $(CD)new/glissando.c
	$(CC)  $(CD)new/glissando.c $(OPT)

pitchexpand.o:  $(BUILD_DEPENDENCIES)  $(CD)new/pitchexpand.c
	$(CC)  $(CD)new/pitchexpand.c $(OPT)

expand.o:  $(BUILD_DEPENDENCIES)  $(CD)expand.c
	$(CC)  $(CD)expand.c $(OPT)

api_common.o:  $(BUILD_DEPENDENCIES)  $(API)api_common.c
	$(CC)  $(API)api_common.c $(OPT)

api_keyplay.o:  $(BUILD_DEPENDENCIES)  $(API)api_keyplay.c $(API)radium_proc.h
	$(CC)  $(API)api_keyplay.c $(OPT)

api_keyplayedit.o:  $(BUILD_DEPENDENCIES)  $(API)api_keyplayedit.c $(API)radium_proc.h
	$(CC)  $(API)api_keyplayedit.c $(OPT)

api_navigate.o:  $(BUILD_DEPENDENCIES)  $(API)api_navigate.c $(API)radium_proc.h
	$(CC)  $(API)api_navigate.c $(OPT)

api_noteedit.o:  $(BUILD_DEPENDENCIES)  $(API)api_noteedit.c $(API)radium_proc.h
	$(CC)  $(API)api_noteedit.c $(OPT)

api_trackonoff.o:  $(BUILD_DEPENDENCIES)  $(API)api_trackonoff.c $(API)radium_proc.h
	$(CC)  $(API)api_trackonoff.c $(OPT)

api_zoom.o:  $(BUILD_DEPENDENCIES)  $(API)api_zoom.c $(API)radium_proc.h
	$(CC)  $(API)api_zoom.c $(OPT)

api_notemanipulate.o:  $(BUILD_DEPENDENCIES)  $(API)api_notemanipulate.c $(API)radium_proc.h
	$(CC)  $(API)api_notemanipulate.c $(OPT)

api_play.o:  $(BUILD_DEPENDENCIES)  $(API)api_play.c $(API)radium_proc.h
	$(CC)  $(API)api_play.c $(OPT)

api_clipboard.o:  $(BUILD_DEPENDENCIES)  $(API)api_clipboard.c $(API)radium_proc.h
	$(CC)  $(API)api_clipboard.c $(OPT)

api_undo.o:  $(BUILD_DEPENDENCIES)  $(API)api_undo.c $(API)radium_proc.h
	$(CC)  $(API)api_undo.c $(OPT)

api_various.o:  $(BUILD_DEPENDENCIES)  $(API)api_various.c $(API)radium_proc.h
	$(CC)  $(API)api_various.c $(OPT) -DVERSION=\"$(VERSION)\"

api_instruments.o:  $(BUILD_DEPENDENCIES)  $(API)api_instruments.c $(API)radium_proc.h
	$(CC)  $(API)api_instruments.c $(OPT)

api_requesters.o:  $(BUILD_DEPENDENCIES)  $(API)api_requesters.c $(API)radium_proc.h
	$(CC)  $(API)api_requesters.c $(OPT)

api_mouse.o:  $(BUILD_DEPENDENCIES)  $(API)api_mouse.c $(API)radium_proc.h
	$(CC)  $(API)api_mouse.c $(OPT)

radium_wrap.o:  $(BUILD_DEPENDENCIES)  $(API)radium_wrap.c $(API)radium_proc.h
	$(CC)  $(API)radium_wrap.c $(OPT) -w


$(API)radium_wrap.c: $(BUILD_DEPENDENCIES) $(API)protos.conf $(API)protoconfparser.py $(API)/radium_wrap/radium_wrap_1.c $(API)/radium_wrap/radium_wrap_3.c $(API)makeradiumwrap_c.sh $(API)makeradiumwrap_c.sh
	cd $(API) ; bash makeradiumwrap_c.sh $(PYTHONEXE) ; cd ..

# # The following two lines can be uses instead of the two previous.
# # But I haven't found out how to make swig generate the "PyArg_ParseTupleAndKeywords"
# # function (if possible), and I haven't bothered porting swig to amigaos.
# # And protoconfparser.py does a perfectly fine job anyway.
#$(API)radium_wrap.c: $(API)radium.i
#	swig -python $(API)radium.i

api_support.o:  $(BUILD_DEPENDENCIES)  $(API)api_support.c
	$(CC)  $(API)api_support.c $(OPT)

ad_noteadd.o:  $(BUILD_DEPENDENCIES)  advanced/ad_noteadd.c
	$(CC)  advanced/ad_noteadd.c $(OPT)

wrapfunclist.o:  $(BUILD_DEPENDENCIES) $(API)wrapfunclist.c
	$(CC) $(API)wrapfunclist.c $(OPT)

$(API)wrapfunclist.c: $(BUILD_DEPENDENCIES) $(API)protos.conf $(API)protoconfparser.py
	@echo "$(PYTHONEXE) protoconfparser.py wrapfunclist.c"
	cd $(API) ; $(PYTHONEXE) protoconfparser.py wrapfunclist.c ; cd ..

$(API)radium.i: $(BUILD_DEPENDENCIES) $(API)protos.conf $(API)protoconfparser.py
	@echo "$(PYTHONEXE) protoconfparser.py radium.i"
	cd $(API) ; $(PYTHONEXE) protoconfparser.py radium.i ; cd ..

$(API)radium_proc.h: $(API)protos.conf $(API)protoconfparser.py
	@echo "$(PYTHONEXE) protoconfparser.py radium_proc.h"
	cd $(API) ; $(PYTHONEXE) protoconfparser.py radium_proc.h ; cd ..

gfx_request.o:  $(BUILD_DEPENDENCIES)  $(CD)gfx_request.c
	$(CC)  $(CD)gfx_request.c $(OPT)





midi_playfromstart.o:  $(BUILD_DEPENDENCIES)  midi/midi_playfromstart.c
	$(CC)  midi/midi_playfromstart.c $(OPT) 
midi_i_plugin.o:  $(BUILD_DEPENDENCIES)  midi/midi_i_plugin.c
	$(CC)  midi/midi_i_plugin.c $(OPT) 
midi_i_input.o:  $(BUILD_DEPENDENCIES)  midi/midi_i_input.c
	$(CC)  midi/midi_i_input.c $(OPT) $(JACKOPT)
midi_fx.o:  $(BUILD_DEPENDENCIES)  midi/midi_fx.c
	$(CC)  midi/midi_fx.c $(OPT) 

#disk_midi_mymidilinks.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_mymidilinks.c
#	$(CC)  midi/disk_midi_mymidilinks.c $(OPT) 
# TODO

disk_midi_i_plugin.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_i_plugin.c $(CD)disk.h
	$(CC)  midi/disk_midi_i_plugin.c $(OPT) 
disk_midi_fx.o:  $(BUILD_DEPENDENCIES)  midi/disk_midi_fx.c $(CD)disk.h
	$(CC)  midi/disk_midi_fx.c $(OPT) 
midi_rtmidi.o:  $(BUILD_DEPENDENCIES) midi/rtmidi/midi_rtmidi.cpp $(RTMIDI_DIR)/RtMidi.h
	$(CCC) midi/rtmidi/midi_rtmidi.cpp $(CPPOPT) $(RTMIDI_CFLAGS)
alsaseq_midi.o:  $(BUILD_DEPENDENCIES)  midi/alsaseq/alsaseq_midi.c
	$(CC)  midi/alsaseq/alsaseq_midi.c $(OPT) 
#midi_getEvents.o:  $(BUILD_DEPENDENCIES)  midi/midi_getEvents.c
#	$(CC)  midi/midi_getEvents.c $(OPT) 
midi_menues.o:  $(BUILD_DEPENDENCIES)  midi/midi_menues.c
	$(CC)  midi/midi_menues.c $(OPT) 

RtMidi.o:  $(BUILD_DEPENDENCIES) $(RTMIDI_DIR)/RtMidi.cpp $(RTMIDI_DIR)/RtMidi.h
	$(CCC) $(RTMIDI_DIR)/RtMidi.cpp $(RTMIDI_CFLAGS) $(CPPOPT) -Wno-null-conversion



buildtype.opt: #Makefile
	echo $(TARGET_OS)
	if [ $(BUILDTYPE) = DEBUG ] ; then \
		echo "$(DEBUG_BUILD_OPTS)" >buildtype.opt ; \
	elif [ $(TARGET_OS) = mingw32 ] ; then \
		echo "$(RELEASE_BUILD_OPTS_WITHOUT_NDEBUG)" >buildtype.opt ; \
	else \
		echo "$(RELEASE_BUILD_OPTS)" >buildtype.opt ; \
	fi

bin/X11_XSendEvent: X11/X11_XSendEvent.c
	$(CC) X11/X11_XSendEvent.c -Wall -o bin/X11_XSendEvent -L/usr/X11R6/lib -lX11


# Mixer

$(QM)QM_view.cpp: $(QM)mQM_view.cpp
$(QM)QM_MixerWidget.cpp: $(QM)mQM_MixerWidget.cpp

$(QM)mQM_view.cpp: $(QM)QM_view.h 
	cd $(QM) && $(MOC) QM_view.h >mQM_view.cpp

$(QM)mQM_MixerWidget.cpp: $(QM)QM_MixerWidget.h $(P)Qt_MyQButton.h
	cd $(QM) && $(MOC) QM_MixerWidget.h >mQM_MixerWidget.cpp

#images.o: $(QM)images.qrc
#	$(RCC) $(QM)images.qrc -name images -o $(QM)images.cpp
#	$(CCC) $(QM)images.cpp  `$(PKG) --libs --cflags QtGui` -c

QM_MixerWidget.o: $(QM)QM_MixerWidget.cpp $(QM)QM_chip.h $(P)Qt_mixer_widget.h $(QM)QM_MixerWidget.h
	$(CCC) $(QM)QM_MixerWidget.cpp $(QTOPT)

QM_view.o: $(QM)QM_view.cpp $(QM)QM_chip.h $(QM)mQM_view.cpp $(QM)QM_MixerWidget.h
	$(CCC) $(QM)QM_view.cpp $(QTOPT)

QM_chip.o: $(QM)QM_chip.cpp $(QM)QM_chip.h $(P)Qt_MyQCheckBox.h $(QM)QM_MixerWidget.h
	$(CCC) $(QM)QM_chip.cpp $(QTOPT)

undo_chip_position.o: $(QM)undo_chip_position.c $(QM)QM_chip.h
	$(CC) $(OPT) $(QM)undo_chip_position.c

undo_mixer.o: $(QM)undo_mixer.c
	$(CC) $(OPT) $(QM)undo_mixer.c

undo_mixer_connections.o: $(QM)undo_mixer_connections.c
	$(CC) $(OPT) $(QM)undo_mixer_connections.c

undo_chip_addremove.o: $(QM)undo_chip_addremove.c
	$(CC) $(OPT) $(QM)undo_chip_addremove.c

Jack_plugin.o: audio/Jack_plugin.c weakjack/weak_libjack.def weakjack/weak_libjack.h weakjack/weak_libjack.c
	$(CC) $(OPT) audio/Jack_plugin.c $(JACKOPT)

Sine_plugin.o: audio/Sine_plugin.c
	$(CC) $(OPT) audio/Sine_plugin.c

Bus_plugins.o: audio/Bus_plugins.cpp
	$(CCC) audio/Bus_plugins.cpp $(QTOPT)

Patchbay_plugin.o: audio/Patchbay_plugin.c
	$(CC) audio/Patchbay_plugin.c $(OPT)

MidiMessages_plugin.o: audio/MidiMessages_plugin.c
	$(CC) audio/MidiMessages_plugin.c $(OPT) -std=c99

VST_plugins.o: audio/VST_plugins.cpp $(P)Qt_vst_paths_widget.h
	$(CCC) audio/VST_plugins.cpp $(QTOPT) -Wno-error # uses some Qt stuff to open GUI window

Ladspa_plugins.o: audio/Ladspa_plugins.cpp
	$(CCC) audio/Ladspa_plugins.cpp $(QTOPT) $(LRDFOPT)

Sampler_plugin.o: audio/Sampler_plugin.c audio/Sampler_plugin_wav_parse.c audio/Sampler_plugin_xi_load.c audio/Sampler_plugin_sf2_load.c audio/SoundFonts_proc.h
	$(GCC) $(OPT)  $(CPUOPT) audio/Sampler_plugin.c $(SNDFILEOPT) $(SAMPLERATEOPT) $(GLIBOPT)

FluidSynth_plugin.o: audio/FluidSynth_plugin.c
	$(CC) -Ibin/packages/fluidsynth-1.1.6/include $(OPT) $(CPUOPT) audio/FluidSynth_plugin.c
#`$(PKG) --cflags fluidsynth`

Pd_plugin.o: audio/Pd_plugin.cpp
	$(CCC) -Ibin/packages/fluidsynth-1.1.6/include $(QTOPT) audio/Pd_plugin.cpp -Ibin/packages/libpd-master/libpds -Ibin/packages/libpd-master/libpd_wrapper -Ibin/packages/libpd-master/pure-data/src

zita_rev.o: audio/zita_rev.cpp
	$(CCC) audio/zita_rev.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Zita_dsp  -DDSP_NAME=\"Zita\ Reverb\" -DCREATE_NAME=create_zita_rev_plugin

audio/zita_rev.cpp: audio/zita_rev.dsp audio/Faust_plugins.cpp
	cd audio && $(FAUST) -cn Zita_dsp -a Faust_plugins.cpp zita_rev.dsp >zita_rev.cpp

stk_flute.o: audio/stk_flute.cpp
	$(CCC) audio/stk_flute.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Flute_dsp -DDSP_NAME=\"STK\ Flute\" -DCREATE_NAME=create_stk_flute_plugin

audio/stk_flute.cpp: audio/faust-examples/faust-stk/flute.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Flute_dsp -a ../../Faust_plugins.cpp flute.dsp >../../stk_flute.cpp

stk_bowed.o: audio/stk_bowed.cpp
	$(CCC) audio/stk_bowed.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Bowed_dsp -DDSP_NAME=\"STK\ Bowed\" -DCREATE_NAME=create_stk_bowed_plugin

audio/stk_bowed.cpp: audio/faust-examples/faust-stk/bowed.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Bowed_dsp -a ../../Faust_plugins.cpp bowed.dsp >../../stk_bowed.cpp

stk_blow_bottle.o: audio/stk_blow_bottle.cpp
	$(CCC) audio/stk_blow_bottle.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Blow_Bottle_dsp -DDSP_NAME=\"STK\ Blow\ Bottle\" -DCREATE_NAME=create_stk_blow_bottle_plugin

audio/stk_blow_bottle.cpp: audio/faust-examples/faust-stk/blowBottle.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Blow_Bottle_dsp -a ../../Faust_plugins.cpp blowBottle.dsp >../../stk_blow_bottle.cpp

stk_bass.o: audio/stk_bass.cpp
	$(CCC) audio/stk_bass.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Bass_dsp -DDSP_NAME=\"STK\ Bass\" -DCREATE_NAME=create_stk_bass_plugin -Iaudio/faust-examples/faust-stk

audio/stk_bass.cpp: audio/faust-examples/faust-stk/bass.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Bass_dsp -a ../../Faust_plugins.cpp bass.dsp >../../stk_bass.cpp

stk_blow_hole.o: audio/stk_blow_hole.cpp
	$(CCC) audio/stk_blow_hole.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Blow_Hole_dsp -DDSP_NAME=\"STK\ Blow\ Hole\ \(clarinet\)\" -DCREATE_NAME=create_stk_blow_hole_plugin -Iaudio/faust-examples/faust-stk

audio/stk_blow_hole.cpp: audio/faust-examples/faust-stk/blowHole.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Blow_Hole_dsp -a ../../Faust_plugins.cpp blowHole.dsp >../../stk_blow_hole.cpp

stk_brass.o: audio/stk_brass.cpp
	$(CCC) audio/stk_brass.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Brass_dsp -DDSP_NAME=\"STK\ Brass\" -DCREATE_NAME=create_stk_brass_plugin -Iaudio/faust-examples/faust-stk

audio/stk_brass.cpp: audio/faust-examples/faust-stk/brass.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Brass_dsp -a ../../Faust_plugins.cpp brass.dsp >../../stk_brass.cpp

stk_clarinet.o: audio/stk_clarinet.cpp
	$(CCC) audio/stk_clarinet.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Clarinet_dsp -DDSP_NAME=\"STK\ Clarinet\" -DCREATE_NAME=create_stk_clarinet_plugin -Iaudio/faust-examples/faust-stk

audio/stk_clarinet.cpp: audio/faust-examples/faust-stk/clarinet.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Clarinet_dsp -a ../../Faust_plugins.cpp clarinet.dsp >../../stk_clarinet.cpp

stk_flute_stk.o: audio/stk_flute_stk.cpp
	$(CCC) audio/stk_flute_stk.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Flute_Stk_dsp -DDSP_NAME=\"STK\ Flute\ STK\" -DCREATE_NAME=create_stk_flute_stk_plugin -Iaudio/faust-examples/faust-stk

audio/stk_flute_stk.cpp: audio/faust-examples/faust-stk/flutestk.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Flute_Stk_dsp -a ../../Faust_plugins.cpp flutestk.dsp >../../stk_flute_stk.cpp

stk_glass_harmonica.o: audio/stk_glass_harmonica.cpp
	$(CCC) audio/stk_glass_harmonica.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Glass_Harmonica_dsp -DDSP_NAME=\"STK\ Glass\ Harmonica\" -DCREATE_NAME=create_stk_glass_harmonica_plugin -Iaudio/faust-examples/faust-stk

audio/stk_glass_harmonica.cpp: audio/faust-examples/faust-stk/glassHarmonica.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Glass_Harmonica_dsp -a ../../Faust_plugins.cpp glassHarmonica.dsp >../../stk_glass_harmonica.cpp

stk_harpsi.o: audio/stk_harpsi.cpp
	$(CCC) audio/stk_harpsi.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Harpsi_dsp -DDSP_NAME=\"STK\ Harpsichord\" -DCREATE_NAME=create_stk_harpsi_plugin -Iaudio/faust-examples/faust-stk

audio/stk_harpsi.cpp: audio/faust-examples/faust-stk/harpsi.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Harpsi_dsp -a ../../Faust_plugins.cpp harpsi.dsp >../../stk_harpsi.cpp

stk_modal_bar.o: audio/stk_modal_bar.cpp
	$(CCC) audio/stk_modal_bar.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Modal_Bar_dsp -DDSP_NAME=\"STK\ Modal\ Bar\" -DCREATE_NAME=create_stk_modal_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_modal_bar.cpp: audio/faust-examples/faust-stk/modalBar.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Modal_Bar_dsp -a ../../Faust_plugins.cpp modalBar.dsp >../../stk_modal_bar.cpp

stk_NLF_eks.o: audio/stk_NLF_eks.cpp
	$(CCC) audio/stk_NLF_eks.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=NLF_Eks_dsp -DDSP_NAME=\"STK\ Non\-linear\ Karplus\-Strong\" -DCREATE_NAME=create_stk_NLF_eks_plugin -Iaudio/faust-examples/faust-stk

audio/stk_NLF_eks.cpp: audio/faust-examples/faust-stk/NLFeks.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn NLF_Eks_dsp -a ../../Faust_plugins.cpp NLFeks.dsp >../../stk_NLF_eks.cpp

stk_NLF_fm.o: audio/stk_NLF_fm.cpp
	$(CCC) audio/stk_NLF_fm.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=NLF_Fm_dsp -DDSP_NAME=\"STK\ Non\-linear\ FM\" -DCREATE_NAME=create_stk_NLF_fm_plugin -Iaudio/faust-examples/faust-stk

audio/stk_NLF_fm.cpp: audio/faust-examples/faust-stk/NLFfm.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn NLF_Fm_dsp -a ../../Faust_plugins.cpp NLFfm.dsp >../../stk_NLF_fm.cpp

stk_piano.o: audio/stk_piano.cpp
	$(CCC) audio/stk_piano.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Piano_dsp -DDSP_NAME=\"STK\ Piano\" -DCREATE_NAME=create_stk_piano_plugin -Iaudio/faust-examples/faust-stk

audio/stk_piano.cpp: audio/faust-examples/faust-stk/piano.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Piano_dsp -a ../../Faust_plugins.cpp piano.dsp >../../stk_piano.cpp

stk_saxophony.o: audio/stk_saxophony.cpp
	$(CCC) audio/stk_saxophony.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Saxophony_dsp -DDSP_NAME=\"STK\ Saxophony\" -DCREATE_NAME=create_stk_saxophony_plugin -Iaudio/faust-examples/faust-stk

audio/stk_saxophony.cpp: audio/faust-examples/faust-stk/saxophony.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Saxophony_dsp -a ../../Faust_plugins.cpp saxophony.dsp >../../stk_saxophony.cpp

stk_sitar.o: audio/stk_sitar.cpp
	$(CCC) audio/stk_sitar.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Sitar_dsp -DDSP_NAME=\"STK\ Sitar\" -DCREATE_NAME=create_stk_sitar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_sitar.cpp: audio/faust-examples/faust-stk/sitar.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Sitar_dsp -a ../../Faust_plugins.cpp sitar.dsp >../../stk_sitar.cpp

stk_tibetan_bowl.o: audio/stk_tibetan_bowl.cpp
	$(CCC) audio/stk_tibetan_bowl.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Tibetan_Bowl_dsp -DDSP_NAME=\"STK\ Tibetan\ Bowl\" -DCREATE_NAME=create_stk_tibetan_bowl_plugin -Iaudio/faust-examples/faust-stk

audio/stk_tibetan_bowl.cpp: audio/faust-examples/faust-stk/tibetanBowl.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Tibetan_Bowl_dsp -a ../../Faust_plugins.cpp tibetanBowl.dsp >../../stk_tibetan_bowl.cpp

stk_tuned_bar.o: audio/stk_tuned_bar.cpp
	$(CCC) audio/stk_tuned_bar.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Tuned_Bar_dsp -DDSP_NAME=\"STK\ Tuned\ Bar\" -DCREATE_NAME=create_stk_tuned_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_tuned_bar.cpp: audio/faust-examples/faust-stk/tunedBar.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Tuned_Bar_dsp -a ../../Faust_plugins.cpp tunedBar.dsp >../../stk_tuned_bar.cpp

stk_uni_bar.o: audio/stk_uni_bar.cpp
	$(CCC) audio/stk_uni_bar.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Uni_Bar_dsp -DDSP_NAME=\"STK\ Uni\ Bar\" -DCREATE_NAME=create_stk_uni_bar_plugin -Iaudio/faust-examples/faust-stk

audio/stk_uni_bar.cpp: audio/faust-examples/faust-stk/uniBar.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Uni_Bar_dsp -a ../../Faust_plugins.cpp uniBar.dsp >../../stk_uni_bar.cpp

stk_voice_form.o: audio/stk_voice_form.cpp
	$(CCC) audio/stk_voice_form.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Voice_Form_dsp -DDSP_NAME=\"STK\ Voice\" -DCREATE_NAME=create_stk_voice_form_plugin -Iaudio/faust-examples/faust-stk

audio/stk_voice_form.cpp: audio/faust-examples/faust-stk/voiceForm.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples/faust-stk && $(FAUST) -cn Voice_Form_dsp -a ../../Faust_plugins.cpp voiceForm.dsp >../../stk_voice_form.cpp

faust_tapiir.o: audio/faust_tapiir.cpp
	$(CCC) audio/faust_tapiir.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Tapiir_dsp -DDSP_NAME=\"Tapiir\" -DCREATE_NAME=create_faust_tapiir_plugin 

audio/faust_tapiir.cpp: audio/faust-examples/tapiir.dsp audio/Faust_plugins.cpp
	cd audio/faust-examples && $(FAUST) -cn Tapiir_dsp -a ../Faust_plugins.cpp tapiir.dsp >../faust_tapiir.cpp

faust_multibandcomp.o: audio/faust_multibandcomp.cpp
	$(CCC) audio/faust_multibandcomp.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=Multibandcomp_dsp -DDSP_NAME=\"Multiband\ Compressor\" -DCREATE_NAME=create_faust_multibandcomp_plugin -DFAUST_THAT_ONE

audio/faust_multibandcomp.cpp: audio/faust_multibandcomp.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -vec -cn Multibandcomp_dsp -a Faust_plugins.cpp faust_multibandcomp.dsp >faust_multibandcomp.cpp

faust_system_eq.o: audio/faust_system_eq.cpp
	$(CCC) audio/faust_system_eq.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=System_Eq_dsp -DDSP_NAME=\"System\ Eq\" -DCREATE_NAME=create_faust_system_eq_plugin -DDONT_NORMALIZE_EFFECT_VALUES

audio/faust_system_eq.cpp: audio/system_eq.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -cn System_Eq_dsp -a Faust_plugins.cpp system_eq.dsp >faust_system_eq.cpp

faust_system_lowpass.o: audio/faust_system_lowpass.cpp
	$(CCC) audio/faust_system_lowpass.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=System_Lowpass_dsp -DDSP_NAME=\"System\ Lowpass\" -DCREATE_NAME=create_faust_system_lowpass_plugin -DDONT_NORMALIZE_EFFECT_VALUES

audio/faust_system_lowpass.cpp: audio/system_lowpass.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -cn System_Lowpass_dsp -a Faust_plugins.cpp system_lowpass.dsp >faust_system_lowpass.cpp

faust_system_lowshelf.o: audio/faust_system_lowshelf.cpp
	$(CCC) audio/faust_system_lowshelf.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=System_Lowshelf_dsp -DDSP_NAME=\"System\ Lowshelf\" -DCREATE_NAME=create_faust_system_lowshelf_plugin -DDONT_NORMALIZE_EFFECT_VALUES

audio/faust_system_lowshelf.cpp: audio/system_lowshelf.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -cn System_Lowshelf_dsp -a Faust_plugins.cpp system_lowshelf.dsp >faust_system_lowshelf.cpp

faust_system_highshelf.o: audio/faust_system_highshelf.cpp
	$(CCC) audio/faust_system_highshelf.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=System_Highshelf_dsp -DDSP_NAME=\"System\ Highshelf\" -DCREATE_NAME=create_faust_system_highshelf_plugin -DDONT_NORMALIZE_EFFECT_VALUES

audio/faust_system_highshelf.cpp: audio/system_highshelf.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -cn System_Highshelf_dsp -a Faust_plugins.cpp system_highshelf.dsp >faust_system_highshelf.cpp

faust_system_delay.o: audio/faust_system_delay.cpp
	$(CCC) audio/faust_system_delay.cpp $(CPPOPT) $(CPUOPT) -DCLASSNAME=System_Delay_dsp -DDSP_NAME=\"System\ Delay\" -DCREATE_NAME=create_faust_system_delay_plugin -DDONT_NORMALIZE_EFFECT_VALUES

audio/faust_system_delay.cpp: audio/system_delay.dsp audio/Faust_plugins.cpp audio/filter_smoothing.lib
	cd audio && $(FAUST) -cn System_Delay_dsp -a Faust_plugins.cpp system_delay.dsp >faust_system_delay.cpp

#Faust_plugins.o: audio/Faust_plugins.cpp audio/zita_rev.cpp audio/faust-examples/faust-stk/flute.cpp
#	$(CCC) audio/Faust_plugins.cpp $(CPPOPT) $(CPUOPT) -DDSP_INCLUDE=zita_rev.cpp -DDSP_NAME=\"Zita Reverb\"

#audio/zita_rev.cpp: audio/zita_rev.dsp
#	cd audio && $(FAUST) -cn my_dsp zita_rev.dsp >zita_rev.cpp

#audio/faust-examples/faust-stk/flute.cpp: audio/faust-examples/faust-stk/flute.dsp
#	cd audio/faust-examples/faust-stk && $(FAUST) -cn my_dsp flute.dsp >flute.cpp

SoundProducer.o: audio/SoundProducer.cpp audio/SoundProducer_proc.h audio/fade_envelopes.h audio/MultiCore.cpp common/sema.h common/Semaphores.hpp
	$(MOC) audio/MultiCore.cpp >audio/mMultiCore.cpp
	$(CCC) audio/SoundProducer.cpp $(QTOPT)  # $(CPUOPT)
#-fno-tree-vectorize # tree-vectorize makes radium crash on windows 8 with gcc 4.7.2

#-finline-functions -funswitch-loops -fvect-cost-model -fipa-cp-clone  -fpredictive-commoning -fgcse-after-reload
#-ftree-vectorize

MultiCore.o: audio/MultiCore.cpp audio/fade_envelopes.h
	$(CCC) audio/MultiCore.cpp $(QTOPT)


SoundPluginRegistry.o: audio/SoundPluginRegistry.cpp
	$(CCC) audio/SoundPluginRegistry.cpp  $(QTOPT)

SoundPlugin.o: audio/SoundPlugin.c audio/SoundPlugin.h audio/SoundPlugin_proc.h
	$(CC) audio/SoundPlugin.c $(OPT) -std=c99
### $(CPUOPT)

Mixer.o: audio/Mixer.cpp audio/SoundProducer_proc.h
	$(CCC) audio/Mixer.cpp  $(JACKOPT) $(QTOPT)  $(CPUOPT)

get_windows_commandlines.o: audio/get_windows_commandlines.c
	$(CC) audio/get_windows_commandlines.c $(OPT)

Envelope.o: audio/Envelope.cpp
	$(CCC) audio/Envelope.cpp $(CPPOPT) $(CPUOPT)

Resampler.o: audio/Resampler.cpp
#	$(CCC) audio/Resampler.cpp $(CPPOPT) `$(PKG) --cflags samplerate`
	$(CCC) audio/Resampler.cpp $(CPPOPT) $(CPUOPT) `$(PKG) --cflags samplerate`

SoundFonts.o: audio/SoundFonts.cpp
	$(CCC) audio/SoundFonts.cpp $(QTOPT) -Ibin/packages/libgig/src/
# `$(PKG) --cflags glib-2.0`

audio_instrument.o: audio/audio_instrument.c $(CD)disk.h
	$(CC) audio/audio_instrument.c $(OPT)

Smooth.o: audio/Smooth.c audio/Smooth_proc.h
	$(CC) audio/Smooth.c $(OPT) $(CPUOPT)

undo_audio_effect.o: audio/undo_audio_effect.c
	$(CC) audio/undo_audio_effect.c $(OPT)

undo_pd_controllers.o: audio/undo_pd_controllers.c
	$(CC) audio/undo_pd_controllers.c $(OPT)

undo_sample.o: audio/undo_sample.c
	$(CC) audio/undo_sample.c $(OPT)

SoundfileSaver.o: audio/SoundfileSaver.c
	$(CC) audio/SoundfileSaver.c $(OPT) $(SNDFILEOPT)

system_compressor_wrapper.o: audio/system_compressor_wrapper.cpp audio/system_compressor.cpp
	$(CCC) $(QTOPT) $(CPUOPT) audio/system_compressor_wrapper.cpp

audio/system_compressor.cpp: audio/system_compressor.dsp
	$(FAUST) -vec -cn Faust_system_compressor audio/system_compressor.dsp >audio/system_compressor.cpp

bin/crashreporter: crashreporter/crashreporter.cpp $(API)radium_proc.h
	$(CCC) -Wall crashreporter/crashreporter.cpp $(CPPOPT) -DCRASHREPORTER_BIN -DVERSION=\"$(VERSION)\" `$(PKG) --cflags QtGui` `$(PKG) --cflags QtNetwork` -o crashbin.o
	$(LINKER) crashbin.o -o bin/crashreporter `$(PKG) --libs QtGui` `$(PKG) --libs QtNetwork`
	rm crashbin.o

crashreporter.o: crashreporter/crashreporter.cpp
	$(CCC) crashreporter/crashreporter.cpp $(QTOPT) $(CRASHREPORTER_OPTS) -DVERSION=\"$(VERSION)\"

crashreporter_posix.o: crashreporter/crashreporter_posix.c crashreporter/backtrace-symbols.c
	$(CC) crashreporter/crashreporter_posix.c $(OPT) $(CRASHREPORTER_POSIX_OPTS)

crashreporter_windows.o: crashreporter/crashreporter_windows.c
	$(CC) crashreporter/crashreporter_windows.c $(OPT) -I/home/kjetil/radium-qt4/mingw/binutils-2.23.1/bfd -DPACKAGE -I/home/kjetil/radium-qt4/mingw/binutils-2.23.1/include -O0

GfxElements.o: OpenGL/GfxElements.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/SharedVariables.hpp OpenGL/FreeType.hpp
	$(CCC) OpenGL/GfxElements.cpp $(VL_CFLAGS) $(QTOPT) $(FREETYPE_CFLAGS)

Render.o: OpenGL/Render.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/SharedVariables.hpp
	$(CCC) OpenGL/Render.cpp $(VL_CFLAGS) $(QTOPT)

Widget.o: OpenGL/Widget.cpp OpenGL/TextBitmaps.hpp OpenGL/GfxElements.h OpenGL/Timing.hpp OpenGL/SharedVariables.hpp
	$(CCC) OpenGL/Widget.cpp $(VL_CFLAGS) $(QTOPT)

do.o:  $(BUILD_DEPENDENCIES) OpenGL/do.m
	$(CC) OpenGL/do.m $(OPT)



# embedded scheme

bin/packages/s7/s7_$(TARGET_OS).o: bin/packages/s7/s7.c
	$(GCC) -c bin/packages/s7/s7.c -o bin/packages/s7/s7_$(TARGET_OS).o `cat buildtype.opt` -Iembedded_scheme -O2 $(S7OPTS) -Wno-absolute-value

s7webserver.o: bin/s7webserver/s7webserver.h bin/s7webserver/s7webserver.cpp bin/s7webserver/moc_s7webserver.cpp
	$(CCC) -c bin/s7webserver/s7webserver.cpp $(QT_CFLAGS) -Ibin/packages/s7 -g -Iembedded_scheme -Wall -Werror -Wno-error=unused-variable -Wno-error=unused-function

bin/s7webserver/moc_s7webserver.cpp: bin/s7webserver/s7webserver.h
	$(MOC) -DCOMPILING_S7WEBSERVER bin/s7webserver/s7webserver.h -o bin/s7webserver/moc_s7webserver.cpp

scheme.o: embedded_scheme/scheme.cpp
	$(CCC) -c embedded_scheme/scheme.cpp $(QTOPT) -Ibin/packages/qhttpserver-master/src -Ibin/packages/s7

QHTTPSERVERFLAGS = $(CPPOPT) $(QT_CFLAGS) -Ibin/packages/qhttpserver-master/http-parser -Ibin/packages/qhttpserver-master/build -D_REENTRANT

qhttpconnection.o:
	$(CCC) -c bin/packages/qhttpserver-master/src/qhttpconnection.cpp $(QHTTPSERVERFLAGS)
qhttprequest.o:
	$(CCC) -c bin/packages/qhttpserver-master/src/qhttprequest.cpp $(QHTTPSERVERFLAGS)
qhttpresponse.o:
	$(CCC) -c bin/packages/qhttpserver-master/src/qhttpresponse.cpp $(QHTTPSERVERFLAGS)
qhttpserver.o:
	$(CCC) -c bin/packages/qhttpserver-master/src/qhttpserver.cpp $(QHTTPSERVERFLAGS)
moc_qhttpconnection.o:
	$(CCC) -c bin/packages/qhttpserver-master/build/moc_qhttpconnection.cpp $(QHTTPSERVERFLAGS)
moc_qhttprequest.o:
	$(CCC) -c bin/packages/qhttpserver-master/build/moc_qhttprequest.cpp $(QHTTPSERVERFLAGS)
moc_qhttpresponse.o:
	$(CCC) -c bin/packages/qhttpserver-master/build/moc_qhttpresponse.cpp $(QHTTPSERVERFLAGS)
moc_qhttpserver.o:
	$(CCC) -c bin/packages/qhttpserver-master/build/moc_qhttpserver.cpp $(QHTTPSERVERFLAGS)
#ar cqs libqhttpserver.a qhttpconnection.o moc_qhttpconnection.o qhttprequest.o moc_qhttprequest.o qhttpresponse.o moc_qhttpresponse.o qhttpserver.o moc_qhttpserver.o

http_parser.o: bin/packages/qhttpserver-master/http-parser/http_parser.c
	$(CC) -c bin/packages/qhttpserver-master/http-parser/http_parser.c $(OPT)

radium_s7_wrap.o: api/radium_s7_wrap.c $(API)radium_proc.h
	$(CC) api/radium_s7_wrap.c $(OPT) -Ibin/packages/s7

api/radium_s7_wrap.c: api/protoconfparser.py api/protos.conf
	cd api && $(PYTHONEXE) protoconfparser.py radium_s7_wrap.c >radium_s7_wrap.c

#bin/zita_rev_ladspa.so: audio/zita_rev.dsp
#	cd audio && $(FAUST) -a ladspa.cpp -cn zita_rev_radium zita_rev.dsp >zita_rev_ladspa.cpp
#	$(CCC) -I /usr/share/faust/ audio/zita_rev_ladspa.cpp -shared -o bin/zita_rev_ladspa.so -fPIC 



