diff --git a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.cpp b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.cpp
index 816f998fa..2d00bc49f 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.cpp
+++ b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.cpp
@@ -148,36 +148,36 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPatternProvider (PATTERNID pId, IUn
 
             switch (pId)
             {
-                case ComTypes::UIA_WindowPatternId:
+                case UIA_WindowPatternId:
                 {
                     if (fragmentRoot)
                         return new UIAWindowProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_TransformPatternId:
+                case UIA_TransformPatternId:
                 {
                     if (fragmentRoot)
                         return new UIATransformProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_TextPatternId:
-                case ComTypes::UIA_TextPattern2Id:
+                case UIA_TextPatternId:
+                case UIA_TextPattern2Id:
                 {
                     if (accessibilityHandler.getTextInterface() != nullptr)
                         return new UIATextProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_ValuePatternId:
+                case UIA_ValuePatternId:
                 {
                     if (accessibilityHandler.getValueInterface() != nullptr)
                         return new UIAValueProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_RangeValuePatternId:
+                case UIA_RangeValuePatternId:
                 {
                     if (accessibilityHandler.getValueInterface() != nullptr
                         && accessibilityHandler.getValueInterface()->getRange().isValid())
@@ -187,7 +187,7 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPatternProvider (PATTERNID pId, IUn
 
                     break;
                 }
-                case ComTypes::UIA_TogglePatternId:
+                case UIA_TogglePatternId:
                 {
                     if (accessibilityHandler.getCurrentState().isCheckable()
                         && (accessibilityHandler.getActions().contains (AccessibilityActionType::toggle)
@@ -198,7 +198,7 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPatternProvider (PATTERNID pId, IUn
 
                     break;
                 }
-                case ComTypes::UIA_SelectionPatternId:
+                case UIA_SelectionPatternId:
                 {
                     if (role == AccessibilityRole::list
                         || role == AccessibilityRole::popupMenu
@@ -209,7 +209,7 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPatternProvider (PATTERNID pId, IUn
 
                     break;
                 }
-                case ComTypes::UIA_SelectionItemPatternId:
+                case UIA_SelectionItemPatternId:
                 {
                     auto state = accessibilityHandler.getCurrentState();
 
@@ -221,28 +221,28 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPatternProvider (PATTERNID pId, IUn
 
                     break;
                 }
-                case ComTypes::UIA_GridPatternId:
+                case UIA_GridPatternId:
                 {
                     if (accessibilityHandler.getTableInterface() != nullptr)
                         return new UIAGridProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_GridItemPatternId:
+                case UIA_GridItemPatternId:
                 {
                     if (accessibilityHandler.getCellInterface() != nullptr)
                         return new UIAGridItemProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_InvokePatternId:
+                case UIA_InvokePatternId:
                 {
                     if (accessibilityHandler.getActions().contains (AccessibilityActionType::press))
                         return new UIAInvokeProvider (this);
 
                     break;
                 }
-                case ComTypes::UIA_ExpandCollapsePatternId:
+                case UIA_ExpandCollapsePatternId:
                 {
                     if (accessibilityHandler.getActions().contains (AccessibilityActionType::showMenu)
                         && accessibilityHandler.getCurrentState().isExpandable())
@@ -313,7 +313,7 @@ JUCE_COMRESULT AccessibilityNativeHandle::GetPropertyValue (PROPERTYID propertyI
                     VariantHelpers::setBool (textInterface->isDisplayingProtectedText(), pRetVal);
 
                 break;
-            case ComTypes::UIA_IsPeripheralPropertyId:
+            case UIA_IsPeripheralPropertyId:
                 VariantHelpers::setBool (role == AccessibilityRole::tooltip
                                          || role == AccessibilityRole::popupMenu
                                          || role == AccessibilityRole::splashScreen,
diff --git a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.h b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.h
index 83d858763..b1c9a7d7b 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.h
+++ b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_AccessibilityElement.h
@@ -26,9 +26,11 @@
 namespace juce
 {
 
+  /*
 #define UIA_FullDescriptionPropertyId 30159
 #define UIA_IsDialogPropertyId        30174
-
+  */
+  
 class AccessibilityNativeHandle  : public ComBaseClassHelper<IRawElementProviderSimple,
                                                              ComTypes::IRawElementProviderFragment,
                                                              ComTypes::IRawElementProviderFragmentRoot>
diff --git a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_ComInterfaces.h b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_ComInterfaces.h
index 6af77ae0d..3e888affd 100644
--- a/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_ComInterfaces.h
+++ b/pluginhost/JuceLibraryCode/modules/juce_gui_basics/native/accessibility/juce_win32_ComInterfaces.h
@@ -120,6 +120,7 @@ enum WindowInteractionState
     WindowInteractionState_NotResponding = 4
 };
 
+#if 0
 const long UIA_InvokePatternId = 10000;
 const long UIA_SelectionPatternId = 10001;
 const long UIA_ValuePatternId = 10002;
@@ -127,13 +128,16 @@ const long UIA_RangeValuePatternId = 10003;
 const long UIA_ExpandCollapsePatternId = 10005;
 const long UIA_GridPatternId = 10006;
 const long UIA_GridItemPatternId = 10007;
+ 
 const long UIA_WindowPatternId = 10009;
 const long UIA_SelectionItemPatternId = 10010;
 const long UIA_TextPatternId = 10014;
 const long UIA_TogglePatternId = 10015;
 const long UIA_TransformPatternId = 10016;
 const long UIA_TextPattern2Id = 10024;
+ #endif
 const long UIA_StructureChangedEventId = 20002;
+
 const long UIA_MenuOpenedEventId = 20003;
 const long UIA_AutomationFocusChangedEventId = 20005;
 const long UIA_MenuClosedEventId = 20007;
@@ -144,7 +148,8 @@ const long UIA_Text_TextSelectionChangedEventId = 20014;
 const long UIA_Text_TextChangedEventId = 20015;
 const long UIA_Window_WindowOpenedEventId = 20016;
 const long UIA_Window_WindowClosedEventId = 20017;
-const long UIA_IsPeripheralPropertyId = 30150;
+//const long UIA_IsPeripheralPropertyId = 30150;
+
 const long UIA_IsReadOnlyAttributeId = 40015;
 const long UIA_CaretPositionAttributeId = 40038;
 const long UIA_ButtonControlTypeId = 50000;
@@ -173,6 +178,7 @@ const long UIA_HeaderControlTypeId = 50034;
 const long UIA_HeaderItemControlTypeId = 50035;
 const long UIA_TableControlTypeId = 50036;
 
+ 
 interface IRawElementProviderFragmentRoot;
 interface IRawElementProviderFragment;
 
